{"config":{"lang":["fi"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Aloitus","text":""},{"location":"#tervetuloa-reporouskuun","title":"Tervetuloa RepoRouskuun!","text":"<p>RepoRousku on mikropalvelu, joka tarjoaa kattavan n\u00e4kym\u00e4n GitLab-repositorioprojektiin. T\u00e4m\u00e4 ohjelma on rakennettu Streamlitill\u00e4, Pythonilla ja sill\u00e4 noudetaan dataa GitLabista ja Clockifyst\u00e4 REST API -rajapintojen avulla. </p> <p>Tip</p> <p>Olitpa projektitiimin j\u00e4sen tai opettaja, RepoRousku antaa sinulle hyv\u00e4n k\u00e4sityksen projektin tilasta visualisoiden kaiken tarvittavan k\u00e4ytt\u00e4j\u00e4yst\u00e4v\u00e4lliseen k\u00e4ytt\u00f6liittym\u00e4\u00e4n.</p>"},{"location":"#ominaisuudet","title":"Ominaisuudet","text":"<ul> <li> <p>GitLab-integraatio: Yhdist\u00e4 GitLabiin sek\u00e4 Clockifyihin ja hae projektitietoja, kuten issueiden lukum\u00e4\u00e4r\u00e4, projektitiimin j\u00e4senet ja heid\u00e4n projektiin k\u00e4ytt\u00e4m\u00e4ns\u00e4 aika. </p> </li> <li> <p>Tiimin j\u00e4senien tilastot: N\u00e4e ja analysoi tiimin j\u00e4seniin liittyvi\u00e4 tilastoja, kuten avoimia teht\u00e4vi\u00e4 ja kontribuutioita.</p> </li> <li> <p>Mukautettavat hallintapaneelit: Luo visuaalisia esityksi\u00e4 projektin mittareista, kuten palkkikaavioita ja donitsikaavioita, ja hahmota projektin eteneminen yhdell\u00e4 silm\u00e4yksell\u00e4.</p> </li> <li> <p>API-k\u00e4ytt\u00f6: K\u00e4yt\u00e4 REST APIa hakeaksesi tarvittavia projekti- ja tuntitietoja.</p> </li> </ul>"},{"location":"#teknologiat","title":"Teknologiat","text":"<ul> <li> <p>Python &amp; Streamlit: RepoRouskun ydin on kehitetty Pythonilla ja Streamlitill\u00e4 interaktiivisen ja selke\u00e4n verkkok\u00e4ytt\u00f6liittym\u00e4n luomiseksi.</p> </li> <li> <p>Docker: Mikropalvelu on kontitettu Dockerilla, mik\u00e4 mahdollistaa helpon k\u00e4ytt\u00f6\u00f6noton ja skaalautuvuuden.</p> </li> <li> <p>GitLab CI/CD: Sovelluksen automatisoitu testaus tapahtuu GitLabin CI/CD-putkien avulla.</p> </li> </ul>"},{"location":"#aloitus","title":"Aloitus","text":"<p>Voit aloittaa RepoRouskun k\u00e4yt\u00f6n seuraavilla ohjeilla:</p> <p>Kloonaa repositorio: Kloonaa RepoRousku-repositorio paikalliseen ymp\u00e4rist\u00f6\u00f6si. <pre><code>git clone https://gitlab.com/your-repo/repo-rouska.git\n</code></pre></p> <p>K\u00e4ynnist\u00e4 sovellus: K\u00e4yt\u00e4 Dockeria RepoRousku-kontin rakentamiseen ja ajamiseen. <pre><code>docker-compose up --build\n</code></pre></p>"},{"location":"#riippuvuudet","title":"Riippuvuudet","text":"<p>Erikseen asennettavat kirjastot on koottu erilliseen requirements.txt-tiedostoon. Kirjastot asennetaan Docker-kontin pystytyksen yhteydess\u00e4 automaattisesti.</p>"},{"location":"#dokumentaation-yleiskatsaus","title":"Dokumentaation yleiskatsaus","text":"<ul> <li>K\u00e4ytt\u00f6ohje: Yksityiskohtaiset ohjeet RepoRouskun k\u00e4ytt\u00e4miseen, mukaan lukien ominaisuuksien kuvaukset ja k\u00e4ytt\u00f6liittym\u00e4n toiminnot.</li> <li> <p>Moduulit ja API-dokumentaatio: Kattava sepostus RepoRouskussa k\u00e4ytetyist\u00e4 funktioista ja moduuleista, sis\u00e4lt\u00e4en automaattisesti generoituja dokumentaatioita.</p> </li> <li> <p>Konfiguraatio: Ohjeet mikropalvelun konfigurointiin, mukaan lukien Dockerin ja CI/CD asetukset.</p> </li> </ul>"},{"location":"#osallistuminen","title":"Osallistuminen","text":"<p>Otamme mielell\u00e4mme vastaan kontribuutioita! Jos haluat osallistua RepoRouskun kehitt\u00e4miseen, voit l\u00e4hett\u00e4\u00e4 pull requestin. Varmistathan ett\u00e4 muutoksesi on hyvin dokumentoitu ja testattu ennen l\u00e4hett\u00e4mist\u00e4. </p>"},{"location":"#lisenssi","title":"Lisenssi","text":"<p>RepoRousku on julkaistu MIT-lisenssill\u00e4. Ohjelmalla ei ole mit\u00e4\u00e4n takuuta eik\u00e4 PalikkaPalvelut vastaa ohjelman virheist\u00e4 johtuneista seurauksista.</p>"},{"location":"configuration/","title":"Konfiguraatio","text":""},{"location":"configuration/#yleiskuvaus","title":"Yleiskuvaus","text":"<p>T\u00e4m\u00e4 konfiguraatiodokumentti auttaa ymm\u00e4rt\u00e4m\u00e4\u00e4n RepoRouskun k\u00e4ytt\u00e4m\u00e4t konfiguraatiot, kuten Dockerin, Docker Composen ja GitLab CI/CD -putken asetukset. N\u00e4iden konfiguraatioiden avulla RepoRousku saadaan helposti k\u00e4ytt\u00f6\u00f6n ja testaukset suoritetaan automaattisesti.</p>"},{"location":"configuration/#dockerfile-konfiguraatio","title":"Dockerfile-konfiguraatio","text":"<p>Dockerfile</p> <p>RepoRousku on kontitettu k\u00e4ytt\u00e4en seuraavaa Dockerfile\u00e4, joka m\u00e4\u00e4rittelee ymp\u00e4rist\u00f6n, jossa sovellus suoritetaan.</p> <pre><code># Virallinen Python 3.9 -image\nFROM python:3.9-slim\n\n# Aseta ty\u00f6hakemisto\nWORKDIR /app\n\n# Kopioi requirements.txt juurikansiosta konttiin\nCOPY requirements.txt .\n\n# Asenna riippuvuudet\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Kopioi kaikki tiedostot src-kansiosta konttiin\nCOPY src /app/src\n\n# Aseta oletuskomento, joka suorittaa Streamlit-sovelluksen\nCMD [\"streamlit\", \"run\", \"src/app.py\", \"--server.port=8501\", \"--server.enableCORS=false\"]\n</code></pre> <p>Selitys:</p> <ul> <li> <p>Base Image: Dockerfile k\u00e4ytt\u00e4\u00e4 python:3.9-slim-peruskuvaa, joka on kevyempi versio Python-kuvasta.</p> </li> <li> <p>WORKDIR: Asettaa ty\u00f6skentelyhakemistoksi /app.</p> </li> <li> <p>COPY ja RUN: Kopioi riippuvuustiedoston ja asentaa sovelluksen vaatimat riippuvuudet.</p> </li> <li> <p>CMD: Asettaa oletuskomennoksi Streamlit-sovelluksen suorittamisen portissa 8501.</p> </li> </ul>"},{"location":"configuration/#docker-compose-konfiguraatio","title":"Docker Compose -konfiguraatio","text":"<p>docker-compose.yml</p> <p>Docker Compose -tiedosto mahdollistaa sovelluksen suorittamisen Dockerilla yksinkertaisemmin m\u00e4\u00e4rittelem\u00e4ll\u00e4, miten kontit k\u00e4ynnistet\u00e4\u00e4n ja mitk\u00e4 ymp\u00e4rist\u00f6muuttujat tarvitaan.</p> <pre><code>services:\n  palikka:\n    build:\n      context: .\n      dockerfile: Dockerfile \n    ports:\n      - \"8501:8501\"\n    environment:\n      GITLAB_TOKEN: \"${GITLAB_TOKEN}\"\n</code></pre> <p>Selitys:</p> <ul> <li> <p>services: M\u00e4\u00e4rittelee palvelun nimelt\u00e4 <code>palikka</code>, joka rakentuu projektin Dockerfilen avulla.</p> </li> <li> <p>ports: Kartoitus portista 8501, jotta Streamlit-sovellus on saatavilla.</p> </li> <li> <p>environment: Ymp\u00e4rist\u00f6muuttuja GITLAB_TOKEN m\u00e4\u00e4ritell\u00e4\u00e4n, jotta sovellus voi k\u00e4ytt\u00e4\u00e4 GitLabin APIa.</p> </li> </ul>"},{"location":"modules_api_reference/","title":"RepoRouskun Moduulit ja API-dokumentaatio","text":"<p>T\u00e4ss\u00e4 dokumentaatiossa kuvataan RepoRouskun Python-koodin eri moduulien toiminnot ja funktiot.</p>"},{"location":"modules_api_reference/#projektin-tietojen-avaus-sivu","title":"Projektin tietojen avaus -sivu","text":""},{"location":"modules_api_reference/#src.app_pages.gitlab_link.gitlab_link_page","title":"<code>gitlab_link_page()</code>","text":"<p>Sivu, joka avaa projetin GitLab-repositorion sivun</p> Source code in <code>src\\app_pages\\gitlab_link.py</code> <pre><code>def gitlab_link_page():\n    \"\"\"\n    Sivu, joka avaa projetin GitLab-repositorion sivun\n    \"\"\"\n    if cl.in_docker():\n        st.write(st.session_state[proj_data].get_project_url())\n    else:\n        webbrowser.open(st.session_state[proj_data].get_project_url())\n        st.switch_page(\"app_pages/project.py\")\n</code></pre>"},{"location":"modules_api_reference/#kayttajat-sivu","title":"K\u00e4ytt\u00e4j\u00e4t -sivu","text":"<p>Dokumentaatio <code>members.py</code> -moduulista, joka sis\u00e4lt\u00e4\u00e4 funktiot projektiryhm\u00e4n j\u00e4senten tietojen k\u00e4sittelyyn.</p>"},{"location":"modules_api_reference/#src.app_pages.members.member_page","title":"<code>member_page()</code>","text":"<p>Sivu projektiryhm\u00e4n j\u00e4seten statistiikan tarkasteluun</p> Source code in <code>src\\app_pages\\members.py</code> <pre><code>def member_page():\n    \"\"\"\n    Sivu projektiryhm\u00e4n j\u00e4seten statistiikan tarkasteluun\n    \"\"\"\n    cl.make_team_member_selector(st.session_state[proj_data].get_assignees())\n</code></pre>"},{"location":"modules_api_reference/#projektin-tiedot-sivu","title":"Projektin tiedot -sivu","text":"<p>Dokumentaatio <code>project.py</code> -moduulista, joka n\u00e4ytt\u00e4\u00e4 projektin keskeiset tiedot ja visualisoi ne k\u00e4ytt\u00e4j\u00e4lleen.</p>"},{"location":"modules_api_reference/#src.app_pages.project.project_page","title":"<code>project_page()</code>","text":"<p>Sivulla esitet\u00e4\u00e4n projektin keskeisimm\u00e4t tiedot</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def project_page():\n    \"\"\"\n    Sivulla esitet\u00e4\u00e4n projektin keskeisimm\u00e4t tiedot\n    \"\"\"\n    col1, col2, col3 = st.columns([3, 0.5, 9])\n\n    with col1:\n\n        # Donitsit\n        st.markdown(f'#### {completion_status}')\n        col1_1, col1_2 = col1.columns([1, 1])\n        with col1_1:\n            st.write(milestones)\n            milestone_donut = cl.make_donut(st.session_state[proj_data].get_readiness_ml(), milestones, 'orange')\n            st.altair_chart(milestone_donut)\n        with col1_2:\n            st.write(issues)\n            issue_donut = cl.make_donut(st.session_state[proj_data].get_readiness_issues(), issues, 'orange')\n            st.altair_chart(issue_donut)\n\n    with col1:\n        # Mittarit\n        st.write(\"\")\n        st.markdown(f'#### {project_metrics}')\n        st.write(\"\")\n        col1_1, col1_2 = col1.columns([1, 1])\n        with col1_1:\n            st.metric(milestones, st.session_state[proj_data].count_milestones())\n            st.write(\"\")\n            if cl.clockify_available():\n                st.metric(work_hours, 125)\n            else:\n                st.metric(branches, st.session_state[proj_data].count_branches())\n        with col1_2:\n            st.metric(issues, len(st.session_state[proj_data].get_issues()))\n            st.write(\"\")\n            st.metric(opened_merge_requests, st.session_state[proj_data].count_open_merge_requests())\n\n        # Expanderit\n        st.write(\"\")\n        st.write(\"\")\n        desc = st.session_state[proj_data].get_description()\n        if desc:\n            with st.expander(description):\n                st.write(desc)\n\n        with st.expander(info):\n            space = st.session_state[proj_data].get_namespace_name()\n            st.write(f'''\n                {creation_date}: {st.session_state[proj_data].get_creation_date()}\\n\n                {update_date}: {st.session_state[proj_data].get_update_date()}\\n\n                {namespace}: {space if space else \"-\"}\\n\n                {visibility}: {st.session_state[proj_data].get_visibility()}\\n\n            ''')\n\n    with col3:\n        # Projektiryhm\u00e4\n        members = cl.make_team_member_selector(st.session_state[proj_data].get_assignees())\n\n        # V\u00e4lilehdet palkkikaavioon\n        tabs = [closed_issues, commits]\n        if cl.clockify_available():\n            tabs.append(work_hours)\n\n        tab_objects_b = st.tabs(tabs)\n        tab_b1, tab_b2 = tab_objects_b[:2]\n        if cl.clockify_available():\n            tab_b3 = tab_objects_b[2]\n\n        # Palkkikaaviot\n        with tab_b1:\n            data, x_field, y_field, color_field = st.session_state[proj_data].get_data_for_closed_issues_bar_chart(members)\n            st.bar_chart(data, x=x_field, y=y_field, color=color_field, horizontal=True)\n        with tab_b2:\n            data, x_field, y_field, color_field = st.session_state[proj_data].get_data_for_commits_bar_chart(members)\n            st.bar_chart(data, x=x_field, y=y_field, color=color_field, horizontal=True)\n\n        if cl.clockify_available():\n            with tab_b3:\n                pass # TODO: Clockify\n\n        # V\u00e4lilehdet viivakaavioon\n        tab_objects_l = st.tabs(tabs)\n        tab_l1, tab_l2 = tab_objects_l[:2]\n        if cl.clockify_available():\n            tab_l3 = tab_objects_l[2]\n\n        # Viivakaaviot\n        with tab_l1:\n            data = st.session_state[proj_data].get_data_for_closed_issues_line_chart(members)\n            st.line_chart(data)\n        with tab_l2:\n            data, x_field, y_field, color_field = st.session_state[proj_data].get_data_for_commits_line_chart(members)\n            st.line_chart(data, x=x_field, y=y_field, color=color_field)\n\n        if cl.clockify_available():\n            with tab_l3:\n                pass # TODO: Clockify\n</code></pre>"},{"location":"modules_api_reference/#aloitussivu","title":"Aloitussivu","text":"<p>Dokumentaatio <code>start.py</code> -moduulista, joka k\u00e4sittelee projektin aloitussivun ja tokenien sy\u00f6t\u00f6n.</p>"},{"location":"modules_api_reference/#src.app_pages.start.get_project_data","title":"<code>get_project_data(gitlab_url, gitlab_token)</code>","text":"<p>Haetaan data annetusta projektista</p> Source code in <code>src\\app_pages\\start.py</code> <pre><code>def get_project_data(gitlab_url, gitlab_token):\n    \"\"\"\n    Haetaan data annetusta projektista\n    \"\"\"\n    if gitlab_url.endswith('/'):\n        gitlab_url = gitlab_url[:-1]\n\n    gitlab_proj = ProjectData(gitlab_url, gitlab_token)\n    if gitlab_proj and gitlab_proj.get_id():\n        st.session_state[proj_data] = gitlab_proj\n        return True\n    else:\n        #st.session_state[proj_data] = None # Kommentoitu, jotta aktiivista projektia ei vaihdeta, jos uusi url ei ole validi\n        return False\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.start.start_page","title":"<code>start_page()</code>","text":"<p>Sivu sis\u00e4lt\u00e4\u00e4 sy\u00f6tt\u00f6kent\u00e4t GitLabin ja Clockifyn access tokenien sek\u00e4 analysoitavan GitLab-projektin url-osoitteen m\u00e4\u00e4ritt\u00e4miseen</p> Source code in <code>src\\app_pages\\start.py</code> <pre><code>def start_page():\n    \"\"\"\n    Sivu sis\u00e4lt\u00e4\u00e4 sy\u00f6tt\u00f6kent\u00e4t GitLabin ja Clockifyn access tokenien sek\u00e4 analysoitavan GitLab-projektin url-osoitteen m\u00e4\u00e4ritt\u00e4miseen\n    \"\"\"\n\n    col1, col2 = st.columns([1, 5])\n    with col2:\n        if os.path.exists(\"/.dockerenv\"):\n            image_path = \"src/images/logo.png\"\n        else:\n            image_path = \"images/logo.png\"\n\n        st.image(image_path, width=500)\n\n    col1, col2, col3 = st.columns([1, 2, 1])\n\n    with col2:\n        load_dotenv()\n        env_gitlab_token = os.getenv(gitlab_token,\"\")\n        env_clockify_token = os.getenv(clockify_token,\"\")\n\n        gitlab_token_value = st.text_input(text_gitlab_token, value = env_gitlab_token, type = \"password\", help = help_required)\n        clockify_token_value = st.text_input(text_clockify_token, value = env_clockify_token, type = \"password\", help = help_optional)\n        if st.button(save, help = save_help):\n            if gitlab_token_value or clockify_token_value:\n                # Poistetaan tiedosto, jos se on olemassa\n                if os.path.exists(\".env\"):\n                    os.remove(\".env\")\n                # Arvot tiedostoon\n                with open(\".env\", \"w\") as f:\n                    if gitlab_token_value:\n                        f.write(f\"{gitlab_token}={gitlab_token_value}\\n\")\n                    if clockify_token_value:\n                        f.write(f\"{clockify_token}={clockify_token_value}\\n\")\n            else:\n                st.error(missing_token_values, icon=\"\u2757\")\n\n        st.write(\"\")\n        st.write(\"\")\n\n        act_proj_url = \"https://\"\n        if st.session_state[proj_data]:\n            act_proj_url = st.session_state[proj_data].get_project_url()\n\n        gitlab_url = st.text_input(repo_address, help = help_repo_address, value = act_proj_url)\n\n        # Painettu Rouskuta-painiketta tai vaihdetaan projektia enteri\u00e4 painamalla\n        if st.button(crunch, help = help_crunch) or \\\n           (gitlab_url and st.session_state[proj_data] and gitlab_url != st.session_state[proj_data].get_project_url()):\n            if not gitlab_url:\n                st.error(missing_url, icon=\"\u2757\")\n            elif not gitlab_token_value:\n                st.error(missing_g_token, icon=\"\u2757\")\n            elif not cl.validate_url(gitlab_url):\n                st.error(invalid_url, icon=\"\u2757\")\n            else:                \n                with st.spinner(fetching_data):\n                    # TODO: Clockify-datan haku\n                    if get_project_data(gitlab_url, gitlab_token_value):\n                        st.switch_page(\"app_pages/project.py\")\n                    else:\n                        st.error(error_msg, icon=\"\u2757\")\n</code></pre>"},{"location":"modules_api_reference/#komponentit","title":"Komponentit","text":"<p>Dokumentaatio <code>components.py</code> -moduulista, joka sis\u00e4lt\u00e4\u00e4 useita erilaisia komponentteja, kuten sivun otsikon ja graafisten esitysten luomisen, joita k\u00e4ytet\u00e4\u00e4n useissa eri n\u00e4kymiss\u00e4.</p>"},{"location":"modules_api_reference/#src.libraries.components.clockify_available","title":"<code>clockify_available()</code>","text":"<p>Palauttaa True, jos Clockifyn tiedot saatavilla TODO: Toteuta funktio</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def clockify_available():\n    \"\"\"\n    Palauttaa True, jos Clockifyn tiedot saatavilla\n    TODO: Toteuta funktio\n    \"\"\"\n    return False\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.in_docker","title":"<code>in_docker()</code>","text":"<p>Palauttaa True, jos ohjelmaa ajetaan Docker-kontissa</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def in_docker():\n    \"\"\"\n    Palauttaa True, jos ohjelmaa ajetaan Docker-kontissa\n    \"\"\"\n    return os.path.exists(\"/.dockerenv\")\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.make_donut","title":"<code>make_donut(input_response, input_text, input_color)</code>","text":"<p>Donitsikaavio Koodin l\u00e4hde: https://github.com/dataprofessor/population-dashboard/blob/master/streamlit_app.py</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def make_donut(input_response, input_text, input_color):\n    \"\"\"\n    Donitsikaavio\n    Koodin l\u00e4hde: https://github.com/dataprofessor/population-dashboard/blob/master/streamlit_app.py\n    \"\"\"\n    if input_color == 'blue':\n        chart_color = ['#29b5e8', '#155F7A']\n    if input_color == 'green':\n        chart_color = ['#27AE60', '#12783D']\n    if input_color == 'orange':\n        chart_color = ['#F49E25', '#FAEBC8'] # RepoRousku\n    if input_color == 'red':\n        chart_color = ['#E74C3C', '#781F16']\n\n    source = pd.DataFrame({\n        \"Topic\": ['', input_text],\n        \"% value\": [100-input_response, input_response]\n    })\n    source_bg = pd.DataFrame({\n        \"Topic\": ['', input_text],\n        \"% value\": [100, 0]\n    })\n\n    plot = alt.Chart(source).mark_arc(innerRadius=45, cornerRadius=25).encode(\n        theta=\"% value\",\n        color= alt.Color(\"Topic:N\",\n                        scale=alt.Scale(\n                            #domain=['A', 'B'],\n                            domain=[input_text, ''],\n                            # range=['#29b5e8', '#155F7A']),  # 31333F\n                            range=chart_color),\n                        legend=None),\n    ).properties(width=130, height=130)\n\n    text = plot.mark_text(align='center', color=\"#29b5e8\", font=\"Lato\", fontSize=32, fontWeight=700, fontStyle=\"italic\").encode(text=alt.value(f'{input_response} %'))\n    plot_bg = alt.Chart(source_bg).mark_arc(innerRadius=45, cornerRadius=20).encode(\n        theta=\"% value\",\n        color= alt.Color(\"Topic:N\",\n                        scale=alt.Scale(\n                            # domain=['A', 'B'],\n                            domain=[input_text, ''],\n                            range=chart_color),  # 31333F\n                        legend=None),\n    ).properties(width=130, height=130)\n    return plot_bg + plot + text\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.make_page_title","title":"<code>make_page_title(title)</code>","text":"<p>Sivun otsikko alleviivauksella</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def make_page_title(title):\n    \"\"\"\n    Sivun otsikko alleviivauksella\n    \"\"\"\n    # Otsikko\n    st.markdown(\n        f'&lt;h2 style=\"margin-top: 0px; margin-bottom: 5px; padding-top: 0px; color: #FAEBC8\"&gt;{title}&lt;/h2&gt;',\n        unsafe_allow_html=True\n    )\n    # Viiva\n    st.markdown(\n        \"&lt;hr style='margin-top: 0px; margin-bottom: 0px; border: 1px solid #F49E25;'&gt;\",\n        unsafe_allow_html=True\n    )\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.make_start_page_button","title":"<code>make_start_page_button()</code>","text":"<p>Kehoite ja painike projektin valintaan</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def make_start_page_button():\n    \"\"\"\n    Kehoite ja painike projektin valintaan\n    \"\"\"\n    st.info(info_specify_proj, icon=\"\u2139\ufe0f\")\n    if st.button(specify_proj):\n        st.switch_page('app_pages/start.py')\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.make_team_member_selector","title":"<code>make_team_member_selector(member_list)</code>","text":"<p>Projektiryhm\u00e4n j\u00e4senten listaus ja valinta tarkasteluun</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def make_team_member_selector(member_list):\n    \"\"\"\n    Projektiryhm\u00e4n j\u00e4senten listaus ja valinta tarkasteluun\n    \"\"\"\n\n    st.markdown(\n        '''\n        &lt;style&gt;\n        .css-1lcbmhc { margin-top: -16px; }\n        &lt;/style&gt;\n        ''',\n        unsafe_allow_html=True\n    )\n\n    selected = st.multiselect(\n        members,\n        member_list,\n        member_list,\n        help = help_project_member)\n\n    return selected\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.validate_url","title":"<code>validate_url(url)</code>","text":"<p>Tarkastaa, onko annettu url validi</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def validate_url(url):\n    \"\"\"\n    Tarkastaa, onko annettu url validi\n    \"\"\"\n    if not url.startswith(\"https://\") or url == \"https://\":\n        return False\n\n    try:\n        response = requests.get(url)\n        try:\n            response.raise_for_status()\n            return True\n        except requests.exceptions.HTTPError:\n            return False\n    except requests.exceptions.ConnectionError:\n        return False\n</code></pre>"},{"location":"modules_api_reference/#main-sovellus","title":"Main -sovellus","text":"<p>Dokumentaatio <code>app.py</code> -moduulista, joka sis\u00e4lt\u00e4\u00e4 sovelluksen p\u00e4\u00e4toiminnot ja navigaation.</p>"},{"location":"modules_api_reference/#src.app.create_navigation_panel","title":"<code>create_navigation_panel()</code>","text":"<p>Luo navigointivalikon sivustorakenteesta</p> Source code in <code>src\\app.py</code> <pre><code>def create_navigation_panel():\n    \"\"\"\n    Luo navigointivalikon sivustorakenteesta\n    \"\"\"\n    # Navigointivalikko\n    app_pages = {\n        connections: [\n            st.Page(\"app_pages/start.py\", title=change_project, icon = \"\ud83d\udcc1\", default=True),\n        ],\n        reports: [\n            st.Page(\"app_pages/project.py\", title=project, icon = \"\ud83d\udcca\"),\n            st.Page(\"app_pages/members.py\", title=member, icon = \"\ud83d\udc64\")\n        ],\n    }\n\n    if not cl.in_docker():\n        app_pages[connections].append(st.Page(\"app_pages/gitlab_link.py\", title=open_gitlab, icon=\"\ud83d\udd17\"))\n\n    pg = st.navigation(app_pages)\n    pg.run()\n</code></pre>"},{"location":"modules_api_reference/#src.app.main","title":"<code>main()</code>","text":"<p>Sovelluksen p\u00e4\u00e4ohjelma</p> Source code in <code>src\\app.py</code> <pre><code>def main():\n    \"\"\"\n    Sovelluksen p\u00e4\u00e4ohjelma\n    \"\"\"\n    set_appearance()\n    create_navigation_panel()\n</code></pre>"},{"location":"modules_api_reference/#src.app.set_appearance","title":"<code>set_appearance()</code>","text":"<p>M\u00e4\u00e4ritt\u00e4\u00e4 sovelluksen ulkoasun</p> Source code in <code>src\\app.py</code> <pre><code>def set_appearance():\n    \"\"\"\n    M\u00e4\u00e4ritt\u00e4\u00e4 sovelluksen ulkoasun\n    \"\"\"\n    st.set_page_config(\n        page_title = app_title,\n        page_icon = \"\u2728\",\n        layout = 'wide',\n        initial_sidebar_state = \"collapsed\"\n    )\n</code></pre>"},{"location":"modules_api_reference/#api-testaus","title":"API-testaus","text":"<p>Dokumentaatio <code>api_tests.py</code> modulista.</p> <p>API-testit (PalikkaPalvelut)</p> <p>T\u00e4m\u00e4 moduuli sis\u00e4lt\u00e4\u00e4 API-testit GitLab-projektille. N\u00e4iss\u00e4 testeiss\u00e4 tarkastellaan erityisesti projektitietojen  hakua eri token-tilanteissa: toimivalla, virheellisell\u00e4 ja vanhentuneella tokenilla sek\u00e4 j\u00e4senyys- ja n\u00e4kyvyystilanteita.</p> <p>Huom: T\u00e4ss\u00e4 tiedostossa ei testata tapausta, jossa token puuttuu kokonaan. T\u00e4m\u00e4 johtuu siit\u00e4, ett\u00e4 sovelluksen  k\u00e4ytt\u00f6liittym\u00e4 (<code>start.py</code>) tarkistaa tokenin olemassaolon ennen API-kutsuja. Jos token puuttuu, sovellus  n\u00e4ytt\u00e4\u00e4 virheilmoituksen k\u00e4ytt\u00f6liittym\u00e4ss\u00e4 eik\u00e4 aloita projektitietojen hakua. T\u00e4m\u00e4n vuoksi puuttuvan tokenin  tapaus testataan k\u00e4ytt\u00f6liittym\u00e4n testauksen yhteydess\u00e4 eik\u00e4 osana API-testej\u00e4.</p>"},{"location":"modules_api_reference/#tests.api_tests.expired_project","title":"<code>expired_project()</code>","text":"<p>Testiprojekti vanhentuneella tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef expired_project():\n    \"\"\"Testiprojekti vanhentuneella tokenilla.\"\"\"\n    return ProjectData(own_project_url, expired_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.internal_project","title":"<code>internal_project()</code>","text":"<p>Testiprojekti sis\u00e4isell\u00e4 URL:lla ilman j\u00e4senyytt\u00e4.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef internal_project():\n    \"\"\"Testiprojekti sis\u00e4isell\u00e4 URL:lla ilman j\u00e4senyytt\u00e4.\"\"\"\n    return ProjectData(internal_project_url, valid_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.invalid_project","title":"<code>invalid_project()</code>","text":"<p>Testiprojekti virheellisell\u00e4 tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef invalid_project():\n    \"\"\"Testiprojekti virheellisell\u00e4 tokenilla.\"\"\"\n    return ProjectData(own_project_url, invalid_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.private_project_no_access","title":"<code>private_project_no_access()</code>","text":"<p>Testiprojekti yksityisell\u00e4 URL:lla ilman j\u00e4senyytt\u00e4.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef private_project_no_access():\n    \"\"\"Testiprojekti yksityisell\u00e4 URL:lla ilman j\u00e4senyytt\u00e4.\"\"\"\n    return ProjectData(private_project_url, valid_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.public_project","title":"<code>public_project()</code>","text":"<p>Testiprojekti julkisella URL:lla ilman j\u00e4senyytt\u00e4.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef public_project():\n    \"\"\"Testiprojekti julkisella URL:lla ilman j\u00e4senyytt\u00e4.\"\"\"\n    return ProjectData(public_project_url, valid_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_internal_project_no_access","title":"<code>test_internal_project_no_access(internal_project)</code>","text":"<p>Testataan sis\u00e4isen projektin hakua ilman j\u00e4senyytt\u00e4.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_internal_project_no_access(internal_project):\n    \"\"\"Testataan sis\u00e4isen projektin hakua ilman j\u00e4senyytt\u00e4.\"\"\"\n    print(\"Testataan sis\u00e4isen projektin hakua ilman j\u00e4senyytt\u00e4\")\n    meta_data = internal_project.get_project_meta_data()\n    assert meta_data is not None, \"Sis\u00e4isen projektin tietojen haku pit\u00e4isi onnistua ilman j\u00e4senyytt\u00e4\"\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_private_project_no_access","title":"<code>test_private_project_no_access(private_project_no_access)</code>","text":"<p>Testataan yksityisen projektin hakua ilman j\u00e4senyytt\u00e4.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_private_project_no_access(private_project_no_access):\n    \"\"\"Testataan yksityisen projektin hakua ilman j\u00e4senyytt\u00e4.\"\"\"\n    print(\"Testataan yksityisen projektin hakua ilman j\u00e4senyytt\u00e4\")\n    meta_data = private_project_no_access.get_project_meta_data()\n    assert meta_data is None, \"Yksityisen projektin tietojen haku pit\u00e4isi ep\u00e4onnistua ilman j\u00e4senyytt\u00e4\"\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_project_meta_data_with_expired_token","title":"<code>test_project_meta_data_with_expired_token(expired_project)</code>","text":"<p>Testataan projektitietojen hakua vanhentuneella tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_project_meta_data_with_expired_token(expired_project):\n    \"\"\"Testataan projektitietojen hakua vanhentuneella tokenilla.\"\"\"\n    print(\"Testataan projektitietojen hakua vanhentuneella tokenilla\")\n    meta_data = expired_project.get_project_meta_data()\n    assert meta_data is None\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_project_meta_data_with_invalid_token","title":"<code>test_project_meta_data_with_invalid_token(invalid_project)</code>","text":"<p>Testataan projektitietojen hakua virheellisell\u00e4 tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_project_meta_data_with_invalid_token(invalid_project):\n    \"\"\"Testataan projektitietojen hakua virheellisell\u00e4 tokenilla.\"\"\"\n    print(\"Testataan projektitietojen hakua virheellisell\u00e4 tokenilla\")\n    meta_data = invalid_project.get_project_meta_data()\n    assert meta_data is None\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_project_meta_data_with_valid_token","title":"<code>test_project_meta_data_with_valid_token(valid_project)</code>","text":"<p>Testataan projektitietojen hakua oikealla tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_project_meta_data_with_valid_token(valid_project):\n    \"\"\"Testataan projektitietojen hakua oikealla tokenilla.\"\"\"\n    print(\"Testataan projektitietojen hakua oikealla tokenilla\")\n    meta_data = valid_project.get_project_meta_data()\n    assert meta_data is not None\n    assert isinstance(meta_data, dict)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_public_project_no_access","title":"<code>test_public_project_no_access(public_project)</code>","text":"<p>Testataan julkisen projektin hakua ilman j\u00e4senyytt\u00e4.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_public_project_no_access(public_project):\n    \"\"\"Testataan julkisen projektin hakua ilman j\u00e4senyytt\u00e4.\"\"\"\n    print(\"Testataan julkisen projektin hakua ilman j\u00e4senyytt\u00e4\")\n    meta_data = public_project.get_project_meta_data()\n    assert meta_data is not None, \"Julkisen projektin tietojen haku pit\u00e4isi onnistua ilman j\u00e4senyytt\u00e4\"\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.valid_project","title":"<code>valid_project()</code>","text":"<p>Testiprojekti oikealla tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef valid_project():\n    \"\"\"Testiprojekti oikealla tokenilla.\"\"\"\n    return ProjectData(own_project_url, valid_token)\n</code></pre>"},{"location":"modules_api_reference/#yksikkotestaus","title":"Yksikk\u00f6testaus","text":"<p>Dokumentaatio <code>unit_tests.py</code> modulista.</p> <p>Yksikk\u00f6testit (PalikkaPalvelut)</p> <p>T\u00e4m\u00e4 moduuli sis\u00e4lt\u00e4\u00e4 yksikk\u00f6testej\u00e4 ProjectData-luokalle, joka hakee projektin tietoja GitLabista. Testit kattavat keskeiset tiedot, kuten projektin metadata, milestonet, issuet  ja commitit. Testit on toteutettu pytestin avulla, ja k\u00e4ytett\u00e4v\u00e4 data on mock-datalla simuloitu.</p> <p>Testin lopussa on lis\u00e4testi, joka tarkistaa, ett\u00e4 HTML-raportti on luotu ja tulostaa  linkin sen avaamiseksi selaimessa.</p>"},{"location":"modules_api_reference/#tests.unit_tests.project","title":"<code>project()</code>","text":"<p>Alustaa ProjectData-olion mock-tiedolla ja palauttaa sen testien k\u00e4ytt\u00f6\u00f6n.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>@pytest.fixture\ndef project():\n    \"\"\"\n    Alustaa ProjectData-olion mock-tiedolla ja palauttaa sen testien k\u00e4ytt\u00f6\u00f6n.\n    \"\"\"\n    proj = ProjectData(\"https://gitlab.example.com/test_project\", \"test_token\")\n    proj.project_meta_data = test_meta_data\n    proj.project_data = {\n        \"milestones\": test_milestones_data,\n        \"issues\": test_issues_data,\n        \"commits\": test_commits_data,\n        \"branches\": test_branches_data,\n        \"merge_requests\": test_merge_requests_data\n    }\n    return proj\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_count_branches","title":"<code>test_count_branches(project)</code>","text":"<p>Testaa branchien lukum\u00e4\u00e4r\u00e4n hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_count_branches(project):\n    \"\"\"\n    Testaa branchien lukum\u00e4\u00e4r\u00e4n hakua.\n    \"\"\"\n    print(\"Testataan branchien lukum\u00e4\u00e4r\u00e4n hakemista\")\n    assert project.count_branches() == 3  # Tarkistetaan, ett\u00e4 haettu m\u00e4\u00e4r\u00e4 vastaa odotettua\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_count_open_merge_requests","title":"<code>test_count_open_merge_requests(project)</code>","text":"<p>Testaa avoimien merge requestien lukum\u00e4\u00e4r\u00e4n hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_count_open_merge_requests(project):\n    \"\"\"\n    Testaa avoimien merge requestien lukum\u00e4\u00e4r\u00e4n hakua.\n    \"\"\"\n    print(\"Testataan avoimien merge requestien lukum\u00e4\u00e4r\u00e4n hakemista\")\n    assert project.count_open_merge_requests() == 2  # Testataan avoimien MR:ien m\u00e4\u00e4r\u00e4\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_assignees","title":"<code>test_get_assignees(project)</code>","text":"<p>Testaa assignee-hakua ja varmistaa, ett\u00e4 duplikaatit poistetaan.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_assignees(project):\n    \"\"\"\n    Testaa assignee-hakua ja varmistaa, ett\u00e4 duplikaatit poistetaan.\n    \"\"\"\n    print(\"Testataan assignee-hakua ja duplikaattien poistoa\")\n    assignees = project.get_assignees()\n    assert isinstance(assignees, list)\n    assert len(assignees) == 2\n    assert \"User1\" in assignees and \"User2\" in assignees\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_commits","title":"<code>test_get_commits(project)</code>","text":"<p>Testaa commit-tietojen hakua ja tarkistaa author_name-kent\u00e4n oikeellisuuden.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_commits(project):\n    \"\"\"\n    Testaa commit-tietojen hakua ja tarkistaa author_name-kent\u00e4n oikeellisuuden.\n    \"\"\"\n    print(\"Testataan commit-tietojen hakemista\")\n    commits_df = project.get_commits()\n    assert isinstance(commits_df, pd.DataFrame)\n    assert len(commits_df) == 2\n    assert \"author_name\" in commits_df.columns\n    assert commits_df[\"author_name\"].iloc[0] == \"Dev1\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_creation_date","title":"<code>test_get_creation_date(project)</code>","text":"<p>Testaa projektin luontip\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_creation_date(project):\n    \"\"\"\n    Testaa projektin luontip\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.\n    \"\"\"\n    print(\"Testataan projektin luontip\u00e4iv\u00e4n hakemista\")\n    assert project.get_creation_date() == \"01.11.2024\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_description","title":"<code>test_get_description(project)</code>","text":"<p>Testaa projektin kuvauksen hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_description(project):\n    \"\"\"\n    Testaa projektin kuvauksen hakua.\n    \"\"\"\n    print(\"Testataan projektin kuvauksen hakemista\")\n    assert project.get_description() == \"T\u00e4m\u00e4 on testiprojekti.\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_id","title":"<code>test_get_id(project)</code>","text":"<p>Testaa projektin ID:n hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_id(project):\n    \"\"\"\n    Testaa projektin ID:n hakua.\n    \"\"\"\n    print(\"Testataan projektin ID:n hakemista\")\n    assert project.get_id() == 1234\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_issues","title":"<code>test_get_issues(project)</code>","text":"<p>Testaa issue-tietojen hakua ja tarkistaa issueiden tilan sek\u00e4 assignee-nimien oikeellisuuden.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_issues(project):\n    \"\"\"\n    Testaa issue-tietojen hakua ja tarkistaa issueiden tilan sek\u00e4 assignee-nimien oikeellisuuden.\n    \"\"\"\n    print(\"Testataan issue-tietojen hakemista\")\n    issues_df = project.get_issues()\n    assert isinstance(issues_df, pd.DataFrame)\n    assert len(issues_df) == 2\n    assert \"assignees\" in issues_df.columns\n    assert issues_df[\"state\"].iloc[0] == \"opened\"\n    assert issues_df[\"state\"].iloc[1] == \"closed\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_milestones","title":"<code>test_get_milestones(project)</code>","text":"<p>Testaa milestone-tietojen hakua ja status-kent\u00e4n oikeellisuutta jokaiselle tilalle: P\u00e4\u00e4ttynyt, Aktiivinen, Tuleva.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_milestones(project):\n    \"\"\"\n    Testaa milestone-tietojen hakua ja status-kent\u00e4n oikeellisuutta jokaiselle tilalle: P\u00e4\u00e4ttynyt, Aktiivinen, Tuleva.\n    \"\"\"\n    print(\"Testataan milestone-tietojen hakemista\")\n    milestones_df = project.get_milestones()\n    assert isinstance(milestones_df, pd.DataFrame)\n    assert len(milestones_df) == 3\n    assert \"status\" in milestones_df.columns\n\n    assert milestones_df[\"status\"].iloc[0] == \"P\u00e4\u00e4ttynyt\"\n    assert milestones_df[\"status\"].iloc[1] == \"Aktiivinen\"\n    assert milestones_df[\"status\"].iloc[2] == \"Tuleva\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_name","title":"<code>test_get_name(project)</code>","text":"<p>Testaa projektin nimen hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_name(project):\n    \"\"\"\n    Testaa projektin nimen hakua.\n    \"\"\"\n    print(\"Testataan projektin nimen hakemista\")\n    assert project.get_name() == \"PalikkaTestiProjekti\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_namespace_name","title":"<code>test_get_namespace_name(project)</code>","text":"<p>Testaa projektin namespace-nimen hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_namespace_name(project):\n    \"\"\"\n    Testaa projektin namespace-nimen hakua.\n    \"\"\"\n    print(\"Testataan projektin namespace-nimen hakemista\")\n    assert project.get_namespace_name() == \"PalikkaNamespace\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_update_date","title":"<code>test_get_update_date(project)</code>","text":"<p>Testaa projektin viimeisimm\u00e4n p\u00e4ivitysp\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_update_date(project):\n    \"\"\"\n    Testaa projektin viimeisimm\u00e4n p\u00e4ivitysp\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.\n    \"\"\"\n    print(\"Testataan projektin p\u00e4ivitysp\u00e4iv\u00e4n hakemista\")\n    assert project.get_update_date() == \"05.11.2024\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_visibility","title":"<code>test_get_visibility(project)</code>","text":"<p>Testaa projektin n\u00e4kyvyyden hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_visibility(project):\n    \"\"\"\n    Testaa projektin n\u00e4kyvyyden hakua.\n    \"\"\"\n    print(\"Testataan projektin n\u00e4kyvyyden hakemista\")\n    assert project.get_visibility() == \"private\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_report_exists","title":"<code>test_report_exists()</code>","text":"<p>Testaa, ett\u00e4 testiraportti on luotu ja tulostaa linkin raportin avaamiseksi selaimessa.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_report_exists():\n    \"\"\"\n    Testaa, ett\u00e4 testiraportti on luotu ja tulostaa linkin raportin avaamiseksi selaimessa.\n    \"\"\"\n    report_path = \"tests/reports/unit_test_report.html\"\n    assert os.path.isfile(report_path), \"Testiraporttia ei l\u00f6ytynyt!\"\n    print(f\"Avaa testiraportti selaimessa osoitteessa: http://localhost:8010/unit_test_report.html\")\n</code></pre>"},{"location":"usage/","title":"Reporouskun k\u00e4ytt\u00f6liittym\u00e4n k\u00e4ytt\u00f6ohjeet","text":""}]}
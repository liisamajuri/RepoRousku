{"config":{"lang":["fi"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tervehdys","text":""},{"location":"#tervetuloa-reporouskuun","title":"Tervetuloa RepoRouskuun!","text":"<p>RepoRousku on mikropalvelu, joka tarjoaa kattavan n\u00e4kym\u00e4n GitLab-repositorioprojektiin. T\u00e4m\u00e4 ohjelma on rakennettu Streamlitill\u00e4, Pythonilla ja sill\u00e4 noudetaan dataa GitLabista ja Clockifyst\u00e4 REST API -rajapintojen avulla. </p> <p>Olitpa projektitiimin j\u00e4sen tai opettaja, RepoRousku antaa sinulle hyv\u00e4n k\u00e4sityksen projektin tilasta visualisoiden kaiken tarvittavan k\u00e4ytt\u00e4j\u00e4yst\u00e4v\u00e4lliseen k\u00e4ytt\u00f6liittym\u00e4\u00e4n.</p>"},{"location":"#ominaisuudet","title":"Ominaisuudet","text":"<ul> <li> <p>GitLab &amp; Clockify integraatiot: Yhdist\u00e4 GitLabiin sek\u00e4 Clockifyihin ja hae projektitietoja, kuten issueiden lukum\u00e4\u00e4r\u00e4, projektitiimin j\u00e4senet ja heid\u00e4n projektiin k\u00e4ytt\u00e4m\u00e4ns\u00e4 aika. </p> </li> <li> <p>Tiimin j\u00e4senien tilastot: N\u00e4e ja analysoi tiimin j\u00e4seniin liittyvi\u00e4 tilastoja, kuten avoimia teht\u00e4vi\u00e4 ja tuntikertym\u00e4\u00e4.</p> </li> <li> <p>Mukautettavat hallintapaneelit: Luo visuaalisia esityksi\u00e4 projektin mittareista, kuten palkkikaavioita ja donitsikaavioita, ja hahmota projektin eteneminen yhdell\u00e4 silm\u00e4yksell\u00e4.</p> </li> <li> <p>API-k\u00e4ytt\u00f6: K\u00e4yt\u00e4 REST APIa hakeaksesi tarvittavia projekti- ja tuntitietoja.</p> </li> </ul>"},{"location":"#teknologiat","title":"Teknologiat","text":"<ul> <li> <p>Python &amp; Streamlit: RepoRouskun ydin on kehitetty Pythonilla ja Streamlitill\u00e4 interaktiivisen ja selke\u00e4n verkkok\u00e4ytt\u00f6liittym\u00e4n luomiseksi.</p> </li> <li> <p>Docker: Mikropalvelu on kontitettu Dockerilla, mik\u00e4 mahdollistaa helpon k\u00e4ytt\u00f6\u00f6noton ja skaalautuvuuden.</p> </li> <li> <p>GitLab CI/CD: Sovelluksen automatisoitu testaus tapahtuu GitLabin CI/CD-putkien avulla.</p> </li> </ul>"},{"location":"#aloitus","title":"Aloitus","text":"<p>Yksityiskohtaisemmat k\u00e4yt\u00f6n ohjeet l\u00f6yd\u00e4t t\u00e4\u00e4lt\u00e4</p> <p>Voit aloittaa RepoRouskun k\u00e4yt\u00f6n seuraavilla pikaohjeilla:</p> <p>Kloonaa repositorio: Kloonaa RepoRousku-repositorio paikalliseen ymp\u00e4rist\u00f6\u00f6si. <pre><code>git clone git@gitlab.dclabra.fi:projektiopinnot-4-digitaaliset-palvelut/palikkapalvelut.git\n</code></pre></p> <p>K\u00e4ynnist\u00e4 sovellus: K\u00e4yt\u00e4 Dockeria RepoRousku-kontin rakentamiseen ja ajamiseen. <pre><code>docker-compose up --build\n</code></pre></p>"},{"location":"#riippuvuudet","title":"Riippuvuudet","text":"<p>Erikseen asennettavat kirjastot on koottu erilliseen requirements.txt-tiedostoon. Kirjastot asennetaan Docker-kontin pystytyksen yhteydess\u00e4 automaattisesti.</p>"},{"location":"#dokumentaation-yleiskatsaus","title":"Dokumentaation yleiskatsaus","text":"<ul> <li>K\u00e4ytt\u00f6ohje: Yksityiskohtaiset ohjeet RepoRouskun k\u00e4ytt\u00e4miseen, mukaan lukien ominaisuuksien kuvaukset ja k\u00e4ytt\u00f6liittym\u00e4n toiminnot.</li> <li>Koodidokumentaatio: Kattava sepostus RepoRouskussa k\u00e4ytetyist\u00e4 funktioista ja moduuleista, sis\u00e4lt\u00e4en automaattisesti generoituja dokumentaatioita.</li> <li>Konfiguraatio: Ohjeet mikropalvelun konfigurointiin, mukaan lukien Dockerin ja CI/CD asetukset.</li> </ul>"},{"location":"#osallistuminen","title":"Osallistuminen","text":"<p>Otamme mielell\u00e4mme vastaan kontribuutioita! Jos haluat osallistua RepoRouskun kehitt\u00e4miseen, voit l\u00e4hett\u00e4\u00e4 pull requestin. Varmistathan ett\u00e4 muutoksesi on hyvin dokumentoitu ja testattu ennen l\u00e4hett\u00e4mist\u00e4. </p>"},{"location":"#lisenssi","title":"Lisenssi","text":"<p>RepoRousku on julkaistu MIT-lisenssill\u00e4. Ohjelmalla ei ole mit\u00e4\u00e4n takuuta eik\u00e4 PalikkaPalvelut vastaa ohjelman virheist\u00e4 johtuneista seurauksista.</p>"},{"location":"configuration/","title":"Konfiguraatio","text":""},{"location":"configuration/#yleiskuvaus","title":"Yleiskuvaus","text":"<p>T\u00e4m\u00e4 dokumentti esittelee RepoRouskun t\u00e4rkeimm\u00e4t konfiguraatiotiedostot, kuten: * Dockerfile * Docker Compose -konfiguraatio * GitLab CI/CD -putken m\u00e4\u00e4rittely * MkDocs-dokumentaation konfiguraatio</p> <p>N\u00e4iden konfiguraatioiden avulla sovellus voidaan asentaa, testata, k\u00e4ytt\u00e4\u00e4 ja dokumentoida tehokkaasti.</p>"},{"location":"configuration/#dockerfile","title":"Dockerfile","text":"<p>Dockerfile m\u00e4\u00e4ritt\u00e4\u00e4 ymp\u00e4rist\u00f6n, jossa RepoRousku-sovellus suoritetaan.</p> <pre><code># Python 3.9 -image\nFROM python:3.9-slim\n\n# Aseta ty\u00f6hakemisto\nWORKDIR /app\n\n# Kopioi riippuvuudet\nCOPY requirements.txt .\n\n# Asenna riippuvuudet\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Kopioi l\u00e4hdekoodi ja dokumentaatio\nCOPY src /app/src\nCOPY tests /app/tests\nCOPY api /app/api\nCOPY mkdocs.yml .\nCOPY docs /app/docs\n\n# Oletuskomento (API:n k\u00e4ynnistys)\nCMD [\"uvicorn\", \"api.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8088\"]\n</code></pre> <p>Selitys:</p> <ul> <li>Base image: Kevyt Python 3.9 -kuva (slim). Riippuvuuksien hallinta: Pip-asennus requirements.txt-tiedostosta. L\u00e4hdekoodi: Sis\u00e4lt\u00e4\u00e4 l\u00e4hdekoodin, testit, dokumentaation ja API:n. Oletuskomento: K\u00e4ynnist\u00e4\u00e4 API:n Uvicorn-palvelimella.</li> </ul>"},{"location":"configuration/#docker-compose-konfiguraatio","title":"Docker Compose -konfiguraatio","text":"<p>docker-compose.yml m\u00e4\u00e4ritt\u00e4\u00e4 sovelluksen eri palvelut.</p> <pre><code>services:\n  streamlit:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"8501:8501\"\n    environment:\n      GITLAB_TOKEN: \"${GITLAB_TOKEN}\"\n      PYTHONPATH: \"/app/src\"\n    volumes:\n      - ./tests/reports:/app/tests/reports\n    command: &gt;\n      sh -c \"\n      pip install -r requirements.txt &amp;&amp;\n      streamlit run src/app.py --server.port=8501 --server.enableCORS=false\"\n</code></pre> <p>Palvelut:</p> <ul> <li>streamlit: K\u00e4ynnist\u00e4\u00e4 RepoRouskun Streamlit-sovelluksen portissa 8501.</li> <li>reports: Tarjoaa testiraportit HTTP-palvelimella.</li> <li>docs: K\u00e4ynnist\u00e4\u00e4 MkDocs-dokumentaation palvelimella portissa 8502.</li> <li>api: K\u00e4ynnist\u00e4\u00e4 API:n Uvicorn-palvelimella portissa 8088.</li> </ul>"},{"location":"configuration/#gitlab-cicd","title":"GitLab CI/CD","text":"<p>GitLab CI/CD -putki sis\u00e4lt\u00e4\u00e4 nelj\u00e4 vaihetta:</p> <ol> <li>Lint</li> <li>Test</li> <li>Coverage</li> <li>Docs</li> </ol> <pre><code>stages:\n  - lint\n  - test\n  - coverage\n  - docs\n\nlint:\n  stage: lint\n  script:\n    - ruff check src -v\ntest:\n  stage: test\n  script:\n    - coverage run -m pytest -v\ncoverage:\n  stage: coverage\n  script:\n    - coverage report -m\n    - coverage html -d tests/reports/coverage_html\ndocs:\n  stage: docs\n  script:\n    - mkdocs build\n</code></pre> <p>Selitys: 1. Lint: Tarkistaa koodin laadun Ruffin avulla. 2. Test: Suorittaa yksikk\u00f6-, API- ja integraatiotestit Pytestill\u00e4. 3. Coverage: Generoi koodikattavuusraportin. 4. Docs: Rakentaa dokumentaation MkDocsilla.</p>"},{"location":"configuration/#mkdocs-konfiguraatio","title":"MkDocs-konfiguraatio","text":"<p>MkDocs luo staattisen sivuston sovelluksen dokumentaatiosta.</p> <pre><code>site_name: RepoRouskun koodidokumentaatio ja k\u00e4ytt\u00f6ohjeet\ntheme:\n  name: material\n  palette:\n    primary: black\n    accent: deep orange\nnav:\n  - Tervehdys: index.md\n  - K\u00e4ytt\u00f6ohjeet: usage.md\n  - Koodidokumentaatio: modules_api_reference.md\n  - Konfiguraatioista: configuration.md\nplugins:\n  - search\n  - mkdocstrings:\n      handlers:\n        python:\n          rendering:\n            show_root_toc_entry: false\n</code></pre> <p>Selitys: * Teema: Material Design (slate-v\u00e4rimaailma). * Navigaatio: Sivut esitet\u00e4\u00e4n j\u00e4rjestyksess\u00e4 nav-osassa. * Plugins: Hakutoiminnallisuus ja automaattisesti generoitu Python-koodidokumentaatio.</p>"},{"location":"modules_api_reference/","title":"RepoRouskun Moduulit ja API-dokumentaatio","text":"<p>T\u00e4ss\u00e4 dokumentaatiossa kuvataan RepoRouskun Python-koodin eri moduulien toiminnot ja funktiot.</p>"},{"location":"modules_api_reference/#aloitussivu","title":"Aloitussivu","text":"<p>Dokumentaatio <code>start.py</code> -moduulista, joka k\u00e4sittelee projektin aloitussivun ja tokenien sy\u00f6t\u00f6n.</p> <p>RepoRouskun etusivu, jonka avulla k\u00e4ytt\u00e4j\u00e4 m\u00e4\u00e4rittelee tarkasteltavan projektin ja tarvittavat p\u00e4\u00e4syoikeudet projektin dataan. K\u00e4ytt\u00e4j\u00e4n tulee antaa v\u00e4hint\u00e4\u00e4n projektin GitLab-repositorion URL ja Access Token. Jos k\u00e4ytt\u00e4j\u00e4 m\u00e4\u00e4ritt\u00e4\u00e4 lis\u00e4ksi  GitLab-projektiin liittyv\u00e4n Clockify-projektin  Access Tokenin, on sovelluksessa mahdollista tarkastella my\u00f6s  projektin ajank\u00e4ytt\u00f6\u00e4.</p>"},{"location":"modules_api_reference/#src.app_pages.start.fetch_clockify_data","title":"<code>fetch_clockify_data(clockify)</code>","text":"<p>Hakee Clockify-datan, projektin ty\u00f6tunnit ja tallentaa ne session_stateen.</p> <p>Parameters:</p> Name Type Description Default <code>clockify</code> <code>ClockiFy</code> <p>ClockiFy-olio.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Clockifyyn kirjatut ty\u00f6tunnit.</p> Source code in <code>src\\app_pages\\start.py</code> <pre><code>def fetch_clockify_data(clockify):\n    \"\"\"\n    Hakee Clockify-datan, projektin ty\u00f6tunnit ja tallentaa ne session_stateen.\n\n    Args:\n        clockify (ClockiFy): ClockiFy-olio.\n\n    Returns:\n        (DataFrame): Clockifyyn kirjatut ty\u00f6tunnit.\n    \"\"\"\n    if clockify:\n        try:\n            # Haetaan ty\u00f6tilat Clockify API:sta\n            workspaces = clockify.get_workspaces()\n            if not workspaces:\n                st.warning(\"Ei l\u00f6ytynyt ty\u00f6tiloja Clockifyst\u00e4.\")\n                return None\n            workspace_options = [ws[\"name\"] for ws in workspaces]\n            selected_workspace = st.selectbox(\"Valitse ty\u00f6tila\", workspace_options)\n            selected_workspace_id = next(ws[\"id\"] for ws in workspaces if ws[\"name\"] == selected_workspace)\n            clockify.workspace_id = selected_workspace_id  \n            projects = clockify.get_projects()\n            if projects:\n                project_options = [project[\"name\"] for project in projects]\n                selected_project = st.selectbox(\"Valitse projekti\", project_options)\n                selected_project_id = next(proj[\"id\"] for proj in projects if proj[\"name\"] == selected_project)\n                clockify.project_id = selected_project_id\n                all_user_hours = clockify.get_all_user_hours_df()\n                if not all_user_hours.empty:\n                    st.session_state[\"clockify_data\"] = all_user_hours\n                    st.session_state[clockify_workspace] = selected_workspace_id\n                    st.session_state[clockify_project] = selected_project_id\n                    st.success(\"Clockify-data haettu onnistuneesti!\")\n                    return all_user_hours\n                else:\n                    st.warning(\"Ei l\u00f6ytynyt ty\u00f6tunteja projektista.\")\n            else:\n                st.warning(\"Ei l\u00f6ytynyt projekteja valitusta ty\u00f6tilasta.\")\n                return None\n        except Exception as e:\n            st.error(f\"Virhe Clockify-datan hakemisessa: {str(e)}\", icon=\"\u2757\")\n            return None\n    else:\n        st.error(\"Clockify Token puuttuu!\", icon=\"\u2757\")\n        return None\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.start.fetch_sprint_and_tag_hours","title":"<code>fetch_sprint_and_tag_hours(clockify, gitlab_url, gitlab_token)</code>","text":"<p>Hakee ja tallentaa sprinteitt\u00e4in ja tageittain kertyneet ty\u00f6tunnit session_stateen.</p> <p>Parameters:</p> Name Type Description Default <code>clockify</code> <code>ClockiFy</code> <p>ClockiFy-olio.</p> required <code>gitlab_url</code> <code>str</code> <p>Projektin GitLab url.</p> required <code>gitlab_token</code> <code>str</code> <p>Projektin GitLabin Access Token</p> required Source code in <code>src\\app_pages\\start.py</code> <pre><code>def fetch_sprint_and_tag_hours(clockify, gitlab_url, gitlab_token):\n    \"\"\"\n    Hakee ja tallentaa sprinteitt\u00e4in ja tageittain kertyneet ty\u00f6tunnit session_stateen.\n\n    Args:\n        clockify (ClockiFy): ClockiFy-olio.\n        gitlab_url (str): Projektin GitLab url.\n        gitlab_token (str): Projektin GitLabin Access Token\n    \"\"\"\n    sprint_and_tag_hours_df = clockify.get_project_tag_and_sprint_hours(gitlab_url, gitlab_token)\n    if not sprint_and_tag_hours_df.empty: \n        st.session_state[\"sprint_and_tag_hours\"] = sprint_and_tag_hours_df\n    else:\n        st.warning(\"Sprinttien ja tagien ty\u00f6tunteja ei l\u00f6ytynyt.\")\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.start.fetch_sprint_hours","title":"<code>fetch_sprint_hours(clockify, gitlab_url, gitlab_token)</code>","text":"<p>Hakee ja tallentaa sprinteitt\u00e4in kertyneet ty\u00f6tunnit session_stateen.</p> <p>Parameters:</p> Name Type Description Default <code>clockify</code> <code>ClockiFy</code> <p>ClockiFy-olio.</p> required <code>gitlab_url</code> <code>str</code> <p>Projektin GitLab url.</p> required <code>gitlab_token</code> <code>str</code> <p>Projektin GitLabin Access Token.</p> required Source code in <code>src\\app_pages\\start.py</code> <pre><code>def fetch_sprint_hours(clockify, gitlab_url, gitlab_token):\n    \"\"\"\n    Hakee ja tallentaa sprinteitt\u00e4in kertyneet ty\u00f6tunnit session_stateen.\n\n    Args:\n        clockify (ClockiFy): ClockiFy-olio.\n        gitlab_url (str): Projektin GitLab url.\n        gitlab_token (str): Projektin GitLabin Access Token.\n    \"\"\"\n    sprint_hours_df_grouped = clockify.get_sprint_hours(gitlab_url, gitlab_token)\n    if not sprint_hours_df_grouped.empty:\n        st.session_state[\"sprint_hours_df_grouped\"] = sprint_hours_df_grouped\n    else:\n        st.warning(\"Sprinttien ty\u00f6tunteja ei l\u00f6ytynyt.\")\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.start.get_project_data","title":"<code>get_project_data(gitlab_url, gitlab_token)</code>","text":"<p>Hakee datan GitLab-projektista.</p> <p>Parameters:</p> Name Type Description Default <code>gitlab_url</code> <code>str</code> <p>Projektin GitLab url.</p> required <code>gitlab_token</code> <code>str</code> <p>GitLab Access Token.</p> required Source code in <code>src\\app_pages\\start.py</code> <pre><code>def get_project_data(gitlab_url, gitlab_token):\n    \"\"\"\n    Hakee datan GitLab-projektista.\n\n    Args:\n        gitlab_url (str): Projektin GitLab url.\n        gitlab_token (str): GitLab Access Token.\n    \"\"\"\n    if gitlab_url.endswith('/'):\n        gitlab_url = gitlab_url[:-1]\n\n    gitlab_proj = ProjectData(gitlab_url, gitlab_token)\n    if gitlab_proj and gitlab_proj.get_id():\n        st.session_state[proj_data] = gitlab_proj\n        return True\n    else:\n        #st.session_state[proj_data] = None # Kommentoitu, jotta aktiivista projektia ei vaihdeta, jos uusi url ei ole validi\n        return False\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.start.setup_clockify","title":"<code>setup_clockify(clockify_token)</code>","text":"<p>Asettaa Clockify-muuttujiin arvot.</p> <p>Parameters:</p> Name Type Description Default <code>clockify_token</code> <code>str</code> <p>Clockifyn Access Token.</p> required <p>Returns:</p> Type Description <code>ClockiFy</code> <p>Clockifyn tiedot sis\u00e4lt\u00e4v\u00e4 olio tai None.</p> Source code in <code>src\\app_pages\\start.py</code> <pre><code>def setup_clockify(clockify_token):\n    \"\"\"\n    Asettaa Clockify-muuttujiin arvot.\n\n    Args:\n        clockify_token (str): Clockifyn Access Token.\n\n    Returns:\n        (ClockiFy): Clockifyn tiedot sis\u00e4lt\u00e4v\u00e4 olio tai None.\n    \"\"\"\n    if clockify_token:\n        os.environ[\"CLOCKIFY_TOKEN\"] = clockify_token \n        clockify = ClockifyData(\"https://api.clockify.me/api/v1\")\n        return clockify\n    else:\n        st.error(\"Clockify Token puuttuu!\", icon=\"\u2757\")\n        return None\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.start.start_page","title":"<code>start_page()</code>","text":"<p>Moduulin p\u00e4\u00e4koodilohko, joka muodostaa sivun projektin GitLab-osoitteen ja tarvittavien Access Tokenien m\u00e4\u00e4rittelyyn.</p> Source code in <code>src\\app_pages\\start.py</code> <pre><code>def start_page():\n    \"\"\"\n    Moduulin p\u00e4\u00e4koodilohko, joka muodostaa sivun projektin GitLab-osoitteen ja tarvittavien Access Tokenien m\u00e4\u00e4rittelyyn.\n    \"\"\"\n    # Alustetaan session_state, jos proj_data puuttuu\n    if proj_data not in st.session_state:\n        st.session_state[proj_data] = None\n    if clockify_workspace not in st.session_state:\n        st.session_state[clockify_workspace] = None\n    if clockify_project not in st.session_state:\n        st.session_state[clockify_project] = None\n\n    # Otsikkorivi\n    col1, col2, col3 = st.columns([1, 1, 1])\n    with col2:\n        bc = cl.get_background_color()\n        if bc and bc == white_color:\n            image_path = Path(__file__).parent.parent / 'images' / 'title_light.png'\n        else:\n            image_path = Path(__file__).parent.parent / 'images' / 'title_dark.png'\n        st.image(str(image_path), width=500)\n\n    st.write(\"\")\n    st.write(\"\")\n\n    col1, col2, col3, col4 = st.columns([1, 2, 1, 1]) # col1 ja col4 marginaaleja\n\n    # Projektit\n    with col2:\n        act_proj_url = \"\"\n        if st.session_state[proj_data]:\n            act_proj_url = st.session_state[proj_data].get_project_url()\n\n        gitlab_url = st.text_input(repo_address, help = help_repo_address, value = act_proj_url, placeholder = \"https://\")\n\n\n    # Access tokenit\n    with col3:\n        env_gitlab_token, env_clockify_token = et.get_env_tokens()\n\n        placeholder_g = st.empty()\n        placeholder_c = st.empty()\n        gitlab_token_value = placeholder_g.text_input(text_gitlab_token, value=env_gitlab_token, type = \"password\", help = help_required, key = \"g1\")\n        clockify_token_value = placeholder_c.text_input(text_clockify_token, value = env_clockify_token, type = \"password\", help = help_optional, key = \"c1\")\n        #Linkki ohjeseen\n        st.markdown(\"[Katso Ohje](https://gitlab.dclabra.fi/wiki/MOpevPu-QrClH4_ouAV04A?view)\", unsafe_allow_html=True)\n\n    st.write(\"\")\n    st.write(\"\")\n    st.write(\"\")\n\n    if clockify_token_value:\n        with col2:\n            clockify = setup_clockify(clockify_token_value)\n            fetch_clockify_data(clockify)\n\n    # Painikkeet\n    col1, col2, col3, col4, col5 = st.columns([1, 1, 1, 1, 1])\n    with col2:\n        # Rouskuta-painike\n        if st.button(crunch, use_container_width = True, help = help_crunch):\n\n            # Jos k\u00e4ytt\u00e4j\u00e4 ei ole antanut access tokenia, otetaan se uudestaan ymp\u00e4rist\u00f6st\u00e4, jos mahdollista\n            if not gitlab_token_value and env_gitlab_token:\n                    gitlab_token_value = placeholder_g.text_input(text_gitlab_token, value=env_gitlab_token, type = \"password\", help = help_required, key = \"g2\")\n            if not clockify_token_value and env_clockify_token:\n                    clockify_token_value = placeholder_c.text_input(text_clockify_token, value=env_clockify_token, type = \"password\", help = help_optional, key = \"c2\")\n\n            # Tarkistetaan, ett\u00e4 tarvittavat sy\u00f6tteet on annettu\n            if not gitlab_url:\n                st.error(missing_url, icon=\"\u2757\")\n            elif not gitlab_token_value:\n                st.error(missing_g_token, icon=\"\u2757\")\n            elif not cl.validate_url(gitlab_url):\n                st.error(invalid_url, icon=\"\u2757\")\n            else:                \n                with st.spinner(fetching_data):\n\n\n                    # GitLab-projektin tietojen haku\n                    if get_project_data(gitlab_url, gitlab_token_value):\n                        # Clockify-datan haku\n                        if clockify_token_value:\n                            fetch_sprint_hours(clockify, gitlab_url, gitlab_token_value)\n                            fetch_sprint_and_tag_hours(clockify, gitlab_url, gitlab_token_value)\n                        st.switch_page(\"app_pages/project.py\")\n                    else:\n                        st.error(error_msg, icon=\"\u2757\")\n    with col3:\n        # Tallenna tokenit\n        if st.button(save_tokens, use_container_width = True, help = save_tokens_help, disabled=True):\n            if gitlab_token_value or clockify_token_value:\n                et.save_tokens_to_env(gitlab_token_value, clockify_token_value)\n                env_gitlab_token, env_clockify_token = et.get_env_tokens()\n\n            else:\n                st.error(missing_token_values, icon=\"\u2757\")\n    with col4:\n        # Poista tallennetut tokenit\n        if st.button(remove_tokens, use_container_width = True, help = remove_tokens_help, disabled=True):\n            et.remove_tokens_from_env_file()\n            env_gitlab_token, env_clockify_token = et.get_env_tokens()\n</code></pre>"},{"location":"modules_api_reference/#main-sovellus","title":"Main -sovellus","text":"<p>Dokumentaatio <code>app.py</code> -moduulista, joka sis\u00e4lt\u00e4\u00e4 sovelluksen p\u00e4\u00e4toiminnot ja navigaation.</p> <p>RepoRouskun p\u00e4\u00e4ohjelma, joka luo sovelluksen toimintovalikon ja avaa etusivun.</p>"},{"location":"modules_api_reference/#src.app.create_navigation_panel","title":"<code>create_navigation_panel()</code>","text":"<p>Luo navigointivalikon sivustorakenteesta.</p> Source code in <code>src\\app.py</code> <pre><code>def create_navigation_panel():\n    \"\"\"\n    Luo navigointivalikon sivustorakenteesta.\n    \"\"\"\n    # Navigointivalikko\n    app_pages = {\n        connections: [\n            st.Page(\"app_pages/start.py\", title=change_project, icon = \"\ud83d\udd04\", default=True),\n        ],\n        reports: [\n            st.Page(\"app_pages/project.py\", title=project, icon = \"\ud83d\udcc8\"),\n            st.Page(\"app_pages/members.py\", title=member, icon = \"\ud83d\ude4b\ud83c\udffb\u200d\u2642\ufe0f\")\n        ],\n    }\n\n    project_url = None\n    if proj_data in st.session_state and st.session_state[proj_data] is not None:\n        project_url = st.session_state[proj_data].get_project_url()\n\n    if project_url:\n        with st.sidebar:\n            st.markdown(\n                f\"\ud83d\udd17 [{open_gitlab}]({project_url})\",\n                unsafe_allow_html=True\n            )\n\n    pg = st.navigation(app_pages)\n    pg.run()\n</code></pre>"},{"location":"modules_api_reference/#src.app.main","title":"<code>main()</code>","text":"<p>Sovelluksen p\u00e4\u00e4ohjelma.</p> Source code in <code>src\\app.py</code> <pre><code>def main():\n    \"\"\"\n    Sovelluksen p\u00e4\u00e4ohjelma.\n    \"\"\"\n    set_appearance()\n    create_navigation_panel()\n</code></pre>"},{"location":"modules_api_reference/#src.app.set_appearance","title":"<code>set_appearance()</code>","text":"<p>M\u00e4\u00e4ritt\u00e4\u00e4 sovelluksen ulkoasun.</p> Source code in <code>src\\app.py</code> <pre><code>def set_appearance():\n    \"\"\"\n    M\u00e4\u00e4ritt\u00e4\u00e4 sovelluksen ulkoasun.\n    \"\"\"\n    st.set_page_config(\n        page_title = app_title,\n        page_icon = \"\ud83c\udf44\",\n        layout = 'wide',\n        initial_sidebar_state = \"collapsed\"\n    )\n</code></pre>"},{"location":"modules_api_reference/#projektin-tiedot-sivu","title":"Projektin tiedot -sivu","text":"<p>Dokumentaatio <code>project.py</code> -moduulista, joka n\u00e4ytt\u00e4\u00e4 projektin keskeiset tiedot ja visualisoi ne k\u00e4ytt\u00e4j\u00e4lleen.</p> <p>Projektitietojen dashboard, jonka avulla k\u00e4ytt\u00e4j\u00e4 voi tarkastella projektin valmiusastetta, keskeisi\u00e4 metriikoita,  projektiryhm\u00e4n j\u00e4seni\u00e4 sek\u00e4 issueita ja committeja jaoteltuina milestonejen ja j\u00e4senten mukaan.</p>"},{"location":"modules_api_reference/#src.app_pages.project.branch_metric","title":"<code>branch_metric()</code>","text":"<p>Metriikka projektin branchien m\u00e4\u00e4r\u00e4st\u00e4.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def branch_metric():\n    \"\"\"\n    Metriikka projektin branchien m\u00e4\u00e4r\u00e4st\u00e4.\n    \"\"\"\n    st.metric(branches, st.session_state[proj_data].count_branches())\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.closed_issues_by_date","title":"<code>closed_issues_by_date(members, start_date, end_date)</code>","text":"<p>Suljetut issuet aikasarjana valittujen j\u00e4senten ja milestonejen mukaan.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista projektiryhm\u00e4n j\u00e4senten nimist\u00e4.</p> required <code>start_date</code> <code>date</code> <p>Aikajakson alkupvm.</p> required <code>end_date</code> <code>date</code> <p>Aikajakson loppupvm.</p> required Source code in <code>src\\app_pages\\project.py</code> <pre><code>def closed_issues_by_date(members, start_date, end_date):\n    \"\"\"\n    Suljetut issuet aikasarjana valittujen j\u00e4senten ja milestonejen mukaan.\n\n    Args:\n        members (list): Lista projektiryhm\u00e4n j\u00e4senten nimist\u00e4.\n        start_date (date): Aikajakson alkupvm.\n        end_date (date): Aikajakson loppupvm.\n    \"\"\"\n    if len(members):\n        st.write(\"\")\n        data, x_label, y_label = st.session_state[proj_data].get_closed_issues_by_date(members, start_date, end_date)\n        if not data.empty:\n            st.bar_chart(data, x_label=x_label, y_label=y_label)\n        else:\n            st.warning(no_issues)\n    else:\n        st.warning(no_members)\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.closed_issues_by_milestone","title":"<code>closed_issues_by_milestone(members)</code>","text":"<p>Palkkikaavio suljetuista issueista j\u00e4senitt\u00e4in ja milestoneittain.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista projektiryhm\u00e4n j\u00e4senten nimist\u00e4.</p> required Source code in <code>src\\app_pages\\project.py</code> <pre><code>def closed_issues_by_milestone(members):\n    \"\"\"\n    Palkkikaavio suljetuista issueista j\u00e4senitt\u00e4in ja milestoneittain.\n\n    Args:\n        members (list): Lista projektiryhm\u00e4n j\u00e4senten nimist\u00e4.\n    \"\"\"\n    if len(members):\n        data, x_field, y_field, color_field = st.session_state[proj_data].get_closed_issues_by_milestone(members)\n        if data[y_field].sum():\n            st.bar_chart(data, x=x_field, y=y_field, color=color_field, horizontal=True)\n        else:\n            st.warning(no_issues)\n    else:\n        st.warning(no_members)\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.commits_by_date","title":"<code>commits_by_date(members, start_date, end_date)</code>","text":"<p>Commitit aikasarjana valittujen j\u00e4senten ja milestonejen mukaan.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista projektiryhm\u00e4n j\u00e4senten nimist\u00e4.</p> required <code>start_date</code> <code>date</code> <p>Aikajakson alkupvm.</p> required <code>end_date</code> <code>date</code> <p>Aikajakson loppupvm.</p> required Source code in <code>src\\app_pages\\project.py</code> <pre><code>def commits_by_date(members, start_date, end_date):\n    \"\"\"\n    Commitit aikasarjana valittujen j\u00e4senten ja milestonejen mukaan.\n\n    Args:\n        members (list): Lista projektiryhm\u00e4n j\u00e4senten nimist\u00e4.\n        start_date (date): Aikajakson alkupvm.\n        end_date (date): Aikajakson loppupvm.\n    \"\"\"\n    if len(members):\n        st.write(\"\")\n        data, x_label, y_label = st.session_state[proj_data].get_commits_by_date(members, start_date, end_date)\n        if not data.empty:\n            st.bar_chart(data, x_label=x_label, y_label=y_label)\n        else:\n            st.warning(no_commits)\n    else:\n        st.warning(no_members)\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.commits_by_milestone","title":"<code>commits_by_milestone(members)</code>","text":"<p>Palkkikaavio commiteista j\u00e4senitt\u00e4in ja milestoneittain.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista projektiryhm\u00e4n j\u00e4senten nimist\u00e4.</p> required Source code in <code>src\\app_pages\\project.py</code> <pre><code>def commits_by_milestone(members):\n    \"\"\"\n    Palkkikaavio commiteista j\u00e4senitt\u00e4in ja milestoneittain.\n\n    Args:\n        members (list): Lista projektiryhm\u00e4n j\u00e4senten nimist\u00e4.\n    \"\"\"\n    if len(members):\n        data, x_field, y_field, color_field = st.session_state[proj_data].get_commits_by_milestone(members)\n        if data[y_field].sum():\n            st.bar_chart(data, x=x_field, y=y_field, color=color_field, horizontal=True)\n        else:\n            st.warning(no_commits)\n    else:\n        st.warning(no_members)\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.issues_donut","title":"<code>issues_donut()</code>","text":"<p>Donitsikaavio suljetuista issueista suhteessa projektin kaikkiin issueisiin.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def issues_donut():\n    \"\"\"\n    Donitsikaavio suljetuista issueista suhteessa projektin kaikkiin issueisiin.\n    \"\"\"\n    st.write(issues)\n    issue_donut = cl.make_donut(st.session_state[proj_data].get_readiness_issues(), issues, 'blue')\n    st.altair_chart(issue_donut)\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.issues_metric","title":"<code>issues_metric()</code>","text":"<p>Metriikka projektin issueiden kokonaism\u00e4\u00e4r\u00e4st\u00e4.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def issues_metric():\n    \"\"\"\n    Metriikka projektin issueiden kokonaism\u00e4\u00e4r\u00e4st\u00e4.\n    \"\"\"\n    st.metric(issues, len(st.session_state[proj_data].get_issues()))\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.merge_request_metric","title":"<code>merge_request_metric()</code>","text":"<p>Metriikka projektin avoimien merge requestien m\u00e4\u00e4r\u00e4st\u00e4.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def merge_request_metric():\n    \"\"\"\n    Metriikka projektin avoimien merge requestien m\u00e4\u00e4r\u00e4st\u00e4.\n    \"\"\"\n    st.metric(opened_merge_requests, st.session_state[proj_data].count_open_merge_requests())\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.milestone_donut","title":"<code>milestone_donut()</code>","text":"<p>Donitsikaavio p\u00e4\u00e4ttyneist\u00e4 milestoneista suhteessa projektin kaikkiin milestoneihin.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def milestone_donut():\n    \"\"\"\n    Donitsikaavio p\u00e4\u00e4ttyneist\u00e4 milestoneista suhteessa projektin kaikkiin milestoneihin.\n    \"\"\"\n    st.write(milestones)\n    milestone_donut = cl.make_donut(st.session_state[proj_data].get_readiness_ml(), milestones, 'blue')\n    st.altair_chart(milestone_donut)\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.milestone_metric","title":"<code>milestone_metric()</code>","text":"<p>Metriikka projektin milesonejen kokonaism\u00e4\u00e4r\u00e4st\u00e4.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def milestone_metric():\n    \"\"\"\n    Metriikka projektin milesonejen kokonaism\u00e4\u00e4r\u00e4st\u00e4.\n    \"\"\"\n    st.metric(milestones, st.session_state[proj_data].count_milestones())\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.milestone_selector","title":"<code>milestone_selector()</code>","text":"<p>Tarkasteltavien milestonejen valintakomponentti.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def milestone_selector():\n    \"\"\"\n    Tarkasteltavien milestonejen valintakomponentti.\n    \"\"\"\n    start_date = None\n    end_date = None\n    milestone_df = st.session_state[proj_data].get_milestone_data_for_slider(start_txt, end_txt)\n\n    if len(milestone_df):\n        # Koodataan milestonejen nimiin alku ja loppu -tekstit\n        slider_options = milestone_df.iloc[:,0].tolist()\n        slider_options = [s + ' ' + start_txt for s in slider_options] + [slider_options[-1] + ' ' + end_txt]\n        start, end = st.select_slider(time_period, options=slider_options, value = (slider_options[0], slider_options[-1]), help=slider_help)\n\n        if start and end and start != end:\n\n            # Selvitet\u00e4\u00e4n koodatuista ajankohtien nimist\u00e4 p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4t\n            start_milestone, separator, start_col = start.rpartition(' ')\n            end_milestone, separator, end_col = end.rpartition(' ')\n\n            start_date = milestone_df[milestone_df.iloc[:, 0] == start_milestone].iloc[0, milestone_df.columns.get_loc(start_col)]\n\n            if end_col == end_txt:\n                end_date = milestone_df[milestone_df.iloc[:, 0] == end_milestone].iloc[0, milestone_df.columns.get_loc(end_col)]\n            else:\n                row_index = max(0,  milestone_df[milestone_df.iloc[:, 0] == end_milestone].index[0] - 1)\n                end_date = milestone_df.iloc[row_index, milestone_df.columns.get_loc(end_txt)]\n\n    return start_date, end_date\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.open_issues_metric","title":"<code>open_issues_metric()</code>","text":"<p>Metriikka projektin avoimien issueiden m\u00e4\u00e4r\u00e4st\u00e4.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def open_issues_metric():\n    \"\"\"\n    Metriikka projektin avoimien issueiden m\u00e4\u00e4r\u00e4st\u00e4.\n    \"\"\"\n    st.metric(open_issues, st.session_state[proj_data].count_open_issues())\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.project_description_expander","title":"<code>project_description_expander()</code>","text":"<p>Projektin kuvauksen sis\u00e4lt\u00e4v\u00e4 komponentti.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def project_description_expander():\n    \"\"\"\n    Projektin kuvauksen sis\u00e4lt\u00e4v\u00e4 komponentti.\n    \"\"\"\n    desc = st.session_state[proj_data].get_description()\n    if desc:\n        with st.expander(description):\n            st.write(desc)\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.project_info_expander","title":"<code>project_info_expander()</code>","text":"<p>Projektin perustiedot sis\u00e4lt\u00e4v\u00e4 komponentti.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def project_info_expander():\n    \"\"\"\n    Projektin perustiedot sis\u00e4lt\u00e4v\u00e4 komponentti.\n    \"\"\"\n    with st.expander(info):\n        space = st.session_state[proj_data].get_namespace_name()\n        st.write(f'''\n            {creation_date}: {st.session_state[proj_data].get_creation_date()}\\n\n            {update_date}: {st.session_state[proj_data].get_update_date()}\\n\n            {namespace}: {space if space else \"-\"}\\n\n            {visibility}: {st.session_state[proj_data].get_visibility()}\\n\n        ''')\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.project_members","title":"<code>project_members()</code>","text":"<p>Projektiryhm\u00e4n j\u00e4senten valitsin.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def project_members():\n    \"\"\"\n    Projektiryhm\u00e4n j\u00e4senten valitsin.\n    \"\"\"\n    members = cl.make_team_member_selector(st.session_state[proj_data].get_assignees())\n    return members\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.project_page","title":"<code>project_page()</code>","text":"<p>Moduulin p\u00e4\u00e4koodilohko, joka koostaa projektin tiedot -sivun eri komponenteista.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def project_page():\n    \"\"\"\n    Moduulin p\u00e4\u00e4koodilohko, joka koostaa projektin tiedot -sivun eri komponenteista.\n    \"\"\"\n    col1, col2, col3 = st.columns([3, 0.5, 9])\n\n    with col1:\n        # Donitsit\n        st.markdown(f'#### {completion_status}')\n        col1_1, col1_2 = col1.columns([1, 1])\n        with col1_1:\n            milestone_donut()\n        with col1_2:\n            issues_donut()\n\n    with col1:\n        # Mittarit\n        st.write(\"\")\n        st.markdown(f'#### {project_metrics}')\n        st.write(\"\")\n        col1_1, col1_2 = col1.columns([1, 1])\n        with col1_1:\n            # Milestonet\n            milestone_metric()\n            st.write(\"\")\n\n            # Avoimet merge requestit\n            merge_request_metric()\n            st.write(\"\")\n\n            # Branchit\n            branch_metric()\n\n        with col1_2:\n            # Issuet\n            issues_metric()\n            st.write(\"\")\n\n            # Avoimet issuet\n            open_issues_metric()\n            st.write(\"\")\n\n            # Ty\u00f6tunnit\n            work_hours_metric()\n\n        # Expanderit\n        st.write(\"\")\n        st.write(\"\")\n        project_description_expander()\n        project_info_expander()\n\n    with col3:\n        # Projektiryhm\u00e4\n        members = project_members()\n\n        # V\u00e4lilehdet milestonekaavioihin\n        tabs = [closed_issues, commits]\n        if cl.clockify_available():\n            tabs.append(work_hours)\n\n        tab_objects_b = st.tabs(tabs)\n        tab_b1 = tab_objects_b[0] if len(tab_objects_b) &gt; 0 else None\n        tab_b2 = tab_objects_b[1] if len(tab_objects_b) &gt; 1 else None\n        tab_b3 = tab_objects_b[2] if len(tab_objects_b) &gt; 2 else None\n\n        # Suljetut issuet ja commitit milestoneittain\n        with tab_b1:\n            closed_issues_by_milestone(members)\n        with tab_b2:\n            commits_by_milestone(members)\n        if tab_b3:\n            with tab_b3:\n                work_hours_data(members)\n\n        # Aikajakson valinta\n        start_date, end_date = milestone_selector()\n\n        # V\u00e4lilehdet aikasarjakaavioihin\n        tabs_l = [closed_issues, commits]\n        if False and cl.clockify_available(): # Jatkokehitykseen\n            tabs_l.append(work_hours)\n\n        tab_objects_l = st.tabs(tabs_l)\n        tab_l1 = tab_objects_l[0] if len(tab_objects_l) &gt; 0 else None\n        tab_l2 = tab_objects_l[1] if len(tab_objects_l) &gt; 1 else None\n        tab_l3 = tab_objects_l[2] if len(tab_objects_l) &gt; 2 else None\n\n        # Aikasarjat suljetuista issueista, commiteista ja ty\u00f6tunneista\n        with tab_l1:\n            closed_issues_by_date(members, start_date, end_date)\n        with tab_l2:\n            commits_by_date(members, start_date, end_date)\n        if tab_l3:\n            with tab_l3:\n                pass # Jatkokehitykseen\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.work_hours_data","title":"<code>work_hours_data(members)</code>","text":"<p>Palkkikaavio ty\u00f6tunneista j\u00e4senitt\u00e4in ja milestoneittain.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista projektiryhm\u00e4n j\u00e4senten nimist\u00e4.</p> required Source code in <code>src\\app_pages\\project.py</code> <pre><code>def work_hours_data(members):\n    \"\"\"\n    Palkkikaavio ty\u00f6tunneista j\u00e4senitt\u00e4in ja milestoneittain.\n\n    Args:\n        members (list): Lista projektiryhm\u00e4n j\u00e4senten nimist\u00e4.\n    \"\"\"\n    if 'sprint_hours_df_grouped' in st.session_state:\n        sprint_hours_df_grouped = st.session_state['sprint_hours_df_grouped']\n        if not sprint_hours_df_grouped.empty:\n            try:\n                filtered_df = sprint_hours_df_grouped[sprint_hours_df_grouped['user'].isin(members)]\n                if not filtered_df.empty:\n                    pivot_df = filtered_df.pivot(index='milestone', columns='user', values='total_hours').fillna(0)\n                    st.bar_chart(pivot_df, use_container_width=True, horizontal=True)\n                else:\n                    st.warning(\"Ei l\u00f6ytynyt ty\u00f6tunteja valituille j\u00e4senille.\")\n            except KeyError as e:\n                st.error(f\"Data puuttuu odotetuista sarakkeista: {e}\")\n        else:\n            st.warning(\"Ei l\u00f6ytynyt ty\u00f6tunteja sprinteilt\u00e4.\")\n    else:\n        st.warning(\"Sprinttien ty\u00f6tunnit eiv\u00e4t ole saatavilla. Varmista, ett\u00e4 tiedot on haettu onnistuneesti start.py-sivulla.\")\n</code></pre>"},{"location":"modules_api_reference/#src.app_pages.project.work_hours_metric","title":"<code>work_hours_metric()</code>","text":"<p>Metriikka projektin ty\u00f6tuntien kokonaism\u00e4\u00e4r\u00e4st\u00e4.</p> Source code in <code>src\\app_pages\\project.py</code> <pre><code>def work_hours_metric():\n    \"\"\"\n    Metriikka projektin ty\u00f6tuntien kokonaism\u00e4\u00e4r\u00e4st\u00e4.\n    \"\"\"\n    if cl.clockify_available() and 'clockify_data' in st.session_state:\n        user_hours_df = st.session_state['clockify_data']\n        if not user_hours_df.empty:\n            total_project_time = user_hours_df[work_hours].sum()\n            total_project_time = int(total_project_time)\n            st.metric(work_hours, total_project_time)\n        else:\n            st.warning(\"Ei l\u00f6ytynyt ty\u00f6tunteja.\")\n</code></pre>"},{"location":"modules_api_reference/#kayttajat-sivu","title":"K\u00e4ytt\u00e4j\u00e4t -sivu","text":"<p>Dokumentaatio <code>members.py</code> -moduulista, joka sis\u00e4lt\u00e4\u00e4 funktiot projektiryhm\u00e4n j\u00e4senten tietojen k\u00e4sittelyyn.</p> <p>Dashboard projektin datan tarkasteluun projektiryhm\u00e4n j\u00e4senen/j\u00e4senten n\u00e4k\u00f6kulmasta.  Dashboardin avulla yksitt\u00e4inen j\u00e4sen voi koostaa tiedot issueistaan ja ty\u00f6tunneistaan  projektikurssin raportointia varten.</p>"},{"location":"modules_api_reference/#src.app_pages.members.member_page","title":"<code>member_page()</code>","text":"<p>Sivu projektiryhm\u00e4n j\u00e4senten statistiikan tarkasteluun.</p> <p>Tietoja on mahdollista suodattaa valitsemalla tarkasteltavat milestonet sek\u00e4 projektiryhm\u00e4n yksi j\u00e4sen / kaikki j\u00e4senet. Dashboardilla esitet\u00e4\u00e4n listaukset issueista, keskeisimm\u00e4t ty\u00f6skentelyn metriikat ja my\u00f6s ty\u00f6tunnit, mik\u00e4li Clockify-integraatio on k\u00e4yt\u00f6ss\u00e4.</p> Source code in <code>src\\app_pages\\members.py</code> <pre><code>def member_page():\n    \"\"\"\n    Sivu projektiryhm\u00e4n j\u00e4senten statistiikan tarkasteluun.\n\n    Tietoja on mahdollista suodattaa valitsemalla tarkasteltavat milestonet sek\u00e4 projektiryhm\u00e4n\n    yksi j\u00e4sen / kaikki j\u00e4senet. Dashboardilla esitet\u00e4\u00e4n listaukset issueista, keskeisimm\u00e4t\n    ty\u00f6skentelyn metriikat ja my\u00f6s ty\u00f6tunnit, mik\u00e4li Clockify-integraatio on k\u00e4yt\u00f6ss\u00e4.\n    \"\"\"\n    # Tarkista, ett\u00e4 proj_data on m\u00e4\u00e4ritelty sessiossa ennen projektin nimen n\u00e4ytt\u00e4mist\u00e4\n    project_title = st.session_state[proj_data].get_name() if proj_data in st.session_state else \"Projekti\"\n\n    # N\u00e4yt\u00e4 projektin nimi \n    cl.make_page_title(member_title, project_title)\n\n    # Valinnat\n    col1, col_empty, col2 = st.columns([2, 0.1, 3])\n\n    # K\u00e4ytt\u00e4j\u00e4valinta\n    with col1: \n        selected_member = st.selectbox(select_member, [all_members] + st.session_state[proj_data].get_assignees())\n\n    # Milestone-valinta\n    with col2:\n        milestones = st.session_state[proj_data].get_milestones()\n        milestone_options = milestones['title'].tolist() if not milestones.empty else []\n        selected_milestones = st.pills(\n            select_milestone,\n            options=milestone_options,\n            selection_mode = 'multi',\n            default = milestone_options\n        )\n\n    # Ensimm\u00e4inen kolumni: suljetut/avoimet issuet v\u00e4lilehtin\u00e4\n    with col1:\n        st.markdown(f\"### {issues_title}\")\n\n        tab1, tab2 = st.tabs([closed_issues_title, open_issues_title])\n\n        with tab1:\n            closed_issues = st.session_state[proj_data].get_closed_issues()\n\n            # Suodata valitun j\u00e4senen mukaan\n            if selected_member != all_members:\n                closed_issues = closed_issues[closed_issues[\"assignees\"].apply(lambda assignees: selected_member in assignees)]\n\n            # Suodata valittujen milestonien mukaan\n            if selected_milestones:\n                closed_issues = closed_issues[closed_issues[\"milestone\"].isin(selected_milestones)]\n\n            if closed_issues.empty:\n                st.write(no_issues)\n            else:\n                st.dataframe(\n                    closed_issues[['title', 'milestone']].rename(\n                        columns={'title': 'Otsikko', 'milestone': 'Milestone'}\n                    ).reset_index(drop=True),\n                    height=400,\n                    use_container_width=True\n                )\n\n        with tab2:\n            open_issues = st.session_state[proj_data].get_open_issues()\n\n            # Suodata valitun j\u00e4senen mukaan\n            if selected_member != all_members:\n                open_issues = open_issues[open_issues[\"assignees\"].apply(lambda assignees: selected_member in assignees)]\n\n            # Suodata valittujen milestonien mukaan\n            if selected_milestones:\n                open_issues = open_issues[open_issues[\"milestone\"].isin(selected_milestones)]\n\n            if open_issues.empty:\n                st.write(no_issues)\n            else:\n                st.dataframe(\n                    open_issues[['title', 'milestone']].rename(\n                        columns={'title': 'Otsikko', 'milestone': 'Milestone'}\n                    ).reset_index(drop=True),\n                    height=400,\n                    use_container_width=True\n                )\n\n    # Toinen kolumni: kommittien ja issueiden lukum\u00e4\u00e4r\u00e4t laatikossa\n    col2_1, col2_2 = col2.columns([1, 3])\n\n    with col2_1:\n        st.markdown(f\"### {metrics_title}\")\n        st.write(\"\")\n        st.write(\"\")\n\n        # Suodata valitun j\u00e4senen mukaan ja valittujen milestonejen mukaan\n        if selected_member != all_members:\n            member_list = [selected_member]\n\n        else:\n            member_list = st.session_state[proj_data].get_assignees()\n\n        commit_data, _, _, _ = st.session_state[proj_data].get_commits_by_milestone(member_list)\n\n        # Suodata \n        if selected_milestones:\n            commit_data = commit_data[commit_data[\"milestone\"].isin(selected_milestones)]\n\n        total_commits = commit_data[\"kpl\"].sum() if not commit_data.empty else 0\n        st.metric(commits, total_commits)\n        st.write(\"\")\n\n        # Suljetut issuet valitun j\u00e4senen ja milestonejen mukaan\n        closed_issues = st.session_state[proj_data].get_closed_issues()\n        if selected_member != all_members:\n            closed_issues = closed_issues[closed_issues[\"assignees\"].apply(lambda assignees: selected_member in assignees)]\n        if selected_milestones:\n            closed_issues = closed_issues[closed_issues[\"milestone\"].isin(selected_milestones)]\n\n        # N\u00e4yt\u00e4 suljettujen issueiden m\u00e4\u00e4r\u00e4\n        st.metric(closed_issues_title, len(closed_issues))\n        st.write(\"\")\n\n        # Avoimet issuet valitun j\u00e4senen ja milestonejen mukaan\n        open_issues = st.session_state[proj_data].get_open_issues()\n        if selected_member != all_members:\n            open_issues = open_issues[open_issues[\"assignees\"].apply(lambda assignees: selected_member in assignees)]\n\n        if selected_milestones:\n            open_issues = open_issues[open_issues[\"milestone\"].isin(selected_milestones)]\n\n        # N\u00e4yt\u00e4 avointen issueiden m\u00e4\u00e4r\u00e4\n        st.metric(open_issues_title, len(open_issues))\n        st.write(\"\")\n\n\n    # Kolmas kolumni: tuntitiedot ja piirakkadiagrammi\n        with col2_2:\n            st.markdown(f\"### {work_hours_title}\")\n\n            if cl.clockify_available():\n                total_hours = 0\n\n                if 'sprint_hours_df_grouped' in st.session_state:\n                    sprint_hours_df_grouped = st.session_state['sprint_hours_df_grouped']\n                    if selected_member != all_members:\n                        filtered_df = sprint_hours_df_grouped[\n                            (sprint_hours_df_grouped['user'] == selected_member) &amp;\n                            (sprint_hours_df_grouped['milestone'].isin(selected_milestones))\n                        ]\n                    else:\n                        filtered_df = sprint_hours_df_grouped[\n                            sprint_hours_df_grouped['milestone'].isin(selected_milestones)\n                        ]\n                    if not filtered_df.empty:\n                        total_hours = filtered_df['total_hours'].sum()\n                if \"sprint_and_tag_hours\" in st.session_state:\n                    sprint_tag_hours_df = st.session_state[\"sprint_and_tag_hours\"]\n                    if selected_member != all_members:\n                        filtered_tag_df = sprint_tag_hours_df[\n                            (sprint_tag_hours_df['user_name'] == selected_member) &amp;\n                            (sprint_tag_hours_df['milestone'].isin(selected_milestones))\n                        ]\n                    else:\n                        filtered_tag_df = sprint_tag_hours_df[\n                            sprint_tag_hours_df['milestone'].isin(selected_milestones)\n                        ]\n\n                    if not filtered_tag_df.empty:\n                        tag_hours_df = filtered_tag_df.groupby('tag')['total_tag_hours'].sum().reset_index()\n\n                        if not tag_hours_df.empty:\n                            fig = px.pie(\n                            tag_hours_df,\n                            names='tag',\n                            values='total_tag_hours',\n                            title=f\"Ty\u00f6aika tageittain: {selected_member}\",\n                            labels={'tag': 'Tagi', 'total_tag_hours': 'Tunnit'}\n                        )\n                        st.plotly_chart(fig)\n                    else:\n                        st.write(\"Ei tagitietoja saatavilla.\")\n                with col2_1:\n                    st.metric(work_hours_title, np.round(total_hours).astype(int))\n\n            else:\n                with col2_2:\n                # n\u00e4yt\u00e4 logo, jos Clockify-data ei ole saatavilla\n                    image_path = Path(__file__).parent.parent / 'images' / 'mushroom_transparent.png'\n                    st.image(str(image_path), caption=clockify_not_available)\n</code></pre>"},{"location":"modules_api_reference/#gitlab-integraatio","title":"GitLab-integraatio","text":"<p>Dokumentaatio <code>gitlab_api.py</code> -moduulista, joka sis\u00e4lt\u00e4\u00e4 luokan GitLabin tietojen hakuun ja k\u00e4sittelyyn.</p> <p>RepoRouskun rajapinta, joka hakee projektin tiedot GitLabin APIsta. Sis\u00e4lt\u00e4\u00e4 ProjectData-luokan, joka kapseloi projektin tiedot ja tarjoaa  palveluinaan pureskeltua dataa k\u00e4ytt\u00f6liittym\u00e4\u00e4 varten.</p> <p>P\u00e4\u00e4s\u00e4\u00e4nt\u00f6n\u00e4 on, ett\u00e4 RepoRouskun tiedostoista vain t\u00e4ss\u00e4 tiedostossa esiintyy GitLabista saadun json-muotoisen datan avaimia.</p>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData","title":"<code>ProjectData</code>","text":"<p>Luokka GitLab-projektin tietojen hakemiseen ja k\u00e4sittelyyn.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>class ProjectData:\n    \"\"\"\n    Luokka GitLab-projektin tietojen hakemiseen ja k\u00e4sittelyyn.\n    \"\"\"\n    def __init__(self, gitlab_url, gitlab_token):\n        \"\"\"\n        Konstruktori\n        \"\"\"\n        self.project_url = None         # Esim. https://gitlab.dclabra.fi/projektiopinnot-4-digitaaliset-palvelut/palikkapalvelut\n        self.api_url = None             # Esim. https://gitlab.dclabra.fi/api/v4/projects  \n        self.project_data = None        # project_data -muuttujassa m\u00e4\u00e4ritellyt tiedot api-rajapinnasta\n        self.project_meta_data = None   # projektin yleistiedot\n\n        self.access_token = gitlab_token\n        self.headers = {\"Private-Token\": self.access_token}\n        self.output_file_name = 'gitlab_data.json'\n        self.output_file_name2 = 'gitlab_meta_data.json'\n\n        self.init(gitlab_url)\n\n\n    ### Projektin metatietojen getterit\n\n    def get_meta_data(self, data_type):\n        \"\"\"\n        Palauttaa parametrina m\u00e4\u00e4ritellyn arvon projektin metadatasta.\n\n        Args:\n            data_type (str): Pyydetyn tietokent\u00e4n nimi.\n        \"\"\"\n        return self.project_meta_data[data_type] if self.project_meta_data else None\n\n\n    def get_name(self):\n        \"\"\"\n        Palauttaa projektin nimen.\n\n        Returns:\n            (str): Projektin nimi.\n        \"\"\"\n        return self.get_meta_data(key_name)\n\n\n    def get_id(self):\n        \"\"\"\n        Palauttaa projektin id:n.\n\n        Returns:\n            (str): Projektin id\n        \"\"\"\n        return self.get_meta_data(key_id)\n\n\n    def get_description(self):\n        \"\"\"\n        Palauttaa projektin kuvauksen.\n\n        Returns:\n            (str): Projektin kuvaus.\n        \"\"\"\n        return self.get_meta_data(key_desc)\n\n\n    def get_visibility(self):\n        \"\"\"\n        Palauttaa projektin n\u00e4kyvyyden.\n\n        Returns:\n            (str): Projektin n\u00e4kyvyys.\n        \"\"\"\n        return self.get_meta_data(key_visibility)\n\n\n    def get_avatar(self):\n        \"\"\"\n        Palauttaa projektin avattaren urlin.\n\n        Returns:\n            (str): Projektin avattaren url.\n        \"\"\"\n        url = self.get_meta_data(key_avatar)\n        return url if url else None\n\n\n    ### Projektin tietojen getterit\n\n    def get_data(self, data_type):\n        \"\"\"\n        Palauttaa parametrina m\u00e4\u00e4ritellyn arvon projektin datasta.\n\n        Args:\n            data_type (str): Pyydetyn tietokent\u00e4n nimi.\n        \"\"\"\n        return self.project_data[data_type] if self.project_data else None\n\n\n    def get_project_url(self):\n        \"\"\"\n        Palauttaa projektin urlin.\n\n        Returns:\n            (str): Projektin url.\n        \"\"\"\n        return self.project_url\n\n\n    def get_creation_date(self):\n        \"\"\"\n        Palauttaa projektin luontip\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n formaatissa pp.kk.vvvv.\n\n        Returns:\n            (date): Projektin luontip\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.\n        \"\"\"\n        return self.format_date(self.get_meta_data(key_created_at))\n\n\n    def get_update_date(self):\n        \"\"\"\n        Palauttaa projektin viimeisimm\u00e4n p\u00e4ivitysp\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n formaatissa pp.kk.vvvv.\n\n        Returns:\n            (date): Projektin luontip\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.\n        \"\"\"\n        return self.format_date(self.get_meta_data(key_updated))\n\n\n    def get_namespace_name(self):\n        \"\"\"\n        Palauttaa projektin nimiavaruuden nimen.\n\n        Returns:\n            (str): Projektin nimiavaruuden nimi.\n        \"\"\"\n        namespace = self.get_meta_data(key_namespace)\n        if namespace:\n            return namespace[key_name]\n        return None\n\n\n    def get_milestones(self):\n        \"\"\"\n        Palauttaa milestonetiedot dataframena.\n\n        Returns:\n            (DataFrame): Projektin milestonet.\n        \"\"\"\n        milestones = self.get_data(key_milestones)\n        if milestones:\n            df = pd.DataFrame(milestones)\n\n            if not df.empty:\n                # P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4formaatti\n                df = cl.format_time_columns(df, [key_start_date, key_due_date])\n\n                # Poistetaan rivit, joilla ei ole p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4tietoa\n                df = df.dropna(subset=[key_due_date, key_start_date])\n\n                if len(df):\n                    # J\u00e4rjestet\u00e4\u00e4n aikaj\u00e4rjestykseen\n                    df = df.sort_values(by=key_start_date)\n\n                    # Lis\u00e4t\u00e4\u00e4n status \"P\u00e4\u00e4ttynyt\", \"Aktiivinen\", tai \"Tuleva\"\n                    today = datetime.now().date()\n\n                    def milestone_status(row):\n                        if row[key_state] == value_closed or row[key_due_date] &lt; today:\n                            return status_ended\n                        elif row[key_start_date] &lt;= today &lt;= row[key_due_date]:\n                            return status_active\n                        elif row[key_due_date] &gt; today:\n                            return status_upcoming\n                        else:\n                            return \"EOS\"\n\n                    df[key_status] = df.apply(milestone_status, axis=1)\n\n                    # Valitaan sarakkeet\n                    df = df[[key_iid, key_title, key_desc, key_state, key_due_date, key_start_date, key_status]]\n\n            return df\n        return pd.DataFrame()\n\n\n    def get_issues(self):\n        \"\"\"\n        Palauttaa issuetiedot dataframena.\n\n        Returns:\n            (DataFrame): Projektin kaikki issuet.\n        \"\"\"\n        issues = self.get_data(key_issues)\n        if issues:\n            df = pd.DataFrame(issues)\n\n            if not df.empty:\n                # P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4formaatti\n                df = cl.format_time_columns(df, [key_closed_at])\n\n                # Pelkistet\u00e4\u00e4n assignees listaksi nimist\u00e4, jos se ei ole tyhj\u00e4\n                df[key_assignees] = df[key_assignees].apply(lambda x: [assignee[key_name] for assignee in x] if isinstance(x, list) and x else None)\n\n                # Pelkistet\u00e4\u00e4n milestone titleksi, jos milestone on sanakirja ja siin\u00e4 on title-avain\n                df[key_milestone] = df[key_milestone].apply(lambda x: x.get(key_title) if isinstance(x, dict) and key_title in x else None)\n\n                # Valitaan sarakkeet\n                df = df[[key_iid, key_title, key_desc, key_state, key_assignees, key_milestone, key_closed_at]]\n\n            return df\n        return pd.DataFrame()\n\n\n    def get_commits(self, members=None):\n        \"\"\"\n        Palauttaa committien tiedot dataframena.\n        Suodatetaan j\u00e4senten mukaan, jos j\u00e4senet m\u00e4\u00e4ritelty parametrissa.\n\n        Args:\n            members (list, optional): Lista j\u00e4senten nimist\u00e4, joiden mukaan tiedot suodatetaan.\n\n        Returns:\n            (DataFrame): J\u00e4senten commitit.\n        \"\"\"\n        commits = self.get_data(key_commits)\n        if commits:\n            df = pd.DataFrame(commits)\n\n            if not df.empty:\n                # Suodatetaan j\u00e4senten mukaan\n                if members:\n                    df = df[df[key_author_name].isin(members)]\n\n                # P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4formaatti\n                df = cl.format_time_columns(df, [key_committed_date])\n\n                # Valitaan sarakkeet\n                df = df[[key_title, key_message, key_author_name, key_committed_date]]\n\n            return df\n        return pd.DataFrame()\n\n\n    def get_branches(self):\n        \"\"\"\n        Palauttaa branchien tiedot dataframena.\n\n        Returns:\n            (DataFrame): Projektin branchit.\n        \"\"\"\n        branches = self.get_data(key_branches)\n        if branches:\n            df = pd.DataFrame(branches)\n            return df\n        return pd.DataFrame()\n\n\n    def count_branches(self):\n        \"\"\"\n        Palauttaa branchien lukum\u00e4\u00e4r\u00e4n.\n\n        Returns:\n            (int): Projektin branchien lukum\u00e4\u00e4r\u00e4.\n        \"\"\"\n        branches = self.get_branches()\n        return len(branches)\n\n\n    def get_labels(self):\n        \"\"\"\n        Palauttaa labelien tiedot dataframena.\n\n        Returns:\n            (DataFrame): Projektin labelit.\n        \"\"\"\n        labels = self.get_data(key_labels)\n        if labels:\n            df = pd.DataFrame(labels)\n            return df\n        return pd.DataFrame()\n\n\n    def get_merge_requests(self):\n        \"\"\"\n        Palauttaa merge requestien tiedot dataframena.\n\n        Returns:\n            (DataFrame): Projektin avoimet merge requestit.\n        \"\"\"\n        merge_requests = self.get_data(key_merge_requests)\n        if merge_requests:\n            df = pd.DataFrame(merge_requests)\n            return df\n        return pd.DataFrame()\n\n\n    def count_open_merge_requests(self):\n        \"\"\"\n        Palauttaa avoimien merge requestien lukum\u00e4\u00e4r\u00e4n.\n\n        Returns:\n            (int): Projektin avoimien merge requestien lukum\u00e4\u00e4r\u00e4.\n        \"\"\"\n        df = self.get_merge_requests()\n        if len(df):\n            return len(df[df[key_state] == value_opened])\n        else:\n            return 0\n\n\n    def get_pipelines(self):\n        \"\"\"\n        Palauttaa pipelinejen tiedot dataframena.\n\n        Returns:\n            (DataFrame): Projektin pipelinet.\n        \"\"\"\n        pipelines = self.get_data(key_pipelines)\n        if pipelines:\n            df = pd.DataFrame(pipelines)\n            return df\n        return pd.DataFrame()\n\n\n    def count_expired_milestones(self):\n        \"\"\"\n        Palauttaa p\u00e4\u00e4ttyneiden milestonejen lukum\u00e4\u00e4r\u00e4n.\n\n        Returns:\n            (int): Projektin p\u00e4\u00e4ttyneiden milestonejen lukum\u00e4\u00e4r\u00e4.\n        \"\"\"\n        df = self.get_milestones()\n        if len(df):\n            return len(df[df[key_state] == value_closed])\n        return 0\n\n\n    def count_active_milestones(self):\n        \"\"\"\n        Palauttaa aktiivisten milestonejen lukum\u00e4\u00e4r\u00e4n.\n\n        Returns:\n            (int): Projektin aktiivisten milestonejen lukum\u00e4\u00e4r\u00e4.\n        \"\"\"\n        df = self.get_milestones()\n        if len(df):\n            return len(df[df[key_status] == status_active])\n        return 0\n\n\n    def count_upcoming_milestones(self):\n        \"\"\"\n        Palauttaa tulevien milestonejen lukum\u00e4\u00e4r\u00e4n.\n\n        Returns:\n            (int): Projektin tulevien milestonejen lukum\u00e4\u00e4r\u00e4.\n        \"\"\"\n        df = self.get_milestones()\n        if len(df):\n            return len(df[df[key_status] == status_upcoming])\n        return 0\n\n\n    def get_readiness_ml(self):\n        \"\"\"\n        Palauttaa projektin valmiusasteen milestonejen mukaan.\n\n        Returns:\n            (int): Projektin milestonetason valmiusaste kokonaislukuprosenttina.\n        \"\"\"\n        expired = self.count_expired_milestones()\n        all_milestones = self.count_milestones()\n        if expired and all_milestones:\n            return round((expired / all_milestones) * 100)\n        return 0\n\n\n    def count_milestones(self):\n        \"\"\"\n        Palauttaa milestonejen kokonaislukum\u00e4\u00e4r\u00e4n.\n\n        Returns:\n            (int): Projektin milestonejen lukum\u00e4\u00e4r\u00e4.\n        \"\"\"\n        df = self.get_milestones()\n        if len(df):\n            return len(df)\n        return 0\n\n\n    def get_open_issues(self):\n        \"\"\"\n        Palauttaa avoimet issuet.\n\n        Returns:\n            (DataFrame): Projektin avoimet issuet.\n        \"\"\"\n        df = self.get_issues()\n        if not df.empty:\n            df = df[df[key_state] == value_opened]\n            return df\n        return pd.DataFrame()\n\n\n    def count_open_issues(self):\n        \"\"\"\n        Palauttaa avoimien issueiden lukum\u00e4\u00e4r\u00e4n.\n\n        Returns:\n            (int): Projektin avoimien issueiden lukum\u00e4\u00e4r\u00e4.\n        \"\"\"\n        df = self.get_open_issues()\n        return len(df)\n\n\n    def get_closed_issues(self):\n        \"\"\"\n        Palauttaa suljetut issuet.\n\n        Returns:\n            (DataFrame): Projektin suljetut issuet.\n        \"\"\"\n        df = self.get_issues()\n        if not df.empty:\n            df = df[df[key_state] == value_closed]\n            return df\n        return pd.DataFrame()\n\n\n    def get_readiness_issues(self):\n        \"\"\"\n        Palauttaa projektin valmiusasteen issueiden mukaan.\n\n        Returns:\n            (int): Projektin issuetason valmiusaste kokonaislukuprosenttina.\n        \"\"\"\n        all_issues = len(self.get_issues())\n        closed = len(self.get_closed_issues())\n        if all_issues and closed:\n            return round((closed / all_issues) * 100)\n        return 0\n\n\n    def get_assignees(self):\n        \"\"\"\n        Palauttaa listan uniikeista henkil\u00f6nimist\u00e4, jotka on ker\u00e4tty projektin issueista ja commiteista.\n\n        Returns:\n            (list): Lista uniikeista henkil\u00f6nimist\u00e4.\n        \"\"\"\n        issue_members = []\n        commit_members = []\n        issues = self.get_issues()\n        commits = self.get_commits()\n\n        if not issues.empty:\n            issue_members = issues.explode(key_assignees)[key_assignees].unique().tolist()\n\n        if not commits.empty:\n            commit_members = commits[key_author_name].unique().tolist()\n\n        return sorted(set(issue_members + commit_members))\n\n\n    def reset(self):\n        \"\"\"\n        Resetoi olion tiedot.\n        \"\"\"\n        self.project_url = None\n        self.api_url = None\n        self.project_data = None\n        self.project_meta_data = None\n\n\n    def fetch_data(self, url, params={}):\n        \"\"\"\n        Suorittaa hakupyynn\u00f6n GitLabin REST APIin.\n\n        Args:\n            url (str): Projektin GitLab-url.\n            params (dict): GET-kutsun parametrilista.\n\n        Returns:\n            (json): Haetut tiedot tai None.\n        \"\"\"\n        response = requests.get(url, headers=self.headers, params=params)\n        if response.status_code == 200:\n            try:\n                return response.json()\n            except requests.exceptions.JSONDecodeError:\n                return None\n        else:\n            return None\n\n\n    def fetch_data_with_pagination(self, url, params={}):\n        \"\"\"\n        Suorittaa hakupyynn\u00f6n GitLabin REST APIin.\n\n        Args:\n            url (str): Projektin GitLab-url.\n            params (dict): GET-kutsun parametrilista.\n\n        Returns:\n            (json): Haetut tiedot tai None.\n        \"\"\"\n        all_items = []\n        page = 1\n\n        while True:\n            try:\n                params = {**params, 'per_page': 100, 'page': page}\n                response = requests.get(url, headers=self.headers, params=params)\n                response.raise_for_status()\n                items = response.json()\n                if not items:\n                    break\n            except requests.exceptions.HTTPError:\n                return None\n            all_items.extend(items)\n            page += 1\n\n        return all_items\n\n\n    def generate_api_url(self, project_url):\n        \"\"\"\n        Muodostaa GitLab-projektin url-osoitteesta kyseisen GitLab-instanssin REST API -osoitteen.\n\n        Args:\n            project_url (str): Projektin GitLab-url.\n\n        Returns:\n            (str): GitLabin REST API -osoite.\n        \"\"\"\n        # Erotetaan is\u00e4nt\u00e4nimi esim. \"https://gitlab.com\" tai \"https://your-gitlab-instance.com\"\n        pattern = r'^(https://[^/]+)/(.*)$'\n        match = re.match(pattern, project_url)\n        if match:\n            host = match.group(1)\n            return f\"{host}/api/v4/projects\"\n        return None\n\n\n    def format_date(self, orig_date):\n        \"\"\"\n        Palauttaa p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n muodossa pp.kk.vvvv.\n\n        Args:\n            orig_date (datetime): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.\n\n        Returns:\n            (str): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n muodossa pp.kk.vvvv.\n        \"\"\"\n        return datetime.strptime(orig_date[:10], \"%Y-%m-%d\").strftime(\"%d.%m.%Y\")\n\n\n    def get_project_data(self):\n        \"\"\"\n        Hakee projektin tiedot oliolle.\n\n        Returns:\n            (json): Projektin tiedot.\n        \"\"\"\n        all_data = {}\n\n        for data_type in project_data:\n            if data_type == key_commits or data_type == key_branches:\n                url = f\"{self.api_url}/{self.get_id()}/repository/{data_type}\"\n            else:\n                url = f\"{self.api_url}/{self.get_id()}/{data_type}\"\n            all_data[data_type] = self.fetch_data_with_pagination(url)\n\n        return all_data\n\n\n    def get_project_meta_data(self):\n        \"\"\"\n        Hakee projektin yleistiedot oliolle.\n\n        Returns:\n            (json): Projektin metatiedot.\n        \"\"\"\n        if not self.project_url:\n            return None    \n\n        project_data = None\n\n        match = re.search(r\"^https://[^/]+/(.*)\", self.project_url)\n        project_path = match.group(1) if match else None\n        if project_path:\n            encoded_path = quote(project_path, safe=\"\")\n            url = f\"{self.api_url}/{encoded_path}\"\n            project_data = self.fetch_data(url)\n\n        return project_data\n\n\n    def init(self, url):\n        \"\"\"\n        Hakee projektin tiedot GitLabista ja asettaa ne oliolle.\n\n        Args:\n            url (str): Projektin GitLab-url.\n        \"\"\"\n        if cl.validate_url(url):\n            api_url = self.generate_api_url(url)\n            if api_url:\n                data_json = self.fetch_data(api_url)\n                if data_json:\n                    self.project_url = url\n                    self.api_url = api_url\n                    self.project_meta_data = self.get_project_meta_data()\n                    self.project_data = self.get_project_data()\n\n                    if not self.project_meta_data or not self.project_data:\n                        self.reset()\n\n\n    def save_data_to_file(self):\n        \"\"\"\n        Tallentaa projektin tiedot tiedostoon json-formaatissa.\n        \"\"\"\n        with open(self.output_file_name, 'w') as f:\n            json.dump(self.project_data, f, indent=4)\n        with open(self.output_file_name2, 'w') as f:\n            json.dump(self.project_meta_data, f, indent=4)\n\n\n    def get_date_limits_for_closed_issues(self, members):\n        \"\"\"\n        Palauttaa aikajakson, jolloin parametrin members j\u00e4senien issueita on suljettu.\n\n        Args:\n            members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.\n\n        Returns:\n            (tuple): Aikajakson ensimm\u00e4inen ja viimeinen p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.\n        \"\"\"\n        df = self.get_closed_issues()\n\n        # Assigneet omille riveilleen\n        df = df.explode(key_assignees)\n\n        # Suodatetaan assigneet selectorissa tehdyn valinnan mukaan\n        df = df[df[key_assignees].isin(members)]\n\n        if len(df):\n            # P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4rajat liukus\u00e4\u00e4dint\u00e4 varten\n            min_date = df[key_closed_at].min()\n            max_date = df[key_closed_at].max()\n            return min_date, max_date\n        else:\n            return 0,0\n\n\n    def get_date_limits_for_commits(self, members):\n        \"\"\"\n        Palauttaa aikajakson, jolloin parametrin members j\u00e4senet ovat tehneet committeja.\n\n        Args:\n            members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan commitit suodatetaan.\n\n        Returns:\n            (tuple): Aikajakson ensimm\u00e4inen ja viimeinen p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.\n        \"\"\"\n        df = self.get_commits(members)\n\n        if len(df):\n            # P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4rajat liukus\u00e4\u00e4dint\u00e4 varten\n            min_date = df[key_committed_date].min()\n            max_date = df[key_committed_date].max()\n            return min_date, max_date\n        else:\n            return 0,0\n\n\n    def get_closed_issues_by_date(self, members, min_date, max_date):\n        \"\"\"\n        Palauttaa dataframen suljetuista issueista p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n mukaan.\n\n        Args:\n            members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.\n            min_date (date): Aikajakson ensimm\u00e4inen piv\u00e4m\u00e4\u00e4r\u00e4.\n            max_date (date): Aikajakson viimeinen piv\u00e4m\u00e4\u00e4r\u00e4.\n\n        Returns:\n            (DataFrame): Suljetut issuet j\u00e4senten ja aikajakson mukaan suodatettuna.\n            (str): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4akselin nimi.\n            (str): Kappalem\u00e4\u00e4r\u00e4akselin nimi.\n        \"\"\"\n        df = self.get_closed_issues()\n\n        # Assigneet omille riveilleen\n        df = df.explode(key_assignees)\n\n        # Suodatetaan assigneet selectorissa tehdyn valinnan mukaan\n        df = df[df[key_assignees].isin(members)]\n\n        df[key_closed_at] = df[key_closed_at]\n\n        start_date = df[key_closed_at].min()\n        end_date = df[key_closed_at].max()\n\n        # Suodatetaan ajanjakson mukaan, jos se on m\u00e4\u00e4ritelty\n        if min_date and max_date:\n            start_date = pd.to_datetime(min_date).date()\n            end_date = pd.to_datetime(max_date).date()\n            df = df[(df[key_closed_at] &gt;= start_date) &amp; (df[key_closed_at] &lt;= end_date)]\n\n        # Ryhmitell\u00e4\u00e4n data p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n ja j\u00e4senen mukaan\n        df = df.groupby([df[key_closed_at], key_assignees]).size().unstack(fill_value=0)\n\n        if start_date and end_date and start_date != end_date:\n            # T\u00e4ydennet\u00e4\u00e4n dataframe, ett\u00e4 kaikki p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4t ajanjaksolta ovat mukana\n            date_range = pd.date_range(start=start_date, end=end_date, freq='D')\n\n            # Varmistetaan, ett\u00e4 indeksi on p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4\n            df.index = pd.to_datetime(df.index)\n\n            # T\u00e4ydennet\u00e4\u00e4n dataframe issuettomilla p\u00e4iv\u00e4m\u00e4\u00e4rill\u00e4 (puuttuvat p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4t saavat arvon 0)\n            df = df.reindex(date_range, fill_value=0)\n        else:\n            df.index = pd.to_datetime(df.index)\n\n        # Asetetaan p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 indekseiksi ja j\u00e4senet sarakkeiksi\n        df.index = df.index.strftime('%Y-%m-%d')\n\n        return df, key_date, key_pcs\n\n\n    def get_commits_by_date(self, members, min_date, max_date):\n        \"\"\"\n        Palauttaa dataframen commiteista p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n mukaan.\n\n        Args:\n            members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.\n            min_date (date): Aikajakson ensimm\u00e4inen piv\u00e4m\u00e4\u00e4r\u00e4.\n            max_date (date): Aikajakson viimeinen piv\u00e4m\u00e4\u00e4r\u00e4.\n\n        Returns:\n            (DataFrame): Commitit j\u00e4senten ja aikajakson mukaan suodatettuna.\n            (str): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4akselin nimi.\n            (str): Kappalem\u00e4\u00e4r\u00e4akselin nimi.\n        \"\"\"\n        df = self.get_commits(members)\n\n        start_date = df[key_committed_date].min()\n        end_date = df[key_committed_date].max()\n\n        # Suodatetaan ajanjakson mukaan, jos se on m\u00e4\u00e4ritelty\n        if min_date and max_date:\n            start_date = pd.to_datetime(min_date).date()\n            end_date = pd.to_datetime(max_date).date()\n            df = df[(df[key_committed_date] &gt;= start_date) &amp; (df[key_committed_date] &lt;= end_date)]\n\n        # Uudelleennimet\u00e4\u00e4n sarakkeita kaaviota varten\n        df = df.rename(columns={key_author_name: key_member, key_committed_date: key_date})\n\n        # Ryhmitell\u00e4\u00e4n data p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n ja j\u00e4senen mukaan\n        df = df.groupby([df[key_date], key_member]).size().unstack(fill_value=0)\n\n        if start_date and end_date:\n            # T\u00e4ydennet\u00e4\u00e4n dataframe, ett\u00e4 kaikki p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4t ajanjaksolta ovat mukana\n            date_range = pd.date_range(start=start_date, end=end_date, freq='D')\n\n            # Varmistetaan, ett\u00e4 indeksi on p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4\n            df.index = pd.to_datetime(df.index)\n\n            # T\u00e4ydennet\u00e4\u00e4n dataframe issuettomilla p\u00e4iv\u00e4m\u00e4\u00e4rill\u00e4 (puuttuvat p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4t saavat arvon 0)\n            df = df.reindex(date_range, fill_value=0)\n        else:\n            df.index = pd.to_datetime(df.index)\n\n        # Asetetaan p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 indekseiksi ja j\u00e4senet sarakkeiksi\n        df.index = df.index.strftime('%Y-%m-%d')\n\n        return df, key_date, key_pcs\n\n\n    def get_closed_issues_by_milestone(self, members):\n        \"\"\"\n        Palauttaa dataframen suljetuista issueista milestonejen mukaan.\n\n        Args:\n            members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.\n\n        Returns:\n            (DataFrame): Suljetut issuet j\u00e4senten mukaan suodatettuna.\n            (str): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4sarakkeen nimi.\n            (str): Kappalem\u00e4\u00e4r\u00e4sarakkeen nimi.\n            (str): J\u00e4sensarakkeen nimi.\n        \"\"\"\n        df = self.get_closed_issues()\n\n        # Assigneet omille riveilleen\n        df_exploded = df.explode(key_assignees)\n\n        # Suodatetaan j\u00e4senet\n        df_filtered = df_exploded[df_exploded[key_assignees].isin(members)]\n\n        # Lasketaan issueiden m\u00e4\u00e4r\u00e4 kullekin milestone ja assignees -yhdistelm\u00e4lle\n        grouped_data = df_filtered.groupby([key_milestone, key_assignees]).size().reset_index(name=key_pcs)\n\n        # Lis\u00e4t\u00e4\u00e4n puuttuvat milestone-assignee-yhdistelm\u00e4t\n        df_milestones = self.get_milestones()\n        all_milestones = df_milestones[key_title].unique()\n        grouped_data = (\n            grouped_data.set_index([key_milestone, key_assignees])\n            .reindex(pd.MultiIndex.from_product([all_milestones, members], names=[key_milestone, key_assignees]), fill_value=0)\n            .reset_index())\n\n        # Uudelleennimet\u00e4\u00e4n sarake\n        grouped_data = grouped_data.rename(columns={key_assignees: key_member})\n\n        # Lukum\u00e4\u00e4r\u00e4 kokonaisluvuksi\n        grouped_data[key_pcs] = grouped_data[key_pcs].astype(int)\n\n        return grouped_data, key_milestone, key_pcs, key_member\n\n\n    def get_commits_by_milestone(self, members):\n        \"\"\"\n        Palauttaa dataframen commiteista milestonejen mukaan.\n\n        Args:\n            members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan commitit suodatetaan.\n\n        Returns:\n            (DataFrame): Commitit j\u00e4senten mukaan suodatettuna.\n            (str): Milestonesarakkeen nimi.\n            (str): Kappalem\u00e4\u00e4r\u00e4sarakkeen nimi.\n            (str): J\u00e4sensarakkeen nimi.\n        \"\"\"\n        df_commits = self.get_commits(members)\n        df_milestones = self.get_milestones()\n\n        if len(df_commits) and len(df_milestones):\n            # Liitet\u00e4\u00e4n milestone commit-p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n perusteella\n            def get_milestone_for_commit(commit_date):\n                milestone = df_milestones[(df_milestones[key_start_date] &lt;= commit_date) &amp; (df_milestones[key_due_date] &gt;= commit_date)]\n                return milestone[key_title].iloc[0] if not milestone.empty else None\n\n            # Lis\u00e4t\u00e4\u00e4n tieto milestonesta committien dataframeen\n            df_commits[key_milestone] = df_commits[key_committed_date].apply(get_milestone_for_commit)\n\n            # Suodatetaan pois commitit, joille ei l\u00f6ytynyt milestonea\n            df_commits = df_commits.dropna(subset=[key_milestone])\n\n            # Lasketaan commit-m\u00e4\u00e4r\u00e4t per milestone ja j\u00e4sen\n            grouped_data = df_commits.groupby([key_milestone, key_author_name]).size().reset_index(name=key_pcs)\n\n            # Varmistetaan, ett\u00e4 data on oikeassa muodossa kaaviota varten\n            grouped_data.columns = [key_milestone, key_member, key_pcs]\n\n            # Lis\u00e4t\u00e4\u00e4n puuttuvat milestone-assignee-yhdistelm\u00e4t\n            df_milestones = self.get_milestones()\n            all_milestones = df_milestones[key_title].unique()\n            grouped_data = (\n                grouped_data.set_index([key_milestone, key_member])\n                .reindex(pd.MultiIndex.from_product([all_milestones, members], names=[key_milestone, key_member]), fill_value=0)\n                .reset_index())\n\n            # Lukum\u00e4\u00e4r\u00e4t kokonaisluvuksi\n            grouped_data[key_pcs] = grouped_data[key_pcs].astype(int)\n\n            return grouped_data, key_milestone, key_pcs, key_member\n\n        return pd.DataFrame(columns=[key_milestone, key_pcs, key_member]), key_milestone, key_pcs, key_member\n\n\n    def get_milestone_data_for_slider(self, start_date_column, end_date_column):\n        \"\"\"\n        Muodostaa milestonejen nimist\u00e4 sek\u00e4 aloitus- ja lopetusp\u00e4iv\u00e4m\u00e4\u00e4rist\u00e4 dataframen.\n\n        Args:\n            start_date_column (str): Alkup\u00e4iv\u00e4m\u00e4\u00e4r\u00e4lle asetettava sarakenimi.\n            end_date_column (str): Loppup\u00e4iv\u00e4m\u00e4\u00e4r\u00e4lle asetettava sarakenimi.\n\n        Returns:\n           (DataFrame): Milestonet alku- ja loppup\u00e4iv\u00e4m\u00e4\u00e4rineen.\n        \"\"\"\n        df = self.get_milestones()\n\n        if len(df):\n            # Varmistetaan, ett\u00e4 milestonet ovat j\u00e4rjestyksess\u00e4\n            df = df.sort_values(by=key_iid, ascending=True)\n\n            # Valitaan milestonet, jotka ovat p\u00e4\u00e4ttyneet tai aktiivinen\n            df = df[(df[key_status] == status_ended) | (df[key_status] == status_active)]\n\n            # Valitaan sarakkeet\n            df = df[[key_title, key_start_date, key_due_date]]\n\n            # UUdelleennimet\u00e4\u00e4n sarakkeita\n            df = df.rename(columns={key_start_date: start_date_column, key_due_date: end_date_column})\n\n        return df\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.__init__","title":"<code>__init__(gitlab_url, gitlab_token)</code>","text":"<p>Konstruktori</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def __init__(self, gitlab_url, gitlab_token):\n    \"\"\"\n    Konstruktori\n    \"\"\"\n    self.project_url = None         # Esim. https://gitlab.dclabra.fi/projektiopinnot-4-digitaaliset-palvelut/palikkapalvelut\n    self.api_url = None             # Esim. https://gitlab.dclabra.fi/api/v4/projects  \n    self.project_data = None        # project_data -muuttujassa m\u00e4\u00e4ritellyt tiedot api-rajapinnasta\n    self.project_meta_data = None   # projektin yleistiedot\n\n    self.access_token = gitlab_token\n    self.headers = {\"Private-Token\": self.access_token}\n    self.output_file_name = 'gitlab_data.json'\n    self.output_file_name2 = 'gitlab_meta_data.json'\n\n    self.init(gitlab_url)\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.count_active_milestones","title":"<code>count_active_milestones()</code>","text":"<p>Palauttaa aktiivisten milestonejen lukum\u00e4\u00e4r\u00e4n.</p> <p>Returns:</p> Type Description <code>int</code> <p>Projektin aktiivisten milestonejen lukum\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def count_active_milestones(self):\n    \"\"\"\n    Palauttaa aktiivisten milestonejen lukum\u00e4\u00e4r\u00e4n.\n\n    Returns:\n        (int): Projektin aktiivisten milestonejen lukum\u00e4\u00e4r\u00e4.\n    \"\"\"\n    df = self.get_milestones()\n    if len(df):\n        return len(df[df[key_status] == status_active])\n    return 0\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.count_branches","title":"<code>count_branches()</code>","text":"<p>Palauttaa branchien lukum\u00e4\u00e4r\u00e4n.</p> <p>Returns:</p> Type Description <code>int</code> <p>Projektin branchien lukum\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def count_branches(self):\n    \"\"\"\n    Palauttaa branchien lukum\u00e4\u00e4r\u00e4n.\n\n    Returns:\n        (int): Projektin branchien lukum\u00e4\u00e4r\u00e4.\n    \"\"\"\n    branches = self.get_branches()\n    return len(branches)\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.count_expired_milestones","title":"<code>count_expired_milestones()</code>","text":"<p>Palauttaa p\u00e4\u00e4ttyneiden milestonejen lukum\u00e4\u00e4r\u00e4n.</p> <p>Returns:</p> Type Description <code>int</code> <p>Projektin p\u00e4\u00e4ttyneiden milestonejen lukum\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def count_expired_milestones(self):\n    \"\"\"\n    Palauttaa p\u00e4\u00e4ttyneiden milestonejen lukum\u00e4\u00e4r\u00e4n.\n\n    Returns:\n        (int): Projektin p\u00e4\u00e4ttyneiden milestonejen lukum\u00e4\u00e4r\u00e4.\n    \"\"\"\n    df = self.get_milestones()\n    if len(df):\n        return len(df[df[key_state] == value_closed])\n    return 0\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.count_milestones","title":"<code>count_milestones()</code>","text":"<p>Palauttaa milestonejen kokonaislukum\u00e4\u00e4r\u00e4n.</p> <p>Returns:</p> Type Description <code>int</code> <p>Projektin milestonejen lukum\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def count_milestones(self):\n    \"\"\"\n    Palauttaa milestonejen kokonaislukum\u00e4\u00e4r\u00e4n.\n\n    Returns:\n        (int): Projektin milestonejen lukum\u00e4\u00e4r\u00e4.\n    \"\"\"\n    df = self.get_milestones()\n    if len(df):\n        return len(df)\n    return 0\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.count_open_issues","title":"<code>count_open_issues()</code>","text":"<p>Palauttaa avoimien issueiden lukum\u00e4\u00e4r\u00e4n.</p> <p>Returns:</p> Type Description <code>int</code> <p>Projektin avoimien issueiden lukum\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def count_open_issues(self):\n    \"\"\"\n    Palauttaa avoimien issueiden lukum\u00e4\u00e4r\u00e4n.\n\n    Returns:\n        (int): Projektin avoimien issueiden lukum\u00e4\u00e4r\u00e4.\n    \"\"\"\n    df = self.get_open_issues()\n    return len(df)\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.count_open_merge_requests","title":"<code>count_open_merge_requests()</code>","text":"<p>Palauttaa avoimien merge requestien lukum\u00e4\u00e4r\u00e4n.</p> <p>Returns:</p> Type Description <code>int</code> <p>Projektin avoimien merge requestien lukum\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def count_open_merge_requests(self):\n    \"\"\"\n    Palauttaa avoimien merge requestien lukum\u00e4\u00e4r\u00e4n.\n\n    Returns:\n        (int): Projektin avoimien merge requestien lukum\u00e4\u00e4r\u00e4.\n    \"\"\"\n    df = self.get_merge_requests()\n    if len(df):\n        return len(df[df[key_state] == value_opened])\n    else:\n        return 0\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.count_upcoming_milestones","title":"<code>count_upcoming_milestones()</code>","text":"<p>Palauttaa tulevien milestonejen lukum\u00e4\u00e4r\u00e4n.</p> <p>Returns:</p> Type Description <code>int</code> <p>Projektin tulevien milestonejen lukum\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def count_upcoming_milestones(self):\n    \"\"\"\n    Palauttaa tulevien milestonejen lukum\u00e4\u00e4r\u00e4n.\n\n    Returns:\n        (int): Projektin tulevien milestonejen lukum\u00e4\u00e4r\u00e4.\n    \"\"\"\n    df = self.get_milestones()\n    if len(df):\n        return len(df[df[key_status] == status_upcoming])\n    return 0\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.fetch_data","title":"<code>fetch_data(url, params={})</code>","text":"<p>Suorittaa hakupyynn\u00f6n GitLabin REST APIin.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Projektin GitLab-url.</p> required <code>params</code> <code>dict</code> <p>GET-kutsun parametrilista.</p> <code>{}</code> <p>Returns:</p> Type Description <code>json</code> <p>Haetut tiedot tai None.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def fetch_data(self, url, params={}):\n    \"\"\"\n    Suorittaa hakupyynn\u00f6n GitLabin REST APIin.\n\n    Args:\n        url (str): Projektin GitLab-url.\n        params (dict): GET-kutsun parametrilista.\n\n    Returns:\n        (json): Haetut tiedot tai None.\n    \"\"\"\n    response = requests.get(url, headers=self.headers, params=params)\n    if response.status_code == 200:\n        try:\n            return response.json()\n        except requests.exceptions.JSONDecodeError:\n            return None\n    else:\n        return None\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.fetch_data_with_pagination","title":"<code>fetch_data_with_pagination(url, params={})</code>","text":"<p>Suorittaa hakupyynn\u00f6n GitLabin REST APIin.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Projektin GitLab-url.</p> required <code>params</code> <code>dict</code> <p>GET-kutsun parametrilista.</p> <code>{}</code> <p>Returns:</p> Type Description <code>json</code> <p>Haetut tiedot tai None.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def fetch_data_with_pagination(self, url, params={}):\n    \"\"\"\n    Suorittaa hakupyynn\u00f6n GitLabin REST APIin.\n\n    Args:\n        url (str): Projektin GitLab-url.\n        params (dict): GET-kutsun parametrilista.\n\n    Returns:\n        (json): Haetut tiedot tai None.\n    \"\"\"\n    all_items = []\n    page = 1\n\n    while True:\n        try:\n            params = {**params, 'per_page': 100, 'page': page}\n            response = requests.get(url, headers=self.headers, params=params)\n            response.raise_for_status()\n            items = response.json()\n            if not items:\n                break\n        except requests.exceptions.HTTPError:\n            return None\n        all_items.extend(items)\n        page += 1\n\n    return all_items\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.format_date","title":"<code>format_date(orig_date)</code>","text":"<p>Palauttaa p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n muodossa pp.kk.vvvv.</p> <p>Parameters:</p> Name Type Description Default <code>orig_date</code> <code>datetime</code> <p>P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.</p> required <p>Returns:</p> Type Description <code>str</code> <p>P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n muodossa pp.kk.vvvv.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def format_date(self, orig_date):\n    \"\"\"\n    Palauttaa p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n muodossa pp.kk.vvvv.\n\n    Args:\n        orig_date (datetime): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.\n\n    Returns:\n        (str): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n muodossa pp.kk.vvvv.\n    \"\"\"\n    return datetime.strptime(orig_date[:10], \"%Y-%m-%d\").strftime(\"%d.%m.%Y\")\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.generate_api_url","title":"<code>generate_api_url(project_url)</code>","text":"<p>Muodostaa GitLab-projektin url-osoitteesta kyseisen GitLab-instanssin REST API -osoitteen.</p> <p>Parameters:</p> Name Type Description Default <code>project_url</code> <code>str</code> <p>Projektin GitLab-url.</p> required <p>Returns:</p> Type Description <code>str</code> <p>GitLabin REST API -osoite.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def generate_api_url(self, project_url):\n    \"\"\"\n    Muodostaa GitLab-projektin url-osoitteesta kyseisen GitLab-instanssin REST API -osoitteen.\n\n    Args:\n        project_url (str): Projektin GitLab-url.\n\n    Returns:\n        (str): GitLabin REST API -osoite.\n    \"\"\"\n    # Erotetaan is\u00e4nt\u00e4nimi esim. \"https://gitlab.com\" tai \"https://your-gitlab-instance.com\"\n    pattern = r'^(https://[^/]+)/(.*)$'\n    match = re.match(pattern, project_url)\n    if match:\n        host = match.group(1)\n        return f\"{host}/api/v4/projects\"\n    return None\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_assignees","title":"<code>get_assignees()</code>","text":"<p>Palauttaa listan uniikeista henkil\u00f6nimist\u00e4, jotka on ker\u00e4tty projektin issueista ja commiteista.</p> <p>Returns:</p> Type Description <code>list</code> <p>Lista uniikeista henkil\u00f6nimist\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_assignees(self):\n    \"\"\"\n    Palauttaa listan uniikeista henkil\u00f6nimist\u00e4, jotka on ker\u00e4tty projektin issueista ja commiteista.\n\n    Returns:\n        (list): Lista uniikeista henkil\u00f6nimist\u00e4.\n    \"\"\"\n    issue_members = []\n    commit_members = []\n    issues = self.get_issues()\n    commits = self.get_commits()\n\n    if not issues.empty:\n        issue_members = issues.explode(key_assignees)[key_assignees].unique().tolist()\n\n    if not commits.empty:\n        commit_members = commits[key_author_name].unique().tolist()\n\n    return sorted(set(issue_members + commit_members))\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_avatar","title":"<code>get_avatar()</code>","text":"<p>Palauttaa projektin avattaren urlin.</p> <p>Returns:</p> Type Description <code>str</code> <p>Projektin avattaren url.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_avatar(self):\n    \"\"\"\n    Palauttaa projektin avattaren urlin.\n\n    Returns:\n        (str): Projektin avattaren url.\n    \"\"\"\n    url = self.get_meta_data(key_avatar)\n    return url if url else None\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_branches","title":"<code>get_branches()</code>","text":"<p>Palauttaa branchien tiedot dataframena.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Projektin branchit.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_branches(self):\n    \"\"\"\n    Palauttaa branchien tiedot dataframena.\n\n    Returns:\n        (DataFrame): Projektin branchit.\n    \"\"\"\n    branches = self.get_data(key_branches)\n    if branches:\n        df = pd.DataFrame(branches)\n        return df\n    return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_closed_issues","title":"<code>get_closed_issues()</code>","text":"<p>Palauttaa suljetut issuet.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Projektin suljetut issuet.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_closed_issues(self):\n    \"\"\"\n    Palauttaa suljetut issuet.\n\n    Returns:\n        (DataFrame): Projektin suljetut issuet.\n    \"\"\"\n    df = self.get_issues()\n    if not df.empty:\n        df = df[df[key_state] == value_closed]\n        return df\n    return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_closed_issues_by_date","title":"<code>get_closed_issues_by_date(members, min_date, max_date)</code>","text":"<p>Palauttaa dataframen suljetuista issueista p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n mukaan.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.</p> required <code>min_date</code> <code>date</code> <p>Aikajakson ensimm\u00e4inen piv\u00e4m\u00e4\u00e4r\u00e4.</p> required <code>max_date</code> <code>date</code> <p>Aikajakson viimeinen piv\u00e4m\u00e4\u00e4r\u00e4.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Suljetut issuet j\u00e4senten ja aikajakson mukaan suodatettuna.</p> <code>str</code> <p>P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4akselin nimi.</p> <code>str</code> <p>Kappalem\u00e4\u00e4r\u00e4akselin nimi.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_closed_issues_by_date(self, members, min_date, max_date):\n    \"\"\"\n    Palauttaa dataframen suljetuista issueista p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n mukaan.\n\n    Args:\n        members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.\n        min_date (date): Aikajakson ensimm\u00e4inen piv\u00e4m\u00e4\u00e4r\u00e4.\n        max_date (date): Aikajakson viimeinen piv\u00e4m\u00e4\u00e4r\u00e4.\n\n    Returns:\n        (DataFrame): Suljetut issuet j\u00e4senten ja aikajakson mukaan suodatettuna.\n        (str): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4akselin nimi.\n        (str): Kappalem\u00e4\u00e4r\u00e4akselin nimi.\n    \"\"\"\n    df = self.get_closed_issues()\n\n    # Assigneet omille riveilleen\n    df = df.explode(key_assignees)\n\n    # Suodatetaan assigneet selectorissa tehdyn valinnan mukaan\n    df = df[df[key_assignees].isin(members)]\n\n    df[key_closed_at] = df[key_closed_at]\n\n    start_date = df[key_closed_at].min()\n    end_date = df[key_closed_at].max()\n\n    # Suodatetaan ajanjakson mukaan, jos se on m\u00e4\u00e4ritelty\n    if min_date and max_date:\n        start_date = pd.to_datetime(min_date).date()\n        end_date = pd.to_datetime(max_date).date()\n        df = df[(df[key_closed_at] &gt;= start_date) &amp; (df[key_closed_at] &lt;= end_date)]\n\n    # Ryhmitell\u00e4\u00e4n data p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n ja j\u00e4senen mukaan\n    df = df.groupby([df[key_closed_at], key_assignees]).size().unstack(fill_value=0)\n\n    if start_date and end_date and start_date != end_date:\n        # T\u00e4ydennet\u00e4\u00e4n dataframe, ett\u00e4 kaikki p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4t ajanjaksolta ovat mukana\n        date_range = pd.date_range(start=start_date, end=end_date, freq='D')\n\n        # Varmistetaan, ett\u00e4 indeksi on p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4\n        df.index = pd.to_datetime(df.index)\n\n        # T\u00e4ydennet\u00e4\u00e4n dataframe issuettomilla p\u00e4iv\u00e4m\u00e4\u00e4rill\u00e4 (puuttuvat p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4t saavat arvon 0)\n        df = df.reindex(date_range, fill_value=0)\n    else:\n        df.index = pd.to_datetime(df.index)\n\n    # Asetetaan p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 indekseiksi ja j\u00e4senet sarakkeiksi\n    df.index = df.index.strftime('%Y-%m-%d')\n\n    return df, key_date, key_pcs\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_closed_issues_by_milestone","title":"<code>get_closed_issues_by_milestone(members)</code>","text":"<p>Palauttaa dataframen suljetuista issueista milestonejen mukaan.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Suljetut issuet j\u00e4senten mukaan suodatettuna.</p> <code>str</code> <p>P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4sarakkeen nimi.</p> <code>str</code> <p>Kappalem\u00e4\u00e4r\u00e4sarakkeen nimi.</p> <code>str</code> <p>J\u00e4sensarakkeen nimi.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_closed_issues_by_milestone(self, members):\n    \"\"\"\n    Palauttaa dataframen suljetuista issueista milestonejen mukaan.\n\n    Args:\n        members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.\n\n    Returns:\n        (DataFrame): Suljetut issuet j\u00e4senten mukaan suodatettuna.\n        (str): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4sarakkeen nimi.\n        (str): Kappalem\u00e4\u00e4r\u00e4sarakkeen nimi.\n        (str): J\u00e4sensarakkeen nimi.\n    \"\"\"\n    df = self.get_closed_issues()\n\n    # Assigneet omille riveilleen\n    df_exploded = df.explode(key_assignees)\n\n    # Suodatetaan j\u00e4senet\n    df_filtered = df_exploded[df_exploded[key_assignees].isin(members)]\n\n    # Lasketaan issueiden m\u00e4\u00e4r\u00e4 kullekin milestone ja assignees -yhdistelm\u00e4lle\n    grouped_data = df_filtered.groupby([key_milestone, key_assignees]).size().reset_index(name=key_pcs)\n\n    # Lis\u00e4t\u00e4\u00e4n puuttuvat milestone-assignee-yhdistelm\u00e4t\n    df_milestones = self.get_milestones()\n    all_milestones = df_milestones[key_title].unique()\n    grouped_data = (\n        grouped_data.set_index([key_milestone, key_assignees])\n        .reindex(pd.MultiIndex.from_product([all_milestones, members], names=[key_milestone, key_assignees]), fill_value=0)\n        .reset_index())\n\n    # Uudelleennimet\u00e4\u00e4n sarake\n    grouped_data = grouped_data.rename(columns={key_assignees: key_member})\n\n    # Lukum\u00e4\u00e4r\u00e4 kokonaisluvuksi\n    grouped_data[key_pcs] = grouped_data[key_pcs].astype(int)\n\n    return grouped_data, key_milestone, key_pcs, key_member\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_commits","title":"<code>get_commits(members=None)</code>","text":"<p>Palauttaa committien tiedot dataframena. Suodatetaan j\u00e4senten mukaan, jos j\u00e4senet m\u00e4\u00e4ritelty parametrissa.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista j\u00e4senten nimist\u00e4, joiden mukaan tiedot suodatetaan.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>J\u00e4senten commitit.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_commits(self, members=None):\n    \"\"\"\n    Palauttaa committien tiedot dataframena.\n    Suodatetaan j\u00e4senten mukaan, jos j\u00e4senet m\u00e4\u00e4ritelty parametrissa.\n\n    Args:\n        members (list, optional): Lista j\u00e4senten nimist\u00e4, joiden mukaan tiedot suodatetaan.\n\n    Returns:\n        (DataFrame): J\u00e4senten commitit.\n    \"\"\"\n    commits = self.get_data(key_commits)\n    if commits:\n        df = pd.DataFrame(commits)\n\n        if not df.empty:\n            # Suodatetaan j\u00e4senten mukaan\n            if members:\n                df = df[df[key_author_name].isin(members)]\n\n            # P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4formaatti\n            df = cl.format_time_columns(df, [key_committed_date])\n\n            # Valitaan sarakkeet\n            df = df[[key_title, key_message, key_author_name, key_committed_date]]\n\n        return df\n    return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_commits_by_date","title":"<code>get_commits_by_date(members, min_date, max_date)</code>","text":"<p>Palauttaa dataframen commiteista p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n mukaan.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.</p> required <code>min_date</code> <code>date</code> <p>Aikajakson ensimm\u00e4inen piv\u00e4m\u00e4\u00e4r\u00e4.</p> required <code>max_date</code> <code>date</code> <p>Aikajakson viimeinen piv\u00e4m\u00e4\u00e4r\u00e4.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Commitit j\u00e4senten ja aikajakson mukaan suodatettuna.</p> <code>str</code> <p>P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4akselin nimi.</p> <code>str</code> <p>Kappalem\u00e4\u00e4r\u00e4akselin nimi.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_commits_by_date(self, members, min_date, max_date):\n    \"\"\"\n    Palauttaa dataframen commiteista p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n mukaan.\n\n    Args:\n        members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.\n        min_date (date): Aikajakson ensimm\u00e4inen piv\u00e4m\u00e4\u00e4r\u00e4.\n        max_date (date): Aikajakson viimeinen piv\u00e4m\u00e4\u00e4r\u00e4.\n\n    Returns:\n        (DataFrame): Commitit j\u00e4senten ja aikajakson mukaan suodatettuna.\n        (str): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4akselin nimi.\n        (str): Kappalem\u00e4\u00e4r\u00e4akselin nimi.\n    \"\"\"\n    df = self.get_commits(members)\n\n    start_date = df[key_committed_date].min()\n    end_date = df[key_committed_date].max()\n\n    # Suodatetaan ajanjakson mukaan, jos se on m\u00e4\u00e4ritelty\n    if min_date and max_date:\n        start_date = pd.to_datetime(min_date).date()\n        end_date = pd.to_datetime(max_date).date()\n        df = df[(df[key_committed_date] &gt;= start_date) &amp; (df[key_committed_date] &lt;= end_date)]\n\n    # Uudelleennimet\u00e4\u00e4n sarakkeita kaaviota varten\n    df = df.rename(columns={key_author_name: key_member, key_committed_date: key_date})\n\n    # Ryhmitell\u00e4\u00e4n data p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n ja j\u00e4senen mukaan\n    df = df.groupby([df[key_date], key_member]).size().unstack(fill_value=0)\n\n    if start_date and end_date:\n        # T\u00e4ydennet\u00e4\u00e4n dataframe, ett\u00e4 kaikki p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4t ajanjaksolta ovat mukana\n        date_range = pd.date_range(start=start_date, end=end_date, freq='D')\n\n        # Varmistetaan, ett\u00e4 indeksi on p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4\n        df.index = pd.to_datetime(df.index)\n\n        # T\u00e4ydennet\u00e4\u00e4n dataframe issuettomilla p\u00e4iv\u00e4m\u00e4\u00e4rill\u00e4 (puuttuvat p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4t saavat arvon 0)\n        df = df.reindex(date_range, fill_value=0)\n    else:\n        df.index = pd.to_datetime(df.index)\n\n    # Asetetaan p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 indekseiksi ja j\u00e4senet sarakkeiksi\n    df.index = df.index.strftime('%Y-%m-%d')\n\n    return df, key_date, key_pcs\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_commits_by_milestone","title":"<code>get_commits_by_milestone(members)</code>","text":"<p>Palauttaa dataframen commiteista milestonejen mukaan.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista j\u00e4senten nimist\u00e4, joiden mukaan commitit suodatetaan.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Commitit j\u00e4senten mukaan suodatettuna.</p> <code>str</code> <p>Milestonesarakkeen nimi.</p> <code>str</code> <p>Kappalem\u00e4\u00e4r\u00e4sarakkeen nimi.</p> <code>str</code> <p>J\u00e4sensarakkeen nimi.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_commits_by_milestone(self, members):\n    \"\"\"\n    Palauttaa dataframen commiteista milestonejen mukaan.\n\n    Args:\n        members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan commitit suodatetaan.\n\n    Returns:\n        (DataFrame): Commitit j\u00e4senten mukaan suodatettuna.\n        (str): Milestonesarakkeen nimi.\n        (str): Kappalem\u00e4\u00e4r\u00e4sarakkeen nimi.\n        (str): J\u00e4sensarakkeen nimi.\n    \"\"\"\n    df_commits = self.get_commits(members)\n    df_milestones = self.get_milestones()\n\n    if len(df_commits) and len(df_milestones):\n        # Liitet\u00e4\u00e4n milestone commit-p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n perusteella\n        def get_milestone_for_commit(commit_date):\n            milestone = df_milestones[(df_milestones[key_start_date] &lt;= commit_date) &amp; (df_milestones[key_due_date] &gt;= commit_date)]\n            return milestone[key_title].iloc[0] if not milestone.empty else None\n\n        # Lis\u00e4t\u00e4\u00e4n tieto milestonesta committien dataframeen\n        df_commits[key_milestone] = df_commits[key_committed_date].apply(get_milestone_for_commit)\n\n        # Suodatetaan pois commitit, joille ei l\u00f6ytynyt milestonea\n        df_commits = df_commits.dropna(subset=[key_milestone])\n\n        # Lasketaan commit-m\u00e4\u00e4r\u00e4t per milestone ja j\u00e4sen\n        grouped_data = df_commits.groupby([key_milestone, key_author_name]).size().reset_index(name=key_pcs)\n\n        # Varmistetaan, ett\u00e4 data on oikeassa muodossa kaaviota varten\n        grouped_data.columns = [key_milestone, key_member, key_pcs]\n\n        # Lis\u00e4t\u00e4\u00e4n puuttuvat milestone-assignee-yhdistelm\u00e4t\n        df_milestones = self.get_milestones()\n        all_milestones = df_milestones[key_title].unique()\n        grouped_data = (\n            grouped_data.set_index([key_milestone, key_member])\n            .reindex(pd.MultiIndex.from_product([all_milestones, members], names=[key_milestone, key_member]), fill_value=0)\n            .reset_index())\n\n        # Lukum\u00e4\u00e4r\u00e4t kokonaisluvuksi\n        grouped_data[key_pcs] = grouped_data[key_pcs].astype(int)\n\n        return grouped_data, key_milestone, key_pcs, key_member\n\n    return pd.DataFrame(columns=[key_milestone, key_pcs, key_member]), key_milestone, key_pcs, key_member\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_creation_date","title":"<code>get_creation_date()</code>","text":"<p>Palauttaa projektin luontip\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n formaatissa pp.kk.vvvv.</p> <p>Returns:</p> Type Description <code>date</code> <p>Projektin luontip\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_creation_date(self):\n    \"\"\"\n    Palauttaa projektin luontip\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n formaatissa pp.kk.vvvv.\n\n    Returns:\n        (date): Projektin luontip\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.\n    \"\"\"\n    return self.format_date(self.get_meta_data(key_created_at))\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_data","title":"<code>get_data(data_type)</code>","text":"<p>Palauttaa parametrina m\u00e4\u00e4ritellyn arvon projektin datasta.</p> <p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>str</code> <p>Pyydetyn tietokent\u00e4n nimi.</p> required Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_data(self, data_type):\n    \"\"\"\n    Palauttaa parametrina m\u00e4\u00e4ritellyn arvon projektin datasta.\n\n    Args:\n        data_type (str): Pyydetyn tietokent\u00e4n nimi.\n    \"\"\"\n    return self.project_data[data_type] if self.project_data else None\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_date_limits_for_closed_issues","title":"<code>get_date_limits_for_closed_issues(members)</code>","text":"<p>Palauttaa aikajakson, jolloin parametrin members j\u00e4senien issueita on suljettu.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>Aikajakson ensimm\u00e4inen ja viimeinen p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_date_limits_for_closed_issues(self, members):\n    \"\"\"\n    Palauttaa aikajakson, jolloin parametrin members j\u00e4senien issueita on suljettu.\n\n    Args:\n        members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan issuet suodatetaan.\n\n    Returns:\n        (tuple): Aikajakson ensimm\u00e4inen ja viimeinen p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.\n    \"\"\"\n    df = self.get_closed_issues()\n\n    # Assigneet omille riveilleen\n    df = df.explode(key_assignees)\n\n    # Suodatetaan assigneet selectorissa tehdyn valinnan mukaan\n    df = df[df[key_assignees].isin(members)]\n\n    if len(df):\n        # P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4rajat liukus\u00e4\u00e4dint\u00e4 varten\n        min_date = df[key_closed_at].min()\n        max_date = df[key_closed_at].max()\n        return min_date, max_date\n    else:\n        return 0,0\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_date_limits_for_commits","title":"<code>get_date_limits_for_commits(members)</code>","text":"<p>Palauttaa aikajakson, jolloin parametrin members j\u00e4senet ovat tehneet committeja.</p> <p>Parameters:</p> Name Type Description Default <code>members</code> <code>list</code> <p>Lista j\u00e4senten nimist\u00e4, joiden mukaan commitit suodatetaan.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>Aikajakson ensimm\u00e4inen ja viimeinen p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_date_limits_for_commits(self, members):\n    \"\"\"\n    Palauttaa aikajakson, jolloin parametrin members j\u00e4senet ovat tehneet committeja.\n\n    Args:\n        members (list): Lista j\u00e4senten nimist\u00e4, joiden mukaan commitit suodatetaan.\n\n    Returns:\n        (tuple): Aikajakson ensimm\u00e4inen ja viimeinen p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.\n    \"\"\"\n    df = self.get_commits(members)\n\n    if len(df):\n        # P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4rajat liukus\u00e4\u00e4dint\u00e4 varten\n        min_date = df[key_committed_date].min()\n        max_date = df[key_committed_date].max()\n        return min_date, max_date\n    else:\n        return 0,0\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_description","title":"<code>get_description()</code>","text":"<p>Palauttaa projektin kuvauksen.</p> <p>Returns:</p> Type Description <code>str</code> <p>Projektin kuvaus.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_description(self):\n    \"\"\"\n    Palauttaa projektin kuvauksen.\n\n    Returns:\n        (str): Projektin kuvaus.\n    \"\"\"\n    return self.get_meta_data(key_desc)\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_id","title":"<code>get_id()</code>","text":"<p>Palauttaa projektin id:n.</p> <p>Returns:</p> Type Description <code>str</code> <p>Projektin id</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_id(self):\n    \"\"\"\n    Palauttaa projektin id:n.\n\n    Returns:\n        (str): Projektin id\n    \"\"\"\n    return self.get_meta_data(key_id)\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_issues","title":"<code>get_issues()</code>","text":"<p>Palauttaa issuetiedot dataframena.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Projektin kaikki issuet.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_issues(self):\n    \"\"\"\n    Palauttaa issuetiedot dataframena.\n\n    Returns:\n        (DataFrame): Projektin kaikki issuet.\n    \"\"\"\n    issues = self.get_data(key_issues)\n    if issues:\n        df = pd.DataFrame(issues)\n\n        if not df.empty:\n            # P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4formaatti\n            df = cl.format_time_columns(df, [key_closed_at])\n\n            # Pelkistet\u00e4\u00e4n assignees listaksi nimist\u00e4, jos se ei ole tyhj\u00e4\n            df[key_assignees] = df[key_assignees].apply(lambda x: [assignee[key_name] for assignee in x] if isinstance(x, list) and x else None)\n\n            # Pelkistet\u00e4\u00e4n milestone titleksi, jos milestone on sanakirja ja siin\u00e4 on title-avain\n            df[key_milestone] = df[key_milestone].apply(lambda x: x.get(key_title) if isinstance(x, dict) and key_title in x else None)\n\n            # Valitaan sarakkeet\n            df = df[[key_iid, key_title, key_desc, key_state, key_assignees, key_milestone, key_closed_at]]\n\n        return df\n    return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_labels","title":"<code>get_labels()</code>","text":"<p>Palauttaa labelien tiedot dataframena.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Projektin labelit.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_labels(self):\n    \"\"\"\n    Palauttaa labelien tiedot dataframena.\n\n    Returns:\n        (DataFrame): Projektin labelit.\n    \"\"\"\n    labels = self.get_data(key_labels)\n    if labels:\n        df = pd.DataFrame(labels)\n        return df\n    return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_merge_requests","title":"<code>get_merge_requests()</code>","text":"<p>Palauttaa merge requestien tiedot dataframena.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Projektin avoimet merge requestit.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_merge_requests(self):\n    \"\"\"\n    Palauttaa merge requestien tiedot dataframena.\n\n    Returns:\n        (DataFrame): Projektin avoimet merge requestit.\n    \"\"\"\n    merge_requests = self.get_data(key_merge_requests)\n    if merge_requests:\n        df = pd.DataFrame(merge_requests)\n        return df\n    return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_meta_data","title":"<code>get_meta_data(data_type)</code>","text":"<p>Palauttaa parametrina m\u00e4\u00e4ritellyn arvon projektin metadatasta.</p> <p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>str</code> <p>Pyydetyn tietokent\u00e4n nimi.</p> required Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_meta_data(self, data_type):\n    \"\"\"\n    Palauttaa parametrina m\u00e4\u00e4ritellyn arvon projektin metadatasta.\n\n    Args:\n        data_type (str): Pyydetyn tietokent\u00e4n nimi.\n    \"\"\"\n    return self.project_meta_data[data_type] if self.project_meta_data else None\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_milestone_data_for_slider","title":"<code>get_milestone_data_for_slider(start_date_column, end_date_column)</code>","text":"<p>Muodostaa milestonejen nimist\u00e4 sek\u00e4 aloitus- ja lopetusp\u00e4iv\u00e4m\u00e4\u00e4rist\u00e4 dataframen.</p> <p>Parameters:</p> Name Type Description Default <code>start_date_column</code> <code>str</code> <p>Alkup\u00e4iv\u00e4m\u00e4\u00e4r\u00e4lle asetettava sarakenimi.</p> required <code>end_date_column</code> <code>str</code> <p>Loppup\u00e4iv\u00e4m\u00e4\u00e4r\u00e4lle asetettava sarakenimi.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Milestonet alku- ja loppup\u00e4iv\u00e4m\u00e4\u00e4rineen.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_milestone_data_for_slider(self, start_date_column, end_date_column):\n    \"\"\"\n    Muodostaa milestonejen nimist\u00e4 sek\u00e4 aloitus- ja lopetusp\u00e4iv\u00e4m\u00e4\u00e4rist\u00e4 dataframen.\n\n    Args:\n        start_date_column (str): Alkup\u00e4iv\u00e4m\u00e4\u00e4r\u00e4lle asetettava sarakenimi.\n        end_date_column (str): Loppup\u00e4iv\u00e4m\u00e4\u00e4r\u00e4lle asetettava sarakenimi.\n\n    Returns:\n       (DataFrame): Milestonet alku- ja loppup\u00e4iv\u00e4m\u00e4\u00e4rineen.\n    \"\"\"\n    df = self.get_milestones()\n\n    if len(df):\n        # Varmistetaan, ett\u00e4 milestonet ovat j\u00e4rjestyksess\u00e4\n        df = df.sort_values(by=key_iid, ascending=True)\n\n        # Valitaan milestonet, jotka ovat p\u00e4\u00e4ttyneet tai aktiivinen\n        df = df[(df[key_status] == status_ended) | (df[key_status] == status_active)]\n\n        # Valitaan sarakkeet\n        df = df[[key_title, key_start_date, key_due_date]]\n\n        # UUdelleennimet\u00e4\u00e4n sarakkeita\n        df = df.rename(columns={key_start_date: start_date_column, key_due_date: end_date_column})\n\n    return df\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_milestones","title":"<code>get_milestones()</code>","text":"<p>Palauttaa milestonetiedot dataframena.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Projektin milestonet.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_milestones(self):\n    \"\"\"\n    Palauttaa milestonetiedot dataframena.\n\n    Returns:\n        (DataFrame): Projektin milestonet.\n    \"\"\"\n    milestones = self.get_data(key_milestones)\n    if milestones:\n        df = pd.DataFrame(milestones)\n\n        if not df.empty:\n            # P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4formaatti\n            df = cl.format_time_columns(df, [key_start_date, key_due_date])\n\n            # Poistetaan rivit, joilla ei ole p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4tietoa\n            df = df.dropna(subset=[key_due_date, key_start_date])\n\n            if len(df):\n                # J\u00e4rjestet\u00e4\u00e4n aikaj\u00e4rjestykseen\n                df = df.sort_values(by=key_start_date)\n\n                # Lis\u00e4t\u00e4\u00e4n status \"P\u00e4\u00e4ttynyt\", \"Aktiivinen\", tai \"Tuleva\"\n                today = datetime.now().date()\n\n                def milestone_status(row):\n                    if row[key_state] == value_closed or row[key_due_date] &lt; today:\n                        return status_ended\n                    elif row[key_start_date] &lt;= today &lt;= row[key_due_date]:\n                        return status_active\n                    elif row[key_due_date] &gt; today:\n                        return status_upcoming\n                    else:\n                        return \"EOS\"\n\n                df[key_status] = df.apply(milestone_status, axis=1)\n\n                # Valitaan sarakkeet\n                df = df[[key_iid, key_title, key_desc, key_state, key_due_date, key_start_date, key_status]]\n\n        return df\n    return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_name","title":"<code>get_name()</code>","text":"<p>Palauttaa projektin nimen.</p> <p>Returns:</p> Type Description <code>str</code> <p>Projektin nimi.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_name(self):\n    \"\"\"\n    Palauttaa projektin nimen.\n\n    Returns:\n        (str): Projektin nimi.\n    \"\"\"\n    return self.get_meta_data(key_name)\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_namespace_name","title":"<code>get_namespace_name()</code>","text":"<p>Palauttaa projektin nimiavaruuden nimen.</p> <p>Returns:</p> Type Description <code>str</code> <p>Projektin nimiavaruuden nimi.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_namespace_name(self):\n    \"\"\"\n    Palauttaa projektin nimiavaruuden nimen.\n\n    Returns:\n        (str): Projektin nimiavaruuden nimi.\n    \"\"\"\n    namespace = self.get_meta_data(key_namespace)\n    if namespace:\n        return namespace[key_name]\n    return None\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_open_issues","title":"<code>get_open_issues()</code>","text":"<p>Palauttaa avoimet issuet.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Projektin avoimet issuet.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_open_issues(self):\n    \"\"\"\n    Palauttaa avoimet issuet.\n\n    Returns:\n        (DataFrame): Projektin avoimet issuet.\n    \"\"\"\n    df = self.get_issues()\n    if not df.empty:\n        df = df[df[key_state] == value_opened]\n        return df\n    return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_pipelines","title":"<code>get_pipelines()</code>","text":"<p>Palauttaa pipelinejen tiedot dataframena.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Projektin pipelinet.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_pipelines(self):\n    \"\"\"\n    Palauttaa pipelinejen tiedot dataframena.\n\n    Returns:\n        (DataFrame): Projektin pipelinet.\n    \"\"\"\n    pipelines = self.get_data(key_pipelines)\n    if pipelines:\n        df = pd.DataFrame(pipelines)\n        return df\n    return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_project_data","title":"<code>get_project_data()</code>","text":"<p>Hakee projektin tiedot oliolle.</p> <p>Returns:</p> Type Description <code>json</code> <p>Projektin tiedot.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_project_data(self):\n    \"\"\"\n    Hakee projektin tiedot oliolle.\n\n    Returns:\n        (json): Projektin tiedot.\n    \"\"\"\n    all_data = {}\n\n    for data_type in project_data:\n        if data_type == key_commits or data_type == key_branches:\n            url = f\"{self.api_url}/{self.get_id()}/repository/{data_type}\"\n        else:\n            url = f\"{self.api_url}/{self.get_id()}/{data_type}\"\n        all_data[data_type] = self.fetch_data_with_pagination(url)\n\n    return all_data\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_project_meta_data","title":"<code>get_project_meta_data()</code>","text":"<p>Hakee projektin yleistiedot oliolle.</p> <p>Returns:</p> Type Description <code>json</code> <p>Projektin metatiedot.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_project_meta_data(self):\n    \"\"\"\n    Hakee projektin yleistiedot oliolle.\n\n    Returns:\n        (json): Projektin metatiedot.\n    \"\"\"\n    if not self.project_url:\n        return None    \n\n    project_data = None\n\n    match = re.search(r\"^https://[^/]+/(.*)\", self.project_url)\n    project_path = match.group(1) if match else None\n    if project_path:\n        encoded_path = quote(project_path, safe=\"\")\n        url = f\"{self.api_url}/{encoded_path}\"\n        project_data = self.fetch_data(url)\n\n    return project_data\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_project_url","title":"<code>get_project_url()</code>","text":"<p>Palauttaa projektin urlin.</p> <p>Returns:</p> Type Description <code>str</code> <p>Projektin url.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_project_url(self):\n    \"\"\"\n    Palauttaa projektin urlin.\n\n    Returns:\n        (str): Projektin url.\n    \"\"\"\n    return self.project_url\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_readiness_issues","title":"<code>get_readiness_issues()</code>","text":"<p>Palauttaa projektin valmiusasteen issueiden mukaan.</p> <p>Returns:</p> Type Description <code>int</code> <p>Projektin issuetason valmiusaste kokonaislukuprosenttina.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_readiness_issues(self):\n    \"\"\"\n    Palauttaa projektin valmiusasteen issueiden mukaan.\n\n    Returns:\n        (int): Projektin issuetason valmiusaste kokonaislukuprosenttina.\n    \"\"\"\n    all_issues = len(self.get_issues())\n    closed = len(self.get_closed_issues())\n    if all_issues and closed:\n        return round((closed / all_issues) * 100)\n    return 0\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_readiness_ml","title":"<code>get_readiness_ml()</code>","text":"<p>Palauttaa projektin valmiusasteen milestonejen mukaan.</p> <p>Returns:</p> Type Description <code>int</code> <p>Projektin milestonetason valmiusaste kokonaislukuprosenttina.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_readiness_ml(self):\n    \"\"\"\n    Palauttaa projektin valmiusasteen milestonejen mukaan.\n\n    Returns:\n        (int): Projektin milestonetason valmiusaste kokonaislukuprosenttina.\n    \"\"\"\n    expired = self.count_expired_milestones()\n    all_milestones = self.count_milestones()\n    if expired and all_milestones:\n        return round((expired / all_milestones) * 100)\n    return 0\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_update_date","title":"<code>get_update_date()</code>","text":"<p>Palauttaa projektin viimeisimm\u00e4n p\u00e4ivitysp\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n formaatissa pp.kk.vvvv.</p> <p>Returns:</p> Type Description <code>date</code> <p>Projektin luontip\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_update_date(self):\n    \"\"\"\n    Palauttaa projektin viimeisimm\u00e4n p\u00e4ivitysp\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n formaatissa pp.kk.vvvv.\n\n    Returns:\n        (date): Projektin luontip\u00e4iv\u00e4m\u00e4\u00e4r\u00e4.\n    \"\"\"\n    return self.format_date(self.get_meta_data(key_updated))\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.get_visibility","title":"<code>get_visibility()</code>","text":"<p>Palauttaa projektin n\u00e4kyvyyden.</p> <p>Returns:</p> Type Description <code>str</code> <p>Projektin n\u00e4kyvyys.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def get_visibility(self):\n    \"\"\"\n    Palauttaa projektin n\u00e4kyvyyden.\n\n    Returns:\n        (str): Projektin n\u00e4kyvyys.\n    \"\"\"\n    return self.get_meta_data(key_visibility)\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.init","title":"<code>init(url)</code>","text":"<p>Hakee projektin tiedot GitLabista ja asettaa ne oliolle.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Projektin GitLab-url.</p> required Source code in <code>src\\gitlab_api.py</code> <pre><code>def init(self, url):\n    \"\"\"\n    Hakee projektin tiedot GitLabista ja asettaa ne oliolle.\n\n    Args:\n        url (str): Projektin GitLab-url.\n    \"\"\"\n    if cl.validate_url(url):\n        api_url = self.generate_api_url(url)\n        if api_url:\n            data_json = self.fetch_data(api_url)\n            if data_json:\n                self.project_url = url\n                self.api_url = api_url\n                self.project_meta_data = self.get_project_meta_data()\n                self.project_data = self.get_project_data()\n\n                if not self.project_meta_data or not self.project_data:\n                    self.reset()\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.reset","title":"<code>reset()</code>","text":"<p>Resetoi olion tiedot.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def reset(self):\n    \"\"\"\n    Resetoi olion tiedot.\n    \"\"\"\n    self.project_url = None\n    self.api_url = None\n    self.project_data = None\n    self.project_meta_data = None\n</code></pre>"},{"location":"modules_api_reference/#src.gitlab_api.ProjectData.save_data_to_file","title":"<code>save_data_to_file()</code>","text":"<p>Tallentaa projektin tiedot tiedostoon json-formaatissa.</p> Source code in <code>src\\gitlab_api.py</code> <pre><code>def save_data_to_file(self):\n    \"\"\"\n    Tallentaa projektin tiedot tiedostoon json-formaatissa.\n    \"\"\"\n    with open(self.output_file_name, 'w') as f:\n        json.dump(self.project_data, f, indent=4)\n    with open(self.output_file_name2, 'w') as f:\n        json.dump(self.project_meta_data, f, indent=4)\n</code></pre>"},{"location":"modules_api_reference/#clockify-integraatio","title":"Clockify-integraatio","text":"<p>Dokumentaatio <code>clockify_api.py</code> -moduulista, joka sis\u00e4lt\u00e4\u00e4 luokan Clockifyn tietojen hakuun ja k\u00e4sittelyyn.</p> <p>RepoRouskun rajapinta, joka hakee tiedot Clockifyn APIsta. Sis\u00e4lt\u00e4\u00e4 ClockifyData-luokan, joka kapseloi ty\u00f6tuntitiedot ja tarjoaa  palveluinaan pureskeltua dataa k\u00e4ytt\u00f6liittym\u00e4\u00e4 varten.</p>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData","title":"<code>ClockifyData</code>","text":"<p>Luokka Clockifyn tietojen hakemiseen ja k\u00e4sittelyyn.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>class ClockifyData:\n    \"\"\"\n    Luokka Clockifyn tietojen hakemiseen ja k\u00e4sittelyyn.\n    \"\"\"\n    def __init__(self, clockify_url, api_key=None):\n        self.clockify_url = clockify_url\n        self.workspace_id = None\n        self.project_id = None\n        self.user_id = None\n        self.api_key = api_key or os.getenv(\"CLOCKIFY_TOKEN\")\n        self.headers = {\"X-Api-Key\": self.api_key}\n\n        if not self.api_key:\n            raise ValueError(\"CLOCKIFY_TOKEN ymp\u00e4rist\u00f6muuttujaa ei ole asetettu!\")\n\n        self.init(clockify_url)\n\n    def init(self, clockify_url):\n        \"\"\"\n        Luokan alustus.\n        \"\"\"\n        self.clockify_url = clockify_url\n        self.get_workspaces()\n\n    def _get(self, endpoint):\n        \"\"\" Apufunktio GET-pyynt\u00f6jen tekemiseen Clockify-APIin. \"\"\"\n        url = f\"{self.clockify_url}/{endpoint}\"\n        response = requests.get(url, headers=self.headers)\n        if response.status_code != 200:\n            raise Exception(f\"API-pyynt\u00f6 ep\u00e4onnistui: {response.status_code} - {response.text}\")\n        return response.json()\n\n    def iso_duration_to_seconds(self, duration):\n        \"\"\"Muuntaa ISO 8601 -kestoarvon sekunneiksi.\"\"\"\n        if duration is None:\n            return 0  # Palautetaan 0, jos duration on None\n\n        hours = minutes = seconds = 0\n        match = re.match(r\"PT(\\d+)H(\\d+)M(\\d+)S\", duration)\n        if match:\n            hours = int(match.group(1))\n            minutes = int(match.group(2))\n            seconds = int(match.group(3))\n        else:\n            match_hours = re.match(r\"PT(\\d+)H\", duration)\n            match_minutes = re.match(r\"PT(\\d+)M\", duration)\n            match_seconds = re.match(r\"PT(\\d+)S\", duration)\n\n            if match_hours:\n                hours = int(match_hours.group(1))\n            if match_minutes:\n                minutes = int(match_minutes.group(1))\n            if match_seconds:\n                seconds = int(match_seconds.group(1))\n\n        return hours * 3600 + minutes * 60 + seconds\n\n    def get_workspaces(self):\n        \"\"\"\n        Hakee Clockifyn workspacet\n        \"\"\"\n        response = requests.get(f\"{self.clockify_url}/workspaces\", headers=self.headers)\n        if response.status_code == 200:\n            workspaces = response.json()\n            self.workspace_id = workspaces[0][\"id\"] if workspaces else None\n            return workspaces\n        else:\n            print(f\"Virhe haettaessa ty\u00f6tiloja: {response.status_code}\")\n            return []\n\n    def get_projects(self):\n        \"\"\"\n        Hakee workspacen projektit\n        \"\"\"\n        if not self.workspace_id:\n            print(\"Ty\u00f6tilan ID ei ole asetettu.\")\n            return []\n\n        response = requests.get(f\"{self.clockify_url}/workspaces/{self.workspace_id}/projects\", headers=self.headers)\n        if response.status_code == 200:\n            return response.json()\n        else:\n            print(f\"Virhe haettaessa projekteja: {response.status_code}\")\n            return []\n\n    def get_users_in_workspace(self):\n        \"\"\"\n        Hakee workspacen k\u00e4ytt\u00e4j\u00e4t\n        \"\"\"\n        if not self.workspace_id:\n            print(\"Ty\u00f6tilan ID ei ole asetettu.\")\n            return []\n\n        response = requests.get(f\"{self.clockify_url}/workspaces/{self.workspace_id}/users\", headers=self.headers)\n        if response.status_code == 200:\n            return response.json()\n        else:\n            print(f\"Virhe haettaessa k\u00e4ytt\u00e4ji\u00e4: {response.status_code}\")\n            return []\n\n    def get_workspace_id_by_name(self, workspace_name):\n        \"\"\" Hakee ty\u00f6tilan ID:n nimen perusteella. \"\"\"\n        workspaces = self.get_workspaces()\n        for workspace in workspaces:\n            if workspace['name'].lower() == workspace_name.lower():\n                return workspace['id']\n        raise Exception(f\"Ty\u00f6tilaa '{workspace_name}' ei l\u00f6ytynyt.\")\n\n    def get_project_id_by_name(self, workspace_id, project_name):\n        \"\"\" Hakee projektin ID:n nimen perusteella. \"\"\"\n        projects = self._get(f\"workspaces/{workspace_id}/projects\")\n        for project in projects:\n            if project['name'].lower() == project_name.lower():\n                return project['id']\n        raise Exception(f\"Projektia '{project_name}' ei l\u00f6ytynyt ty\u00f6tilasta.\")\n\n    def get_user_id_by_name(self, workspace_id, user_name):\n        \"\"\" Hakee k\u00e4ytt\u00e4j\u00e4n ID:n nimen perusteella. \"\"\"\n        users = self._get(f\"workspaces/{workspace_id}/users\")\n        for user in users:\n            if user['name'].lower() == user_name.lower():\n                return user['id']\n        raise Exception(f\"K\u00e4ytt\u00e4j\u00e4\u00e4 '{user_name}' ei l\u00f6ytynyt ty\u00f6tilasta.\")\n\n    def get_time_entries_df(self, user_id, project_id):\n        \"\"\"\n        Hakee k\u00e4ytt\u00e4j\u00e4n ty\u00f6tunnit tietyss\u00e4 projektissa ja palauttaa ne DataFrame-muodossa.\n        \"\"\"\n        if not self.workspace_id:\n            print(\"Ty\u00f6tilan ID ei ole asetettu.\")\n            return pd.DataFrame()\n\n        url = f\"{self.clockify_url}/workspaces/{self.workspace_id}/user/{user_id}/time-entries?project={project_id}\"\n        response = requests.get(url, headers=self.headers)\n\n        if response.status_code == 200:\n            time_entries = response.json()\n            data = []\n\n            for entry in time_entries:\n                if \"timeInterval\" in entry:\n                    start_time = entry[\"timeInterval\"].get(\"start\")\n                    end_time = entry[\"timeInterval\"].get(\"end\")\n                    duration = entry[\"timeInterval\"].get(\"duration\")\n                    seconds = self.iso_duration_to_seconds(duration)\n                    hours = seconds / 3600\n\n\n                    data.append({\n                        \"start_time\": start_time,\n                        \"end_time\": end_time,\n                        \"duration_seconds\": seconds,\n                        \"duration_hours\": hours  \n                    })\n\n\n            df = pd.DataFrame(data)\n            return df\n        else:\n            print(f\"Virhe haettaessa aikakirjauksia k\u00e4ytt\u00e4j\u00e4lle {user_id}: {response.status_code}\")\n            return pd.DataFrame()\n\n    def get_all_user_hours_df(self):\n        \"\"\"\n        Hakee kaikkien k\u00e4ytt\u00e4jien ty\u00f6tunnit ja palauttaa ne yhdistettyn\u00e4 DataFrame-muodossa.\n        \"\"\"\n        users_in_workspace = self.get_users_in_workspace()\n        all_user_hours = []\n\n        for user in users_in_workspace:\n            user_id = user[\"id\"]\n            time_entries_df = self.get_time_entries_df(user_id, self.project_id)\n            if not time_entries_df.empty:\n                total_hours = time_entries_df['duration_hours'].sum()\n                all_user_hours.append({\n                    \"Nimi\": user.get(\"name\", \"Tuntematon k\u00e4ytt\u00e4j\u00e4\"),  \n                    \"Ty\u00f6tunnit\": total_hours\n                })\n\n\n        return pd.DataFrame(all_user_hours)\n\n\n    def get_sprint_hours(self, gitlab_url, gitlab_token):\n        \"\"\"\n        Hakee kaikkien k\u00e4ytt\u00e4jien ty\u00f6tunnit milestoneittain ja palauttaa ne yhdistettyn\u00e4 DataFrame-muodossa.\n        \"\"\"\n        gitlab_project = ProjectData(gitlab_url, gitlab_token)\n        milestones = gitlab_project.get_milestones()\n\n        if milestones.empty:\n            return pd.DataFrame()\n\n        sprint_hours = []\n        users_in_workspace = self.get_users_in_workspace()\n\n        for _, milestone in milestones.iterrows():\n            milestone_name = milestone['title']\n            start_date = pd.Timestamp(milestone['start_date']).replace(hour=0, minute=0, second=0, tzinfo=pytz.UTC)\n            end_date = pd.Timestamp(milestone['due_date']).replace(hour=23, minute=59, second=59, tzinfo=pytz.UTC)\n\n            for user in users_in_workspace:\n                user_id = user[\"id\"]\n                time_entries_df = self.get_time_entries_df(user_id, self.project_id)\n                if not time_entries_df.empty:\n                    time_entries_df['start_time'] = pd.to_datetime(time_entries_df['start_time'], format=\"%Y-%m-%dT%H:%M:%SZ\").dt.tz_localize('UTC')\n                    time_entries_df['duration_hours'] = time_entries_df['duration_seconds'] / 3600\n                    sprint_entries = time_entries_df[\n                        (time_entries_df['start_time'] &gt;= start_date) &amp; \n                        (time_entries_df['start_time'] &lt;= end_date)\n                    ]\n                    total_hours = sprint_entries['duration_hours'].sum()\n\n                    sprint_hours.append({\n                        \"user\": user[\"name\"],\n                        \"milestone\": milestone_name,\n                        \"start_date\": start_date,\n                        \"end_date\": end_date,\n                        \"total_hours\": total_hours\n                    })\n\n        sprint_hours_df = pd.DataFrame(sprint_hours)\n\n        if not sprint_hours_df.empty:\n            # Group by user and milestone, summing the total hours worked\n            sprint_hours_df_grouped = sprint_hours_df.groupby(['user', 'milestone']).agg({'total_hours': 'sum'}).reset_index()\n            return sprint_hours_df_grouped\n\n        return pd.DataFrame()\n\n\n    def get_tags(self):\n        \"\"\"\n        Hakee tagit ja palauttaa ne listana.\n        \"\"\"\n        if not self.workspace_id:\n            print(\"Ty\u00f6tilan ID ei ole asetettu.\")\n            return []\n        response = requests.get(f\"{self.clockify_url}/workspaces/{self.workspace_id}/tags\", headers=self.headers)\n        print(\"get_tags response JSON:\", response.json())\n\n        if response.status_code == 200:\n            return response.json()\n        else:\n            print(f\"Virhe haettaessa tageja: {response.status_code}\")\n            return []\n\n\n    def get_project_tag_hours(self, project_id, user_ids):\n        \"\"\"\n        Hakee projektin kaikki tagit, aikakirjaukset ja laskee tunnit tageittain useille k\u00e4ytt\u00e4jille.\n\n        Args:\n            project_id (str): Clockify-projektin ID.\n            user_ids (list): Lista Clockify-k\u00e4ytt\u00e4jien ID:ist\u00e4.\n\n        Returns:\n            (DataFrame): DataFrame, joka sis\u00e4lt\u00e4\u00e4 tagin nimen ja siihen liittyv\u00e4t tunnit kaikille k\u00e4ytt\u00e4jille.\n        \"\"\"\n        if not self.workspace_id:\n            raise ValueError(\"Ty\u00f6tilan ID ei ole asetettu.\")\n\n        tags = self.get_tags()\n        if not tags:\n            print(\"Ei l\u00f6ytynyt tageja.\")\n            return pd.DataFrame()\n\n        users_in_workspace = self.get_users_in_workspace()\n\n        tag_hours_list = []\n\n        for user_id in user_ids:\n\n            user = next((user for user in users_in_workspace if user[\"id\"] == user_id), None)\n            if user is None:\n                print(f\"K\u00e4ytt\u00e4j\u00e4\u00e4 {user_id} ei l\u00f6ytynyt ty\u00f6tilasta.\")\n                continue  \n            url = f\"{self.clockify_url}/workspaces/{self.workspace_id}/user/{user_id}/time-entries?project={project_id}\"\n            response = requests.get(url, headers=self.headers)\n            if response.status_code == 404:\n                print(f\"Projektia ei l\u00f6ydy ID:ll\u00e4 {project_id} k\u00e4ytt\u00e4j\u00e4lt\u00e4 {user_id}.\")\n                continue\n            elif response.status_code != 200:\n                print(f\"Virhe haettaessa aikakirjauksia projektista {project_id} k\u00e4ytt\u00e4j\u00e4lt\u00e4 {user_id}: {response.status_code}\")\n                continue\n            time_entries = response.json()\n            for tag in tags:\n                tag_id = tag[\"id\"]\n                tag_name = tag[\"name\"]\n                tagged_entries = [\n                    entry for entry in time_entries\n                    if \"tagIds\" in entry and isinstance(entry[\"tagIds\"], list) and tag_id in entry[\"tagIds\"]\n                ]\n                total_hours = sum(\n                    self.iso_duration_to_seconds(entry[\"timeInterval\"].get(\"duration\", \"PT0S\")) / 3600\n                    for entry in tagged_entries\n                )\n                tag_hours_list.append({\"user_id\": user_id, \"user_name\": user[\"name\"], \"tag\": tag_name, \"total_hours\": total_hours})\n        return pd.DataFrame(tag_hours_list)\n\n\n    def get_tag_hours(self):\n        \"\"\"Hakee ja laskee ty\u00f6tunnit kullekin tagille ty\u00f6tilassa.\"\"\"\n        tag_hours_list = []\n\n        tags = self.get_tags()\n        if not tags:\n            print(\"Ei l\u00f6ytynyt tageja.\")\n            return pd.DataFrame()\n        for tag in tags:\n            tag_id = tag[\"id\"]\n            tag_name = tag[\"name\"]\n            print(f\"K\u00e4sitell\u00e4\u00e4n tagi: {tag_name}, ID: {tag_id}\")\n            time_entries_df = self.get_time_entries_by_tag(tag_ids=[tag_id])\n            if not time_entries_df.empty:\n                total_tag_hours = time_entries_df['duration_hours'].sum()\n                print(f\"Tagille {tag_name} kokonaistunnit: {total_tag_hours}\")\n                tag_hours_list.append({\n                    \"tag\": tag_name,\n                    \"total_hours\": total_tag_hours\n                })\n            else:\n                print(f\"Ei aikakirjauksia tagille {tag_name}\")\n        if tag_hours_list:\n            tag_hours_df = pd.DataFrame(tag_hours_list)\n            print(f\"Tag Hours List: {tag_hours_df}\")\n            return tag_hours_df\n        else:\n            return pd.DataFrame()\n\n\n    def get_project_tag_and_sprint_hours(self, gitlab_url, gitlab_token):\n        \"\"\"\n        Hakee projektin tagit, aikakirjaukset, sprintit ja laskee tunnit sek\u00e4 tageittain ett\u00e4 sprintitt\u00e4in k\u00e4ytt\u00e4jille.\n        \"\"\"\n        if not self.workspace_id:\n            raise ValueError(\"Ty\u00f6tilan ID ei ole asetettu.\")\n\n        tags = self.get_tags()\n        if not tags:\n            print(\"Ei l\u00f6ytynyt tageja.\")\n            return pd.DataFrame()\n\n        gitlab_project = ProjectData(gitlab_url, gitlab_token)\n        milestones = gitlab_project.get_milestones()\n\n        if milestones.empty:\n            print(\"Ei l\u00f6ytynyt sprints-milestoneja.\")\n            return pd.DataFrame()\n\n        users_in_workspace = self.get_users_in_workspace()\n\n        tag_and_sprint_hours_list = []\n\n        for user in users_in_workspace:\n            user_id = user[\"id\"]\n            user_name = user[\"name\"]\n\n            url = f\"{self.clockify_url}/workspaces/{self.workspace_id}/user/{user_id}/time-entries\"\n            response = requests.get(url, headers=self.headers)\n\n            if response.status_code == 404:\n                print(f\"Aikakirjauksia ei l\u00f6ydy k\u00e4ytt\u00e4j\u00e4lt\u00e4 {user_id}.\")\n                continue\n            elif response.status_code != 200:\n                print(f\"Virhe haettaessa aikakirjauksia k\u00e4ytt\u00e4j\u00e4lt\u00e4 {user_id}: {response.status_code}\")\n                continue\n\n            try:\n                time_entries = response.json()\n            except ValueError:\n                print(f\"Virhe k\u00e4sitelt\u00e4ess\u00e4 JSON-vastausta k\u00e4ytt\u00e4j\u00e4lt\u00e4 {user_id}.\")\n                continue\n            for _, milestone in milestones.iterrows():\n                milestone_name = milestone['title']\n                start_date = pd.Timestamp(milestone['start_date']).replace(hour=0, minute=0, second=0, tzinfo=pytz.UTC)\n                end_date = pd.Timestamp(milestone['due_date']).replace(hour=23, minute=59, second=59, tzinfo=pytz.UTC)\n\n                sprint_entries = [\n                    entry for entry in time_entries\n                    if \"timeInterval\" in entry and \n                    start_date &lt;= pd.to_datetime(entry[\"timeInterval\"][\"start\"]) &lt;= end_date\n                ]\n                sprint_total_hours = sum(\n                    self.iso_duration_to_seconds(entry[\"timeInterval\"].get(\"duration\", \"PT0S\")) / 3600\n                    for entry in sprint_entries\n                )\n\n                for tag in tags:\n                    tag_id = tag[\"id\"]\n                    tag_name = tag[\"name\"]\n                    tagged_entries = [\n                        entry for entry in sprint_entries\n                        if entry.get(\"tagIds\") and tag_id in entry[\"tagIds\"]\n                    ]\n\n\n                    tag_total_hours = sum(\n                        self.iso_duration_to_seconds(entry[\"timeInterval\"].get(\"duration\", \"PT0S\")) / 3600\n                        for entry in tagged_entries\n                    )\n\n                    tag_and_sprint_hours_list.append({\n                        \"user_id\": user_id,\n                        \"user_name\": user_name,\n                        \"tag\": tag_name,\n                        \"milestone\": milestone_name,\n                        \"start_date\": start_date,\n                        \"end_date\": end_date,\n                        \"total_tag_hours\": tag_total_hours,\n                        \"total_sprint_hours\": sprint_total_hours\n                    })\n        return pd.DataFrame(tag_and_sprint_hours_list)\n\n    def get_project_task_hours(self):\n        \"\"\" Hae taskit ja niiden tunnit projektista\n        \"\"\"\n        if not self.workspace_id or not self.project_id:\n            raise ValueError(\"Workspace ID tai Project ID puuttuu.\")\n\n        url = f\"{self.base_url}/workspaces/{self.workspace_id}/projects/{self.project_id}/tasks\"\n        response = requests.get(url, headers=self.headers)\n        response.raise_for_status()\n        tasks = response.json()\n\n        task_data = []\n        for task in tasks:\n            duration_str = task.get(\"duration\", \"PT0S\") \n            hours, minutes = 0, 0\n            if \"H\" in duration_str:\n                hours = int(duration_str.split(\"H\")[0].replace(\"PT\", \"\"))\n                duration_str = duration_str.split(\"H\")[1]\n            if \"M\" in duration_str:\n                minutes = int(duration_str.split(\"M\")[0])\n            total_hours = hours + minutes / 60\n\n            task_data.append({\n                \"Task ID\": task.get(\"id\"),\n                \"Task Name\": task.get(\"name\"),\n                \"Status\": task.get(\"status\"),\n                \"Duration (hours)\": round(total_hours, 2), \n                \"Estimated Time (ms)\": task.get(\"estimate\", 0)\n            })\n\n        return pd.DataFrame(task_data)\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_all_user_hours_df","title":"<code>get_all_user_hours_df()</code>","text":"<p>Hakee kaikkien k\u00e4ytt\u00e4jien ty\u00f6tunnit ja palauttaa ne yhdistettyn\u00e4 DataFrame-muodossa.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_all_user_hours_df(self):\n    \"\"\"\n    Hakee kaikkien k\u00e4ytt\u00e4jien ty\u00f6tunnit ja palauttaa ne yhdistettyn\u00e4 DataFrame-muodossa.\n    \"\"\"\n    users_in_workspace = self.get_users_in_workspace()\n    all_user_hours = []\n\n    for user in users_in_workspace:\n        user_id = user[\"id\"]\n        time_entries_df = self.get_time_entries_df(user_id, self.project_id)\n        if not time_entries_df.empty:\n            total_hours = time_entries_df['duration_hours'].sum()\n            all_user_hours.append({\n                \"Nimi\": user.get(\"name\", \"Tuntematon k\u00e4ytt\u00e4j\u00e4\"),  \n                \"Ty\u00f6tunnit\": total_hours\n            })\n\n\n    return pd.DataFrame(all_user_hours)\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_project_id_by_name","title":"<code>get_project_id_by_name(workspace_id, project_name)</code>","text":"<p>Hakee projektin ID:n nimen perusteella.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_project_id_by_name(self, workspace_id, project_name):\n    \"\"\" Hakee projektin ID:n nimen perusteella. \"\"\"\n    projects = self._get(f\"workspaces/{workspace_id}/projects\")\n    for project in projects:\n        if project['name'].lower() == project_name.lower():\n            return project['id']\n    raise Exception(f\"Projektia '{project_name}' ei l\u00f6ytynyt ty\u00f6tilasta.\")\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_project_tag_and_sprint_hours","title":"<code>get_project_tag_and_sprint_hours(gitlab_url, gitlab_token)</code>","text":"<p>Hakee projektin tagit, aikakirjaukset, sprintit ja laskee tunnit sek\u00e4 tageittain ett\u00e4 sprintitt\u00e4in k\u00e4ytt\u00e4jille.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_project_tag_and_sprint_hours(self, gitlab_url, gitlab_token):\n    \"\"\"\n    Hakee projektin tagit, aikakirjaukset, sprintit ja laskee tunnit sek\u00e4 tageittain ett\u00e4 sprintitt\u00e4in k\u00e4ytt\u00e4jille.\n    \"\"\"\n    if not self.workspace_id:\n        raise ValueError(\"Ty\u00f6tilan ID ei ole asetettu.\")\n\n    tags = self.get_tags()\n    if not tags:\n        print(\"Ei l\u00f6ytynyt tageja.\")\n        return pd.DataFrame()\n\n    gitlab_project = ProjectData(gitlab_url, gitlab_token)\n    milestones = gitlab_project.get_milestones()\n\n    if milestones.empty:\n        print(\"Ei l\u00f6ytynyt sprints-milestoneja.\")\n        return pd.DataFrame()\n\n    users_in_workspace = self.get_users_in_workspace()\n\n    tag_and_sprint_hours_list = []\n\n    for user in users_in_workspace:\n        user_id = user[\"id\"]\n        user_name = user[\"name\"]\n\n        url = f\"{self.clockify_url}/workspaces/{self.workspace_id}/user/{user_id}/time-entries\"\n        response = requests.get(url, headers=self.headers)\n\n        if response.status_code == 404:\n            print(f\"Aikakirjauksia ei l\u00f6ydy k\u00e4ytt\u00e4j\u00e4lt\u00e4 {user_id}.\")\n            continue\n        elif response.status_code != 200:\n            print(f\"Virhe haettaessa aikakirjauksia k\u00e4ytt\u00e4j\u00e4lt\u00e4 {user_id}: {response.status_code}\")\n            continue\n\n        try:\n            time_entries = response.json()\n        except ValueError:\n            print(f\"Virhe k\u00e4sitelt\u00e4ess\u00e4 JSON-vastausta k\u00e4ytt\u00e4j\u00e4lt\u00e4 {user_id}.\")\n            continue\n        for _, milestone in milestones.iterrows():\n            milestone_name = milestone['title']\n            start_date = pd.Timestamp(milestone['start_date']).replace(hour=0, minute=0, second=0, tzinfo=pytz.UTC)\n            end_date = pd.Timestamp(milestone['due_date']).replace(hour=23, minute=59, second=59, tzinfo=pytz.UTC)\n\n            sprint_entries = [\n                entry for entry in time_entries\n                if \"timeInterval\" in entry and \n                start_date &lt;= pd.to_datetime(entry[\"timeInterval\"][\"start\"]) &lt;= end_date\n            ]\n            sprint_total_hours = sum(\n                self.iso_duration_to_seconds(entry[\"timeInterval\"].get(\"duration\", \"PT0S\")) / 3600\n                for entry in sprint_entries\n            )\n\n            for tag in tags:\n                tag_id = tag[\"id\"]\n                tag_name = tag[\"name\"]\n                tagged_entries = [\n                    entry for entry in sprint_entries\n                    if entry.get(\"tagIds\") and tag_id in entry[\"tagIds\"]\n                ]\n\n\n                tag_total_hours = sum(\n                    self.iso_duration_to_seconds(entry[\"timeInterval\"].get(\"duration\", \"PT0S\")) / 3600\n                    for entry in tagged_entries\n                )\n\n                tag_and_sprint_hours_list.append({\n                    \"user_id\": user_id,\n                    \"user_name\": user_name,\n                    \"tag\": tag_name,\n                    \"milestone\": milestone_name,\n                    \"start_date\": start_date,\n                    \"end_date\": end_date,\n                    \"total_tag_hours\": tag_total_hours,\n                    \"total_sprint_hours\": sprint_total_hours\n                })\n    return pd.DataFrame(tag_and_sprint_hours_list)\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_project_tag_hours","title":"<code>get_project_tag_hours(project_id, user_ids)</code>","text":"<p>Hakee projektin kaikki tagit, aikakirjaukset ja laskee tunnit tageittain useille k\u00e4ytt\u00e4jille.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Clockify-projektin ID.</p> required <code>user_ids</code> <code>list</code> <p>Lista Clockify-k\u00e4ytt\u00e4jien ID:ist\u00e4.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame, joka sis\u00e4lt\u00e4\u00e4 tagin nimen ja siihen liittyv\u00e4t tunnit kaikille k\u00e4ytt\u00e4jille.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_project_tag_hours(self, project_id, user_ids):\n    \"\"\"\n    Hakee projektin kaikki tagit, aikakirjaukset ja laskee tunnit tageittain useille k\u00e4ytt\u00e4jille.\n\n    Args:\n        project_id (str): Clockify-projektin ID.\n        user_ids (list): Lista Clockify-k\u00e4ytt\u00e4jien ID:ist\u00e4.\n\n    Returns:\n        (DataFrame): DataFrame, joka sis\u00e4lt\u00e4\u00e4 tagin nimen ja siihen liittyv\u00e4t tunnit kaikille k\u00e4ytt\u00e4jille.\n    \"\"\"\n    if not self.workspace_id:\n        raise ValueError(\"Ty\u00f6tilan ID ei ole asetettu.\")\n\n    tags = self.get_tags()\n    if not tags:\n        print(\"Ei l\u00f6ytynyt tageja.\")\n        return pd.DataFrame()\n\n    users_in_workspace = self.get_users_in_workspace()\n\n    tag_hours_list = []\n\n    for user_id in user_ids:\n\n        user = next((user for user in users_in_workspace if user[\"id\"] == user_id), None)\n        if user is None:\n            print(f\"K\u00e4ytt\u00e4j\u00e4\u00e4 {user_id} ei l\u00f6ytynyt ty\u00f6tilasta.\")\n            continue  \n        url = f\"{self.clockify_url}/workspaces/{self.workspace_id}/user/{user_id}/time-entries?project={project_id}\"\n        response = requests.get(url, headers=self.headers)\n        if response.status_code == 404:\n            print(f\"Projektia ei l\u00f6ydy ID:ll\u00e4 {project_id} k\u00e4ytt\u00e4j\u00e4lt\u00e4 {user_id}.\")\n            continue\n        elif response.status_code != 200:\n            print(f\"Virhe haettaessa aikakirjauksia projektista {project_id} k\u00e4ytt\u00e4j\u00e4lt\u00e4 {user_id}: {response.status_code}\")\n            continue\n        time_entries = response.json()\n        for tag in tags:\n            tag_id = tag[\"id\"]\n            tag_name = tag[\"name\"]\n            tagged_entries = [\n                entry for entry in time_entries\n                if \"tagIds\" in entry and isinstance(entry[\"tagIds\"], list) and tag_id in entry[\"tagIds\"]\n            ]\n            total_hours = sum(\n                self.iso_duration_to_seconds(entry[\"timeInterval\"].get(\"duration\", \"PT0S\")) / 3600\n                for entry in tagged_entries\n            )\n            tag_hours_list.append({\"user_id\": user_id, \"user_name\": user[\"name\"], \"tag\": tag_name, \"total_hours\": total_hours})\n    return pd.DataFrame(tag_hours_list)\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_project_task_hours","title":"<code>get_project_task_hours()</code>","text":"<p>Hae taskit ja niiden tunnit projektista</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_project_task_hours(self):\n    \"\"\" Hae taskit ja niiden tunnit projektista\n    \"\"\"\n    if not self.workspace_id or not self.project_id:\n        raise ValueError(\"Workspace ID tai Project ID puuttuu.\")\n\n    url = f\"{self.base_url}/workspaces/{self.workspace_id}/projects/{self.project_id}/tasks\"\n    response = requests.get(url, headers=self.headers)\n    response.raise_for_status()\n    tasks = response.json()\n\n    task_data = []\n    for task in tasks:\n        duration_str = task.get(\"duration\", \"PT0S\") \n        hours, minutes = 0, 0\n        if \"H\" in duration_str:\n            hours = int(duration_str.split(\"H\")[0].replace(\"PT\", \"\"))\n            duration_str = duration_str.split(\"H\")[1]\n        if \"M\" in duration_str:\n            minutes = int(duration_str.split(\"M\")[0])\n        total_hours = hours + minutes / 60\n\n        task_data.append({\n            \"Task ID\": task.get(\"id\"),\n            \"Task Name\": task.get(\"name\"),\n            \"Status\": task.get(\"status\"),\n            \"Duration (hours)\": round(total_hours, 2), \n            \"Estimated Time (ms)\": task.get(\"estimate\", 0)\n        })\n\n    return pd.DataFrame(task_data)\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_projects","title":"<code>get_projects()</code>","text":"<p>Hakee workspacen projektit</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_projects(self):\n    \"\"\"\n    Hakee workspacen projektit\n    \"\"\"\n    if not self.workspace_id:\n        print(\"Ty\u00f6tilan ID ei ole asetettu.\")\n        return []\n\n    response = requests.get(f\"{self.clockify_url}/workspaces/{self.workspace_id}/projects\", headers=self.headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(f\"Virhe haettaessa projekteja: {response.status_code}\")\n        return []\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_sprint_hours","title":"<code>get_sprint_hours(gitlab_url, gitlab_token)</code>","text":"<p>Hakee kaikkien k\u00e4ytt\u00e4jien ty\u00f6tunnit milestoneittain ja palauttaa ne yhdistettyn\u00e4 DataFrame-muodossa.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_sprint_hours(self, gitlab_url, gitlab_token):\n    \"\"\"\n    Hakee kaikkien k\u00e4ytt\u00e4jien ty\u00f6tunnit milestoneittain ja palauttaa ne yhdistettyn\u00e4 DataFrame-muodossa.\n    \"\"\"\n    gitlab_project = ProjectData(gitlab_url, gitlab_token)\n    milestones = gitlab_project.get_milestones()\n\n    if milestones.empty:\n        return pd.DataFrame()\n\n    sprint_hours = []\n    users_in_workspace = self.get_users_in_workspace()\n\n    for _, milestone in milestones.iterrows():\n        milestone_name = milestone['title']\n        start_date = pd.Timestamp(milestone['start_date']).replace(hour=0, minute=0, second=0, tzinfo=pytz.UTC)\n        end_date = pd.Timestamp(milestone['due_date']).replace(hour=23, minute=59, second=59, tzinfo=pytz.UTC)\n\n        for user in users_in_workspace:\n            user_id = user[\"id\"]\n            time_entries_df = self.get_time_entries_df(user_id, self.project_id)\n            if not time_entries_df.empty:\n                time_entries_df['start_time'] = pd.to_datetime(time_entries_df['start_time'], format=\"%Y-%m-%dT%H:%M:%SZ\").dt.tz_localize('UTC')\n                time_entries_df['duration_hours'] = time_entries_df['duration_seconds'] / 3600\n                sprint_entries = time_entries_df[\n                    (time_entries_df['start_time'] &gt;= start_date) &amp; \n                    (time_entries_df['start_time'] &lt;= end_date)\n                ]\n                total_hours = sprint_entries['duration_hours'].sum()\n\n                sprint_hours.append({\n                    \"user\": user[\"name\"],\n                    \"milestone\": milestone_name,\n                    \"start_date\": start_date,\n                    \"end_date\": end_date,\n                    \"total_hours\": total_hours\n                })\n\n    sprint_hours_df = pd.DataFrame(sprint_hours)\n\n    if not sprint_hours_df.empty:\n        # Group by user and milestone, summing the total hours worked\n        sprint_hours_df_grouped = sprint_hours_df.groupby(['user', 'milestone']).agg({'total_hours': 'sum'}).reset_index()\n        return sprint_hours_df_grouped\n\n    return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_tag_hours","title":"<code>get_tag_hours()</code>","text":"<p>Hakee ja laskee ty\u00f6tunnit kullekin tagille ty\u00f6tilassa.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_tag_hours(self):\n    \"\"\"Hakee ja laskee ty\u00f6tunnit kullekin tagille ty\u00f6tilassa.\"\"\"\n    tag_hours_list = []\n\n    tags = self.get_tags()\n    if not tags:\n        print(\"Ei l\u00f6ytynyt tageja.\")\n        return pd.DataFrame()\n    for tag in tags:\n        tag_id = tag[\"id\"]\n        tag_name = tag[\"name\"]\n        print(f\"K\u00e4sitell\u00e4\u00e4n tagi: {tag_name}, ID: {tag_id}\")\n        time_entries_df = self.get_time_entries_by_tag(tag_ids=[tag_id])\n        if not time_entries_df.empty:\n            total_tag_hours = time_entries_df['duration_hours'].sum()\n            print(f\"Tagille {tag_name} kokonaistunnit: {total_tag_hours}\")\n            tag_hours_list.append({\n                \"tag\": tag_name,\n                \"total_hours\": total_tag_hours\n            })\n        else:\n            print(f\"Ei aikakirjauksia tagille {tag_name}\")\n    if tag_hours_list:\n        tag_hours_df = pd.DataFrame(tag_hours_list)\n        print(f\"Tag Hours List: {tag_hours_df}\")\n        return tag_hours_df\n    else:\n        return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_tags","title":"<code>get_tags()</code>","text":"<p>Hakee tagit ja palauttaa ne listana.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_tags(self):\n    \"\"\"\n    Hakee tagit ja palauttaa ne listana.\n    \"\"\"\n    if not self.workspace_id:\n        print(\"Ty\u00f6tilan ID ei ole asetettu.\")\n        return []\n    response = requests.get(f\"{self.clockify_url}/workspaces/{self.workspace_id}/tags\", headers=self.headers)\n    print(\"get_tags response JSON:\", response.json())\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(f\"Virhe haettaessa tageja: {response.status_code}\")\n        return []\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_time_entries_df","title":"<code>get_time_entries_df(user_id, project_id)</code>","text":"<p>Hakee k\u00e4ytt\u00e4j\u00e4n ty\u00f6tunnit tietyss\u00e4 projektissa ja palauttaa ne DataFrame-muodossa.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_time_entries_df(self, user_id, project_id):\n    \"\"\"\n    Hakee k\u00e4ytt\u00e4j\u00e4n ty\u00f6tunnit tietyss\u00e4 projektissa ja palauttaa ne DataFrame-muodossa.\n    \"\"\"\n    if not self.workspace_id:\n        print(\"Ty\u00f6tilan ID ei ole asetettu.\")\n        return pd.DataFrame()\n\n    url = f\"{self.clockify_url}/workspaces/{self.workspace_id}/user/{user_id}/time-entries?project={project_id}\"\n    response = requests.get(url, headers=self.headers)\n\n    if response.status_code == 200:\n        time_entries = response.json()\n        data = []\n\n        for entry in time_entries:\n            if \"timeInterval\" in entry:\n                start_time = entry[\"timeInterval\"].get(\"start\")\n                end_time = entry[\"timeInterval\"].get(\"end\")\n                duration = entry[\"timeInterval\"].get(\"duration\")\n                seconds = self.iso_duration_to_seconds(duration)\n                hours = seconds / 3600\n\n\n                data.append({\n                    \"start_time\": start_time,\n                    \"end_time\": end_time,\n                    \"duration_seconds\": seconds,\n                    \"duration_hours\": hours  \n                })\n\n\n        df = pd.DataFrame(data)\n        return df\n    else:\n        print(f\"Virhe haettaessa aikakirjauksia k\u00e4ytt\u00e4j\u00e4lle {user_id}: {response.status_code}\")\n        return pd.DataFrame()\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_user_id_by_name","title":"<code>get_user_id_by_name(workspace_id, user_name)</code>","text":"<p>Hakee k\u00e4ytt\u00e4j\u00e4n ID:n nimen perusteella.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_user_id_by_name(self, workspace_id, user_name):\n    \"\"\" Hakee k\u00e4ytt\u00e4j\u00e4n ID:n nimen perusteella. \"\"\"\n    users = self._get(f\"workspaces/{workspace_id}/users\")\n    for user in users:\n        if user['name'].lower() == user_name.lower():\n            return user['id']\n    raise Exception(f\"K\u00e4ytt\u00e4j\u00e4\u00e4 '{user_name}' ei l\u00f6ytynyt ty\u00f6tilasta.\")\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_users_in_workspace","title":"<code>get_users_in_workspace()</code>","text":"<p>Hakee workspacen k\u00e4ytt\u00e4j\u00e4t</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_users_in_workspace(self):\n    \"\"\"\n    Hakee workspacen k\u00e4ytt\u00e4j\u00e4t\n    \"\"\"\n    if not self.workspace_id:\n        print(\"Ty\u00f6tilan ID ei ole asetettu.\")\n        return []\n\n    response = requests.get(f\"{self.clockify_url}/workspaces/{self.workspace_id}/users\", headers=self.headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(f\"Virhe haettaessa k\u00e4ytt\u00e4ji\u00e4: {response.status_code}\")\n        return []\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_workspace_id_by_name","title":"<code>get_workspace_id_by_name(workspace_name)</code>","text":"<p>Hakee ty\u00f6tilan ID:n nimen perusteella.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_workspace_id_by_name(self, workspace_name):\n    \"\"\" Hakee ty\u00f6tilan ID:n nimen perusteella. \"\"\"\n    workspaces = self.get_workspaces()\n    for workspace in workspaces:\n        if workspace['name'].lower() == workspace_name.lower():\n            return workspace['id']\n    raise Exception(f\"Ty\u00f6tilaa '{workspace_name}' ei l\u00f6ytynyt.\")\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.get_workspaces","title":"<code>get_workspaces()</code>","text":"<p>Hakee Clockifyn workspacet</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def get_workspaces(self):\n    \"\"\"\n    Hakee Clockifyn workspacet\n    \"\"\"\n    response = requests.get(f\"{self.clockify_url}/workspaces\", headers=self.headers)\n    if response.status_code == 200:\n        workspaces = response.json()\n        self.workspace_id = workspaces[0][\"id\"] if workspaces else None\n        return workspaces\n    else:\n        print(f\"Virhe haettaessa ty\u00f6tiloja: {response.status_code}\")\n        return []\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.init","title":"<code>init(clockify_url)</code>","text":"<p>Luokan alustus.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def init(self, clockify_url):\n    \"\"\"\n    Luokan alustus.\n    \"\"\"\n    self.clockify_url = clockify_url\n    self.get_workspaces()\n</code></pre>"},{"location":"modules_api_reference/#src.clockify_api.ClockifyData.iso_duration_to_seconds","title":"<code>iso_duration_to_seconds(duration)</code>","text":"<p>Muuntaa ISO 8601 -kestoarvon sekunneiksi.</p> Source code in <code>src\\clockify_api.py</code> <pre><code>def iso_duration_to_seconds(self, duration):\n    \"\"\"Muuntaa ISO 8601 -kestoarvon sekunneiksi.\"\"\"\n    if duration is None:\n        return 0  # Palautetaan 0, jos duration on None\n\n    hours = minutes = seconds = 0\n    match = re.match(r\"PT(\\d+)H(\\d+)M(\\d+)S\", duration)\n    if match:\n        hours = int(match.group(1))\n        minutes = int(match.group(2))\n        seconds = int(match.group(3))\n    else:\n        match_hours = re.match(r\"PT(\\d+)H\", duration)\n        match_minutes = re.match(r\"PT(\\d+)M\", duration)\n        match_seconds = re.match(r\"PT(\\d+)S\", duration)\n\n        if match_hours:\n            hours = int(match_hours.group(1))\n        if match_minutes:\n            minutes = int(match_minutes.group(1))\n        if match_seconds:\n            seconds = int(match_seconds.group(1))\n\n    return hours * 3600 + minutes * 60 + seconds\n</code></pre>"},{"location":"modules_api_reference/#komponentit","title":"Komponentit","text":"<p>Dokumentaatio <code>components.py</code> -moduulista, joka sis\u00e4lt\u00e4\u00e4 useita erilaisia komponentteja, kuten sivun otsikon ja graafisten esitysten luomisen, joita k\u00e4ytet\u00e4\u00e4n useissa eri n\u00e4kymiss\u00e4.</p> <p>RepoRouskun komponenttikirjasto, joka sis\u00e4lt\u00e4\u00e4 sovelluksen eri sivuilla yhteisesti k\u00e4ytett\u00e4v\u00e4t komponentit ja toiminnallisuudet.</p>"},{"location":"modules_api_reference/#src.libraries.components.clockify_available","title":"<code>clockify_available()</code>","text":"<p>Palauttaa True, jos Clockifyn tiedot ja ty\u00f6tunnit saatavilla.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True, jos Clockifyn data k\u00e4ytett\u00e4viss\u00e4.</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def clockify_available():\n    \"\"\"\n    Palauttaa True, jos Clockifyn tiedot ja ty\u00f6tunnit saatavilla.\n\n    Returns:\n        (bool): True, jos Clockifyn data k\u00e4ytett\u00e4viss\u00e4.\n    \"\"\"\n    return (st.session_state.get(\"clockify_workspace\") is not None and \n            st.session_state.get(\"clockify_project\") is not None and \n            'clockify_data' in st.session_state and not st.session_state['clockify_data'].empty)\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.convert_timestamp_to_local_date","title":"<code>convert_timestamp_to_local_date(iso_date)</code>","text":"<p>Muuttaa ISO 8601 aikaleiman paikallisen aikavy\u00f6hykkeen datetime.date formaattia olevaksi p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4ksi</p> <p>Parameters:</p> Name Type Description Default <code>iso_date</code> <code>timestamp</code> <p>Aikaleima ISO 8601 formaatissa</p> required <p>Returns:</p> Type Description <code>date</code> <p>P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 vvvv-kk-pp</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def convert_timestamp_to_local_date(iso_date):\n    \"\"\"\n    Muuttaa ISO 8601 aikaleiman paikallisen aikavy\u00f6hykkeen datetime.date formaattia olevaksi p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4ksi\n\n    Args:\n        iso_date (timestamp): Aikaleima ISO 8601 formaatissa\n\n    Returns:\n        (datetime.date): P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 vvvv-kk-pp\n\n    \"\"\"\n    if iso_date:\n        # Muunnetaan aikaleima UTC-ajaksi\n        utc_time = datetime.fromisoformat(iso_date.replace(\"Z\", \"+00:00\"))\n\n        # Selvitet\u00e4\u00e4n paikallinen aikavy\u00f6hyke\n        local_timezone = get_localzone()\n\n        # Muunnetaan utc-aikaleima paikalliseen aikaan\n        local_time = utc_time.astimezone(local_timezone)\n\n        # Palauta pelkk\u00e4 p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4\n        return local_time.date()\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.format_time_columns","title":"<code>format_time_columns(df, column_list)</code>","text":"<p>Muuttaa parametrina annettujen aikaleimasarakkeiden ajan lokaaliksi ja  formaatttiin ISO 8601 -&gt; datetime.date.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe, jossa formatoitavat sarakkeet.</p> required <code>column_list</code> <code>list</code> <p>Lista sarakenimist\u00e4.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame, jossa m\u00e4\u00e4ritellyt sarakkeet formatoitu.</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def format_time_columns(df, column_list):\n    \"\"\"\n    Muuttaa parametrina annettujen aikaleimasarakkeiden ajan lokaaliksi ja \n    formaatttiin ISO 8601 -&gt; datetime.date.\n\n    Args:\n        df (DataFrame): Dataframe, jossa formatoitavat sarakkeet.\n        column_list (list): Lista sarakenimist\u00e4.\n\n    Returns:\n        (DataFrame): DataFrame, jossa m\u00e4\u00e4ritellyt sarakkeet formatoitu.\n    \"\"\"\n    for column in column_list:\n        # Muutetaan aikaleima datetime-objektiksi ja poistetaan aikavy\u00f6hyke\n        df[column] = df[column].apply(convert_timestamp_to_local_date)\n\n    return df\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.get_background_color","title":"<code>get_background_color()</code>","text":"<p>Palauttaa aktiivisen taustav\u00e4rin.</p> <p>Returns:</p> Type Description <code>str</code> <p>Taustav\u00e4ri.</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def get_background_color():\n    \"\"\"\n    Palauttaa aktiivisen taustav\u00e4rin.\n\n    Returns:\n        (str): Taustav\u00e4ri.\n    \"\"\"\n    theme = st_theme()\n    return theme['backgroundColor'].lower() if theme else None\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.get_title_color","title":"<code>get_title_color()</code>","text":"<p>Palauttaa otsikon v\u00e4rin valitun v\u00e4riteeman mukaan. Ei kannata k\u00e4ytt\u00e4\u00e4, koska hakemisessa on viivett\u00e4.</p> <p>Returns:</p> Type Description <code>str</code> <p>Otsikon v\u00e4ri taustav\u00e4rin mukaan.</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def get_title_color():\n    \"\"\"\n    Palauttaa otsikon v\u00e4rin valitun v\u00e4riteeman mukaan.\n    Ei kannata k\u00e4ytt\u00e4\u00e4, koska hakemisessa on viivett\u00e4.\n\n    Returns:\n        (str): Otsikon v\u00e4ri taustav\u00e4rin mukaan.\n    \"\"\"\n    bc = get_background_color()\n    if bc and bc.lower() == dark_background:\n        return white_color\n    return light_primary_color\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.make_donut","title":"<code>make_donut(input_response, input_text, input_color)</code>","text":"<p>Donitsikaavio annettujen parametrien mukaisesti. Koodin l\u00e4hde: https://github.com/dataprofessor/population-dashboard/blob/master/streamlit_app.py</p> <p>Parameters:</p> Name Type Description Default <code>input_response</code> <code>int</code> <p>Arvo.</p> required <code>input_text</code> <code>str</code> <p>Teksti.</p> required <code>input_color</code> <code>str</code> <p>V\u00e4riteema.</p> required Source code in <code>src\\libraries\\components.py</code> <pre><code>def make_donut(input_response, input_text, input_color):\n    \"\"\"\n    Donitsikaavio annettujen parametrien mukaisesti.\n    Koodin l\u00e4hde: https://github.com/dataprofessor/population-dashboard/blob/master/streamlit_app.py\n\n    Args:\n        input_response (int): Arvo.\n        input_text (str): Teksti.\n        input_color (str): V\u00e4riteema.\n    \"\"\"\n    if input_color == 'blue':\n        chart_color = [light_primary_color, dark_primary_color] # RepoRousku\n    if input_color == 'green':\n        chart_color = ['#27AE60', '#12783D']\n    if input_color == 'orange':\n        chart_color = ['#F49E25', '#FAEBC8'] # RepoRousku\n    if input_color == 'red':\n        chart_color = ['#E74C3C', '#781F16']\n\n    source = pd.DataFrame({\n        \"Topic\": ['', input_text],\n        \"% value\": [100-input_response, input_response]\n    })\n    source_bg = pd.DataFrame({\n        \"Topic\": ['', input_text],\n        \"% value\": [100, 0]\n    })\n\n    plot = alt.Chart(source).mark_arc(innerRadius=45, cornerRadius=25).encode(\n        theta=\"% value\",\n        color= alt.Color(\"Topic:N\",\n                        scale=alt.Scale(\n                            #domain=['A', 'B'],\n                            domain=[input_text, ''],\n                            # range=['#29b5e8', '#155F7A']),  # 31333F\n                            range=chart_color),\n                        legend=None),\n    ).properties(width=130, height=130)\n\n    text = plot.mark_text(align='center', color=\"#29b5e8\", font=\"Lato\", fontSize=32, fontWeight=700, fontStyle=\"italic\").encode(text=alt.value(f'{input_response} %'))\n    plot_bg = alt.Chart(source_bg).mark_arc(innerRadius=45, cornerRadius=20).encode(\n        theta=\"% value\",\n        color= alt.Color(\"Topic:N\",\n                        scale=alt.Scale(\n                            # domain=['A', 'B'],\n                            domain=[input_text, ''],\n                            range=chart_color),  # 31333F\n                        legend=None),\n    ).properties(width=130, height=130)\n    return plot_bg + plot + text\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.make_page_title","title":"<code>make_page_title(page_title, project_name, avatar_url=None)</code>","text":"<p>Sivun otsikko alleviivauksella ja mahdollisella avattarella.</p> <p>Parameters:</p> Name Type Description Default <code>page_title</code> <code>str</code> <p>Sivun nimi.</p> required <code>project_name</code> <code>str</code> <p>Projektin nimi.</p> required <code>avatar_url</code> <code>str</code> <p>Projektin avattaren url.</p> <code>None</code> Source code in <code>src\\libraries\\components.py</code> <pre><code>def make_page_title(page_title, project_name, avatar_url=None):\n    \"\"\"\n    Sivun otsikko alleviivauksella ja mahdollisella avattarella.\n\n    Args:\n        page_title (str): Sivun nimi.\n        project_name (str): Projektin nimi.\n        avatar_url (str, optional): Projektin avattaren url.\n    \"\"\"\n    # Otsikko avattarella, jos kuva m\u00e4\u00e4ritelty ja oikeudet riitt\u00e4v\u00e4t sen saamiseen\n    if avatar_url and requests.get(avatar_url).status_code == 200:\n        st.markdown(\n            f'&lt;div style=\"display: flex; align-items: center;\"&gt;'\n            f'&lt;h2 style=\"color: {light_primary_color}; margin-top: 0px; margin-bottom: 5px;\"&gt;{page_title + \": \"+  project_name}&lt;/h2&gt;'\n            f'&lt;img src=\"{avatar_url}\" width=\"50\" style=\"margin-right: 10px;\"&gt;'\n            f'&lt;/div&gt;',\n            unsafe_allow_html=True\n        )\n    # Pelkk\u00e4 otsikko\n    else:\n        title = page_title + \": \" + project_name\n        st.markdown(\n            f'&lt;h2 style=\"color: {light_primary_color}; margin-top: 0px; margin-bottom: 5px;\"&gt;{title}&lt;/h2&gt;',\n            unsafe_allow_html=True\n        )\n\n    # Viiva otsikon alapuolelle\n    st.markdown(\n        f\"&lt;hr style='margin-top: 0px; margin-bottom: 0px; border: 1px solid {red_color};'&gt;\",\n        unsafe_allow_html=True\n    )\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.make_start_page_button","title":"<code>make_start_page_button()</code>","text":"<p>Kehoite ja painike projektin valintaan.</p> Source code in <code>src\\libraries\\components.py</code> <pre><code>def make_start_page_button():\n    \"\"\"\n    Kehoite ja painike projektin valintaan.\n    \"\"\"\n    st.info(info_specify_proj, icon=\"\u2139\ufe0f\")\n    if st.button(specify_proj):\n        st.switch_page('app_pages/start.py')\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.make_team_member_selector","title":"<code>make_team_member_selector(member_list)</code>","text":"<p>Projektiryhm\u00e4n j\u00e4senten listaus ja valinta tarkasteluun.</p> <p>Parameters:</p> Name Type Description Default <code>member_list</code> <code>list</code> <p>Lista j\u00e4senten nimist\u00e4.</p> required Source code in <code>src\\libraries\\components.py</code> <pre><code>def make_team_member_selector(member_list):\n    \"\"\"\n    Projektiryhm\u00e4n j\u00e4senten listaus ja valinta tarkasteluun.\n\n    Args:\n        member_list (list): Lista j\u00e4senten nimist\u00e4.\n    \"\"\"\n    st.markdown(\n        '''\n        &lt;style&gt;\n        .css-1lcbmhc { margin-top: -16px; }\n        &lt;/style&gt;\n        ''',\n        unsafe_allow_html=True\n    )\n\n    selected = st.pills(\n        members,\n        sorted(member_list),\n        selection_mode = 'multi',\n        default = member_list,\n        help = help_project_member)\n\n    return selected\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.components.validate_url","title":"<code>validate_url(url)</code>","text":"<p>Tarkastaa, onko annettu url validi.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Tarkastettava url.</p> required Source code in <code>src\\libraries\\components.py</code> <pre><code>def validate_url(url):\n    \"\"\"\n    Tarkastaa, onko annettu url validi.\n\n    Args:\n        url (str): Tarkastettava url.\n    \"\"\"\n    if not url.startswith(\"https://\") or url == \"https://\":\n        return False\n\n    try:\n        response = requests.get(url)\n        try:\n            response.raise_for_status()\n            return True\n        except requests.exceptions.HTTPError:\n            return False\n    except requests.exceptions.ConnectionError:\n        return False\n</code></pre>"},{"location":"modules_api_reference/#tokenit","title":"Tokenit","text":"<p>Dokumentaatio <code>env_tokens.py</code> -moduulista, joka sis\u00e4lt\u00e4\u00e4 tokenien k\u00e4sittelyyn liittyv\u00e4t funktiot.</p> <p>Moduuli tarjoaa apufunktioita ymp\u00e4rist\u00f6muuttujatiedoston k\u00e4sittelyyn. Se sis\u00e4lt\u00e4\u00e4 toiminnallisuudet access tokenien tallentamiseen, poistamiseen ja noutamiseen ymp\u00e4rist\u00f6tiedostosta.</p>"},{"location":"modules_api_reference/#src.libraries.env_tokens.get_env_tokens","title":"<code>get_env_tokens()</code>","text":"<p>Palauttaa ymp\u00e4rist\u00f6\u00f6n tallennetut tokenit.</p> <p>Returns:</p> Type Description <code>tuple</code> <p>GitLab-token, Clockify-token.</p> Source code in <code>src\\libraries\\env_tokens.py</code> <pre><code>def get_env_tokens():\n    \"\"\"\n    Palauttaa ymp\u00e4rist\u00f6\u00f6n tallennetut tokenit.\n\n    Returns:\n        (tuple): GitLab-token, Clockify-token.\n    \"\"\"\n    os.environ.pop(key_gitlab_token, None)\n    os.environ.pop(key_clockify_token, None)\n    load_dotenv(dotenv_path=env_path, override=True)\n    env_gitlab_token = os.getenv(key_gitlab_token,\"\")\n    env_clockify_token = os.getenv(key_clockify_token,\"\")\n\n    return env_gitlab_token, env_clockify_token\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.env_tokens.remove_tokens_from_env_file","title":"<code>remove_tokens_from_env_file()</code>","text":"<p>Poistaa ymp\u00e4rist\u00f6tiedostosta tokenit.</p> Source code in <code>src\\libraries\\env_tokens.py</code> <pre><code>def remove_tokens_from_env_file():\n    \"\"\"\n    Poistaa ymp\u00e4rist\u00f6tiedostosta tokenit.\n    \"\"\"\n    if os.path.exists(env_path):\n        with open(env_path, \"r\") as file:\n            lines = file.readlines()\n\n        # Kirjoitetaan takaisin kaikki muut rivit paitsi poistettavat muuttujat\n        with open(env_path, \"w\") as file:\n            for line in lines:\n                if not any(line.startswith(f\"{var_name}=\") for var_name in [key_gitlab_token, key_clockify_token]):\n                    file.write(line)\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.env_tokens.save_tokens_to_env","title":"<code>save_tokens_to_env(gitlab_token_value, clockify_token_value)</code>","text":"<p>Tallentaa tokenit ymp\u00e4rist\u00f6tiedostoon.</p> <p>Parameters:</p> Name Type Description Default <code>gitlab_token_value</code> <code>str</code> <p>GitLab-token.</p> required <code>clockify_token_value</code> <code>str</code> <p>Clockify-token.</p> required Source code in <code>src\\libraries\\env_tokens.py</code> <pre><code>def save_tokens_to_env(gitlab_token_value, clockify_token_value):\n    \"\"\"\n    Tallentaa tokenit ymp\u00e4rist\u00f6tiedostoon.\n\n    Args:\n        gitlab_token_value (str): GitLab-token.\n        clockify_token_value (str): Clockify-token.\n    \"\"\"\n    with open(env_path, \"w\") as f:\n        if gitlab_token_value:\n            f.write(f\"{key_gitlab_token}={gitlab_token_value}\\n\")\n\n        if clockify_token_value:\n            f.write(f\"{key_clockify_token}={clockify_token_value}\\n\")\n</code></pre>"},{"location":"modules_api_reference/#salaus","title":"Salaus","text":"<p>Dokumentaatio <code>encryption.py</code> -moduulista, joka sis\u00e4lt\u00e4\u00e4 tokenien salaukseen liittyv\u00e4t funktiot.</p> <p>Moduuli tokenien salauksen k\u00e4sittelyyn.</p> <p>Ei k\u00e4yt\u00f6ss\u00e4 nykyisess\u00e4 RepoRouskussa. Suunniteltu jatkokehityskohteeksi.</p>"},{"location":"modules_api_reference/#src.libraries.encryption.decrypt_message","title":"<code>decrypt_message(encrypted_message)</code>","text":"<p>Puretaan aiemmin salattu viesti.</p> Source code in <code>src\\libraries\\encryption.py</code> <pre><code>def decrypt_message(encrypted_message: str) -&gt; str:\n    \"\"\"Puretaan aiemmin salattu viesti.\"\"\"\n    key = load_key()  # Ladataan avain\n    encrypted_message = base64.urlsafe_b64decode(encrypted_message.encode())  # Puretaan Base64\n    fernet = Fernet(key)  # Alustetaan salausobjekti\n    decrypted_message = fernet.decrypt(encrypted_message)  # Puretaan salaus\n    return decrypted_message.decode()  # Palautetaan alkuper\u00e4inen viesti\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.encryption.encrypt_message","title":"<code>encrypt_message(message)</code>","text":"<p>Salataan viesti (esim. token) ja palautetaan se Base64-muodossa.</p> Source code in <code>src\\libraries\\encryption.py</code> <pre><code>def encrypt_message(message: str) -&gt; str:\n    \"\"\"Salataan viesti (esim. token) ja palautetaan se Base64-muodossa.\"\"\"\n    key = load_key()  # Ladataan avain\n    encoded_message = message.encode()  # Muutetaan merkkijono byteiksi\n    fernet = Fernet(key)  # Alustetaan salausobjekti\n    encrypted_message = fernet.encrypt(encoded_message)  # Salataan viesti\n    return base64.urlsafe_b64encode(encrypted_message).decode()  # Palautetaan salattu viesti base64-muodossa\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.encryption.generate_key","title":"<code>generate_key()</code>","text":"<p>Generoi salausavaimen ja tallenna se tiedostoon.</p> Source code in <code>src\\libraries\\encryption.py</code> <pre><code>def generate_key():\n    \"\"\"Generoi salausavaimen ja tallenna se tiedostoon.\"\"\"\n    key = Fernet.generate_key()\n    with open(\"secret.key\", \"wb\") as key_file:\n        key_file.write(key)\n</code></pre>"},{"location":"modules_api_reference/#src.libraries.encryption.load_key","title":"<code>load_key()</code>","text":"<p>Lataa salausavain tiedostosta.</p> Source code in <code>src\\libraries\\encryption.py</code> <pre><code>def load_key():\n    \"\"\"Lataa salausavain tiedostosta.\"\"\"\n    return open(\"secret.key\", \"rb\").read()\n</code></pre>"},{"location":"modules_api_reference/#inbound-api","title":"Inbound API","text":"<p>Dokumentaatio  <code>api/main.py</code> -moduulista, joka m\u00e4\u00e4rittelee RepoRouskun tarjoaman APIn.</p> <p>RepoRousku API -rajapinta toteutettuna FastAPI-sovelluksena, joka tarjoaa p\u00e4\u00e4syn RepoRousku-mikropalvelun v\u00e4itt\u00e4m\u00e4\u00e4n projektidataan.</p> <p>T\u00e4ss\u00e4 tiedostossa m\u00e4\u00e4ritell\u00e4\u00e4n API:n perustoiminnot ja reitit.</p>"},{"location":"modules_api_reference/#api.main.api_status","title":"<code>api_status()</code>  <code>async</code>","text":"<p>Palauttaa API:n nykyisen tilan.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Tila- ja versiotiedot.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/status\")\nasync def api_status():\n    \"\"\"\n    Palauttaa API:n nykyisen tilan.\n\n    Returns:\n        dict: Tila- ja versiotiedot.\n    \"\"\"\n    logger.debug(\"K\u00e4ytt\u00e4j\u00e4 pyysi API:n status-endpointtia.\")\n    return {\n        \"status\": \"running\",\n        \"version\": \"1.0.0\",\n        \"description\": \"RepoRousku API toimii oikein ja on valmis vastaanottamaan pyynt\u00f6j\u00e4.\"\n    }\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_gitlab_project_summary","title":"<code>get_gitlab_project_summary(project_url=Query(..., description='GitLab-projektin URL'), token=Header(None, alias='Authorization'))</code>  <code>async</code>","text":"<p>Hakee GitLab-projektin tilastot.</p> <p>Parameters:</p> Name Type Description Default <code>project_url</code> <code>str</code> <p>GitLab-projektin URL.</p> <code>Query(..., description='GitLab-projektin URL')</code> <code>token</code> <code>str</code> <p>K\u00e4ytt\u00e4j\u00e4n sy\u00f6tt\u00e4m\u00e4 token. Oletusarvona ymp\u00e4rist\u00f6muuttuja.</p> <code>Header(None, alias='Authorization')</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>Projektin tilastotiedot suunnitelman mukaisessa muodossa.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/api/v1/gitlab/project-summary\")\nasync def get_gitlab_project_summary(\n    project_url: str = Query(..., description=\"GitLab-projektin URL\"),\n    token: str = Header(None, alias=\"Authorization\")\n):\n    \"\"\"\n    Hakee GitLab-projektin tilastot.\n\n    Args:\n        project_url (str): GitLab-projektin URL.\n        token (str, optional): K\u00e4ytt\u00e4j\u00e4n sy\u00f6tt\u00e4m\u00e4 token. Oletusarvona ymp\u00e4rist\u00f6muuttuja.\n\n    Returns:\n        dict: Projektin tilastotiedot suunnitelman mukaisessa muodossa.\n    \"\"\"\n    auth_token = token.replace(\"Bearer \", \"\") if token else GITLAB_TOKEN\n    if not auth_token:\n        raise HTTPException(status_code=401, detail=\"Token puuttuu!\")\n\n    try:\n        # Alustetaan ProjectData-olio\n        project_data = ProjectData(project_url, auth_token)\n\n        # Haetaan projektin perustiedot\n        project_id = project_data.get_id()\n        name = project_data.get_name()\n        namespace = project_data.get_namespace_name()\n        creation_date = project_data.get_creation_date()\n        update_date = project_data.get_update_date()\n\n        # Haetaan projektin tilastot\n        milestones_df = project_data.get_milestones()\n        issues_df = project_data.get_issues()\n        commits_count = len(project_data.get_commits())\n        branches_count = project_data.count_branches()\n        merge_requests_df = project_data.get_merge_requests()\n\n        # Rakennetaan vastaus datasta\n        response = {\n            \"project_id\": project_id,\n            \"name\": name,\n            \"namespace\": namespace,\n            \"creation_date\": creation_date,\n            \"update_date\": update_date,\n            \"milestones\": {\n                \"total\": len(milestones_df),\n                \"active\": len(milestones_df[milestones_df[\"status\"] == \"Aktiivinen\"]) if not milestones_df.empty else 0,\n                \"upcoming\": len(milestones_df[milestones_df[\"status\"] == \"Tuleva\"]) if not milestones_df.empty else 0,\n                \"completed\": len(milestones_df[milestones_df[\"status\"] == \"P\u00e4\u00e4ttynyt\"]) if not milestones_df.empty else 0,\n            },\n            \"issues\": {\n                \"total\": len(issues_df),\n                \"open\": len(issues_df[issues_df[\"state\"] == \"opened\"]) if not issues_df.empty else 0,\n                \"closed\": len(issues_df[issues_df[\"state\"] == \"closed\"]) if not issues_df.empty else 0,\n            },\n            \"commits\": commits_count,\n            \"branches\": branches_count,\n            \"merge_requests\": {\n                \"total\": len(merge_requests_df),\n                \"open\": len(merge_requests_df[merge_requests_df[\"state\"] == \"opened\"]) if not merge_requests_df.empty else 0,\n            },\n        }\n\n        return response\n\n    except Exception as e:\n        print(f\"Error fetching project summary: {e}\")\n        raise HTTPException(status_code=500, detail=f\"Projektin tietojen haku ep\u00e4onnistui: {str(e)}\")\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_gitlab_token","title":"<code>get_gitlab_token()</code>","text":"<p>Hakee GITLAB_TOKEN ymp\u00e4rist\u00f6muuttujasta.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Token-arvo.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Jos ymp\u00e4rist\u00f6muuttujaa ei ole asetettu.</p> Source code in <code>api\\main.py</code> <pre><code>def get_gitlab_token():\n    \"\"\"\n    Hakee GITLAB_TOKEN ymp\u00e4rist\u00f6muuttujasta.\n\n    Returns:\n        str: Token-arvo.\n\n    Raises:\n        HTTPException: Jos ymp\u00e4rist\u00f6muuttujaa ei ole asetettu.\n    \"\"\"\n    token = os.getenv(\"GITLAB_TOKEN\")\n    if not token:\n        raise HTTPException(status_code=401, detail=\"GITLAB_TOKEN ymp\u00e4rist\u00f6muuttuja puuttuu.\")\n    return token\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_id_from_name_if_needed","title":"<code>get_id_from_name_if_needed(clockify, workspace_name=None, project_name=None, user_name=None)</code>","text":"<p>Hakee ID:n, jos sy\u00f6te on nimi (muuten k\u00e4ytt\u00e4\u00e4 suoraan ID:t\u00e4).</p> Source code in <code>api\\main.py</code> <pre><code>def get_id_from_name_if_needed(clockify, workspace_name=None, project_name=None, user_name=None):\n    \"\"\"\n    Hakee ID:n, jos sy\u00f6te on nimi (muuten k\u00e4ytt\u00e4\u00e4 suoraan ID:t\u00e4).\n    \"\"\"\n    # Hakee workspace ID:n, jos sy\u00f6tteen\u00e4 on nimi\n    if workspace_name and not workspace_name.isdigit():\n        workspace_id = clockify.get_workspace_id_by_name(workspace_name)\n    else:\n        workspace_id = workspace_name\n\n    # Hakee project ID:n, jos sy\u00f6tteen\u00e4 on nimi\n    if project_name and not project_name.isdigit():\n        project_id = clockify.get_project_id_by_name(workspace_id, project_name)\n    else:\n        project_id = project_name\n\n    # Hakee user ID:n, jos sy\u00f6tteen\u00e4 on nimi\n    if user_name and not user_name.isdigit():\n        user_id = clockify.get_user_id_by_name(workspace_id, user_name)\n    else:\n        user_id = user_name\n\n    return workspace_id, project_id, user_id\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_project_total_hours","title":"<code>get_project_total_hours(workspace_id, project_id)</code>  <code>async</code>","text":"<p>Palauttaa projektin kokonaistunnit ty\u00f6tilassa.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/api/v1/clockify/workspaces/{workspace_id}/projects/{project_id}/total-hours\")\nasync def get_project_total_hours(workspace_id: str, project_id: str):\n    \"\"\"\n    Palauttaa projektin kokonaistunnit ty\u00f6tilassa.\n    \"\"\"\n    try:\n        clockify = ClockifyData(CLOCKIFY_URL)\n\n        # Muunna nimet ID:iksi tarvittaessa\n        workspace_id, project_id, _ = get_id_from_name_if_needed(clockify, workspace_name=workspace_id, project_name=project_id)\n\n        clockify.workspace_id = workspace_id\n        clockify.project_id = project_id\n\n        # Hae kaikkien k\u00e4ytt\u00e4jien tunnit\n        user_hours_df = clockify.get_all_user_hours_df()\n\n        # Laske projektin kokonaistunnit\n        total_hours = user_hours_df[\"Ty\u00f6tunnit\"].sum() if not user_hours_df.empty else 0\n\n        return {\"project_id\": project_id, \"total_hours\": total_hours}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Projektin kokonaistuntien haku ep\u00e4onnistui: {str(e)}\")\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_projects","title":"<code>get_projects(workspace_id)</code>  <code>async</code>","text":"<p>Palauttaa kaikki projektit annetusta ty\u00f6tilasta.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/api/v1/clockify/workspaces/{workspace_id}/projects\")\nasync def get_projects(workspace_id: str):\n    \"\"\"\n    Palauttaa kaikki projektit annetusta ty\u00f6tilasta.\n    \"\"\"\n    try:\n        clockify = ClockifyData(CLOCKIFY_URL)\n\n        # Muunna ty\u00f6tilan nimi ID:ksi tarvittaessa\n        workspace_id, _, _ = get_id_from_name_if_needed(\n            clockify, \n            workspace_name=workspace_id\n        )\n\n        clockify.workspace_id = workspace_id\n        projects = clockify.get_projects()\n        if not projects:\n            return {\"projects\": [], \"message\": \"Ei l\u00f6ytynyt projekteja annetusta ty\u00f6tilasta.\"}\n        return {\"projects\": projects}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Projektien haku ep\u00e4onnistui: {str(e)}\")\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_sprint_hours","title":"<code>get_sprint_hours(workspace_id, project_id, gitlab_url=Query(..., description='GitLab-projektin URL'), token=Header(None, alias='Authorization'))</code>  <code>async</code>","text":"<p>Palauttaa k\u00e4ytt\u00e4jien sprinttikohtaiset tunnit GitLabin milestonejen perusteella.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/api/v1/clockify/workspaces/{workspace_id}/projects/{project_id}/sprint-hours\")\nasync def get_sprint_hours(\n    workspace_id: str,\n    project_id: str,\n    gitlab_url: str = Query(..., description=\"GitLab-projektin URL\"),\n    token: str = Header(None, alias=\"Authorization\"),\n):\n    \"\"\"\n    Palauttaa k\u00e4ytt\u00e4jien sprinttikohtaiset tunnit GitLabin milestonejen perusteella.\n    \"\"\"\n    # K\u00e4sitell\u00e4\u00e4n GitLab-token\n    gitlab_token = token.replace(\"Bearer \", \"\") if token else GITLAB_TOKEN\n    if not gitlab_token:\n        raise HTTPException(status_code=401, detail=\"GitLab-token puuttuu!\")\n\n    try:\n        clockify = ClockifyData(CLOCKIFY_URL)\n\n        # Muunna nimet ID:ksi tarvittaessa\n        workspace_id, project_id, _ = get_id_from_name_if_needed(\n            clockify,\n            workspace_name=workspace_id,\n            project_name=project_id,\n        )\n\n\n        clockify.workspace_id = workspace_id\n        clockify.project_id = project_id\n\n        # Hae sprinttikohtaiset tunnit ClockifyData-luokalla\n        sprint_hours_df = clockify.get_sprint_hours(gitlab_url, gitlab_token)\n        if sprint_hours_df.empty:\n            return {\n                \"sprint_hours\": [],\n                \"message\": \"Ei l\u00f6ytynyt sprinttikohtaisia tietoja annetulle projektille ja ty\u00f6tilalle.\",\n            }\n        # Palauta tulokset JSON-muodossa\n        return JSONResponse(sprint_hours_df.to_dict(orient=\"records\"))\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Sprinttituntien haku ep\u00e4onnistui: {str(e)}\",\n        )\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_tag_hours","title":"<code>get_tag_hours(workspace_id, project_id, user_names=Query(None, description='Pilkuilla eroteltu lista k\u00e4ytt\u00e4j\u00e4n nimist\u00e4, joille tunnit haetaan.'))</code>  <code>async</code>","text":"<p>Palauttaa projektin ty\u00f6tunnit tageittain. Tukee k\u00e4ytt\u00e4jien nimien tai kaikkien k\u00e4ytt\u00e4jien hakemista.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str</code> <p>Clockify-ty\u00f6tilan ID tai nimi.</p> required <code>project_id</code> <code>str</code> <p>Clockify-projektin ID tai nimi.</p> required <code>user_names</code> <code>str</code> <p>K\u00e4ytt\u00e4j\u00e4nimet pilkuilla eroteltuna. Oletuksena hakee kaikille k\u00e4ytt\u00e4jille.</p> <code>Query(None, description='Pilkuilla eroteltu lista k\u00e4ytt\u00e4j\u00e4n nimist\u00e4, joille tunnit haetaan.')</code> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/api/v1/clockify/workspaces/{workspace_id}/projects/{project_id}/tag-hours\")\nasync def get_tag_hours(\n    workspace_id: str,\n    project_id: str,\n    user_names: Optional[str] = Query(None, description=\"Pilkuilla eroteltu lista k\u00e4ytt\u00e4j\u00e4n nimist\u00e4, joille tunnit haetaan.\")\n):\n    \"\"\"\n    Palauttaa projektin ty\u00f6tunnit tageittain. Tukee k\u00e4ytt\u00e4jien nimien tai kaikkien k\u00e4ytt\u00e4jien hakemista.\n\n    Args:\n        workspace_id (str): Clockify-ty\u00f6tilan ID tai nimi.\n        project_id (str): Clockify-projektin ID tai nimi.\n        user_names (str, optional): K\u00e4ytt\u00e4j\u00e4nimet pilkuilla eroteltuna. Oletuksena hakee kaikille k\u00e4ytt\u00e4jille.\n    \"\"\"\n    try:\n        # ClockifyData-objekti\n        clockify = ClockifyData(CLOCKIFY_URL)\n\n        # Muunna nimet ID:ksi tarvittaessa\n        workspace_id, project_id, _ = get_id_from_name_if_needed(\n            clockify, workspace_name=workspace_id, project_name=project_id\n        )\n        clockify.workspace_id = workspace_id\n\n        # K\u00e4ytt\u00e4jien ID:t nimien perusteella, jos k\u00e4ytt\u00e4j\u00e4nimi\u00e4 annetaan\n        if not user_names:  # T\u00e4m\u00e4 tarkistaa, onko user_names None tai tyhj\u00e4\n            users_in_workspace = clockify.get_users_in_workspace()\n            if not users_in_workspace:\n                raise ValueError(\"Ei l\u00f6ytynyt ty\u00f6tilan k\u00e4ytt\u00e4ji\u00e4.\")\n            user_ids = [user[\"id\"] for user in users_in_workspace]\n        else:\n            # K\u00e4ytt\u00e4j\u00e4nimet tai ID:t, jaetaan ne pilkuilla ja k\u00e4sitell\u00e4\u00e4n erikseen\n            user_names_or_ids = user_names.split(\",\")\n            user_ids = []\n            for item in user_names_or_ids:\n                item = item.strip()\n                if item.isdigit():  # Jos se on numero, se on ID\n                    user_ids.append(item)\n                else:  # Jos se ei ole numero, se k\u00e4sitell\u00e4\u00e4n k\u00e4ytt\u00e4j\u00e4nimen\u00e4\n                    user_id = clockify.get_user_id_by_name(workspace_id, item)\n                    if user_id:  # Varmistetaan, ett\u00e4 user_id ei ole None\n                        user_ids.append(user_id)\n                    else:\n                        raise ValueError(f\"K\u00e4ytt\u00e4j\u00e4nimi '{item}' ei ole kelvollinen.\")\n\n            # Jos user_ids on tyhj\u00e4, se ei voi jatkua\n            if not user_ids:\n                raise ValueError(\"Ei l\u00f6ytynyt kelvollisia k\u00e4ytt\u00e4ji\u00e4.\")\n\n        # Debug: tulosta k\u00e4ytt\u00e4j\u00e4-ID:t ennen tagi-tuntien hakua\n        print(f\"User IDs: {user_ids}\")\n\n        # Hae projektin tagikohtaiset tunnit\n        tag_hours_df = clockify.get_project_tag_hours(project_id, user_ids)\n\n        # Tarkistetaan, ettei tag_hours_df ole None tai tyhj\u00e4\n        if tag_hours_df is None or tag_hours_df.empty:\n            return {\"tag_hours\": [], \"message\": \"Ei l\u00f6ytynyt tunnitietoja.\"}\n\n        # K\u00e4yd\u00e4\u00e4n l\u00e4pi kaikki tagit ja poistetaan tyhj\u00e4t tagit\n        tag_hours = []\n        for tag in tag_hours_df.to_dict(orient=\"records\"):\n            if tag.get(\"tag\") is not None:  # Varmistetaan, ett\u00e4 tag ei ole None\n                tag_hours.append(tag)\n\n        # Palautetaan tagit \n        return JSONResponse({\n            \"tag_hours\": tag_hours,\n        })\n\n    except Exception as e:\n        print(f\"Virhe: {str(e)}\")  # Debugging virheilmoitusta varten\n        raise HTTPException(status_code=500, detail=f\"Tagien tuntien haku ep\u00e4onnistui: {str(e)}\")\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_time_entries","title":"<code>get_time_entries(workspace_id, project_id, user_id)</code>  <code>async</code>","text":"<p>Palauttaa yksitt\u00e4isen k\u00e4ytt\u00e4j\u00e4n aikakirjaukset projektista.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/api/v1/clockify/workspaces/{workspace_id}/projects/{project_id}/users/{user_id}/time-entries\")\nasync def get_time_entries(workspace_id: str, project_id: str, user_id: str):\n    \"\"\"\n    Palauttaa yksitt\u00e4isen k\u00e4ytt\u00e4j\u00e4n aikakirjaukset projektista.\n    \"\"\"\n    try:\n        clockify = ClockifyData(CLOCKIFY_URL)\n\n        # Muunna nimet ID:iksi tarvittaessa\n        workspace_id, project_id, user_id = get_id_from_name_if_needed(\n            clockify, \n            workspace_name=workspace_id, \n            project_name=project_id, \n            user_name=user_id\n        )\n\n        # Aseta ID:t ClockifyData-objektiin\n        clockify.workspace_id = workspace_id\n        clockify.project_id = project_id\n        # Hae aikakirjaukset\n        time_entries_df = clockify.get_time_entries_df(user_id, project_id)\n        if time_entries_df.empty:\n            return {\"time_entries\": [], \"message\": \"Ei l\u00f6ytynyt aikakirjauksia k\u00e4ytt\u00e4j\u00e4lle projektissa.\"}\n        # Palauta tulokset JSON-muodossa\n        return JSONResponse(content=time_entries_df.to_dict(orient=\"records\"))\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Aikakirjausten haku ep\u00e4onnistui: {str(e)}\")\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_user_total_hours","title":"<code>get_user_total_hours(workspace_id, project_id, user_id)</code>  <code>async</code>","text":"<p>Palauttaa k\u00e4ytt\u00e4j\u00e4n kokonaistunnit projektissa.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/api/v1/clockify/workspaces/{workspace_id}/projects/{project_id}/users/{user_id}/total-hours\")\nasync def get_user_total_hours(workspace_id: str, project_id: str, user_id: str):\n    \"\"\"\n    Palauttaa k\u00e4ytt\u00e4j\u00e4n kokonaistunnit projektissa.\n    \"\"\"\n    try:\n        # Muutetaan nimist\u00e4 ID:t tarvittaessa\n        clockify = ClockifyData(CLOCKIFY_URL)\n        workspace_id, project_id, user_id = get_id_from_name_if_needed(clockify, workspace_id, project_id, user_id)\n\n        # K\u00e4sitell\u00e4\u00e4n Clockify API:lla\n\n        clockify.workspace_id = workspace_id\n        clockify.project_id = project_id\n        time_entries_df = clockify.get_time_entries_df(user_id, project_id)\n        total_hours = time_entries_df[\"duration_hours\"].sum() if not time_entries_df.empty else 0\n        return {\"user_id\": user_id, \"project_id\": project_id, \"total_hours\": total_hours}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"K\u00e4ytt\u00e4j\u00e4n kokonaistuntien haku ep\u00e4onnistui: {str(e)}\")\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_users_and_hours","title":"<code>get_users_and_hours(workspace_id, project_id)</code>  <code>async</code>","text":"<p>Palauttaa kaikkien projektin k\u00e4ytt\u00e4jien tunnit annetusta ty\u00f6tilasta.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/api/v1/clockify/workspaces/{workspace_id}/projects/{project_id}/users\")\nasync def get_users_and_hours(workspace_id: str, project_id: str):\n    \"\"\"\n    Palauttaa kaikkien projektin k\u00e4ytt\u00e4jien tunnit annetusta ty\u00f6tilasta.\n    \"\"\"\n    try:\n        clockify = ClockifyData(CLOCKIFY_URL)\n\n        # Muunna nimet ID:iksi tarvittaessa\n        workspace_id, project_id, _ = get_id_from_name_if_needed(\n            clockify, \n            workspace_name=workspace_id, \n            project_name=project_id\n        )\n\n        clockify.workspace_id = workspace_id\n        clockify.project_id = project_id\n        user_hours_df = clockify.get_all_user_hours_df()\n        if user_hours_df.empty:\n            return {\"users\": [], \"message\": \"Ei l\u00f6ytynyt tunnitietoja k\u00e4ytt\u00e4jille projektissa.\"}\n        # Palauta tulokset JSON-muodossa\n        return JSONResponse(content=user_hours_df.to_dict(orient=\"records\"))\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"K\u00e4ytt\u00e4j\u00e4tuntien haku ep\u00e4onnistui: {str(e)}\")\n</code></pre>"},{"location":"modules_api_reference/#api.main.get_workspaces","title":"<code>get_workspaces()</code>  <code>async</code>","text":"<p>Palauttaa kaikki saatavilla olevat ty\u00f6tilat.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/api/v1/clockify/workspaces\")\nasync def get_workspaces():\n    \"\"\"\n    Palauttaa kaikki saatavilla olevat ty\u00f6tilat.\n    \"\"\"\n    try:\n        clockify = ClockifyData(CLOCKIFY_URL)\n        workspaces = clockify.get_workspaces()\n        return {\"workspaces\": workspaces}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Ty\u00f6tilojen haku ep\u00e4onnistui: {str(e)}\")\n</code></pre>"},{"location":"modules_api_reference/#api.main.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>Tarkistaa API:n toimivuuden.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>API:n tilan ilmoittava viesti.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/health\")\nasync def health_check():\n    \"\"\"\n    Tarkistaa API:n toimivuuden.\n\n    Returns:\n        dict: API:n tilan ilmoittava viesti.\n    \"\"\"\n    logger.debug(\"K\u00e4ytt\u00e4j\u00e4 pyysi health-checki\u00e4.\")\n    return {\"status\": \"ok\", \"message\": \"Hyv\u00e4 Liisa! API w\u00f6rkkii oikein!\"}\n</code></pre>"},{"location":"modules_api_reference/#api.main.root","title":"<code>root()</code>  <code>async</code>","text":"<p>API:n juuripolku.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Tervetuloviesti API:n k\u00e4ytt\u00e4jille.</p> Source code in <code>api\\main.py</code> <pre><code>@app.get(\"/\")\nasync def root():\n    \"\"\"\n    API:n juuripolku.\n\n    Returns:\n        dict: Tervetuloviesti API:n k\u00e4ytt\u00e4jille.\n    \"\"\"\n    logger.debug(\"K\u00e4ytt\u00e4j\u00e4 pyysi juuripolkua.\")\n    return {\"message\": \"Tervetuloa RepoRousku API:in!\"}\n</code></pre>"},{"location":"modules_api_reference/#yksikkotestaus","title":"Yksikk\u00f6testaus","text":"<p>Dokumentaatio <code>unit_tests.py</code> moduulista.</p> <p>Yksikk\u00f6testit (PalikkaPalvelut)</p> <p>T\u00e4m\u00e4 moduuli sis\u00e4lt\u00e4\u00e4 yksikk\u00f6testej\u00e4 ProjectData- ja ClockifyData-luokille. Testit kattavat keskeiset toiminnot, kuten projektien, milestonejen, issueiden, committien, ty\u00f6tilojen ja aikakirjausten hakemisen.</p> <p>Testit on toteutettu pytestin avulla, ja k\u00e4ytett\u00e4v\u00e4 data on mock-datalla simuloitu.</p> <p>Testin lopussa tarkistetaan, ett\u00e4 HTML-raportti on luotu ja tulostetaan linkki sen avaamiseksi selaimessa.</p>"},{"location":"modules_api_reference/#tests.unit_tests.mock_clockify","title":"<code>mock_clockify()</code>","text":"<p>Luo mockatun ClockifyData-olion, jonka metodit palauttavat ennalta m\u00e4\u00e4ritelty\u00e4 testidataa.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>@pytest.fixture\ndef mock_clockify():\n    \"\"\"\n    Luo mockatun ClockifyData-olion, jonka metodit palauttavat\n    ennalta m\u00e4\u00e4ritelty\u00e4 testidataa.\n    \"\"\"\n    with patch(\"clockify_api.ClockifyData.__init__\", return_value=None):  # Mockaa __init__\n        clockify = ClockifyData()\n        clockify.clockify_url = \"https://mock.clockify.api/v1\" \n        clockify.headers = {\"X-Api-Key\": \"mock_api_key\"}\n        clockify.get_workspaces = MagicMock(return_value=test_workspaces_data)\n        clockify.get_projects = MagicMock(return_value=test_projects_data)\n        clockify.get_all_user_hours_df = MagicMock(return_value=pd.DataFrame(test_user_hours_data))\n        return clockify\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.project","title":"<code>project()</code>","text":"<p>Alustaa ProjectData-olion mock-tiedolla ja palauttaa sen testien k\u00e4ytt\u00f6\u00f6n.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>@pytest.fixture\ndef project():\n    \"\"\"\n    Alustaa ProjectData-olion mock-tiedolla ja palauttaa sen testien k\u00e4ytt\u00f6\u00f6n.\n    \"\"\"\n    proj = ProjectData(\"https://gitlab.example.com/test_project\", \"test_token\")\n    proj.project_meta_data = test_meta_data\n    proj.project_data = {\n        \"milestones\": test_milestones_data,\n        \"issues\": test_issues_data,\n        \"commits\": test_commits_data,\n        \"branches\": test_branches_data,\n        \"merge_requests\": test_merge_requests_data\n    }\n    return proj\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_count_branches","title":"<code>test_count_branches(project)</code>","text":"<p>Testaa branchien lukum\u00e4\u00e4r\u00e4n hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_count_branches(project):\n    \"\"\"\n    Testaa branchien lukum\u00e4\u00e4r\u00e4n hakua.\n    \"\"\"\n    print(\"Testataan branchien lukum\u00e4\u00e4r\u00e4n hakemista\")\n    assert project.count_branches() == 3  # Tarkistetaan, ett\u00e4 haettu m\u00e4\u00e4r\u00e4 vastaa odotettua\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_count_open_merge_requests","title":"<code>test_count_open_merge_requests(project)</code>","text":"<p>Testaa avoimien merge requestien lukum\u00e4\u00e4r\u00e4n hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_count_open_merge_requests(project):\n    \"\"\"\n    Testaa avoimien merge requestien lukum\u00e4\u00e4r\u00e4n hakua.\n    \"\"\"\n    print(\"Testataan avoimien merge requestien lukum\u00e4\u00e4r\u00e4n hakemista\")\n    assert project.count_open_merge_requests() == 2  # Testataan avoimien MR:ien m\u00e4\u00e4r\u00e4\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_all_user_hours_df","title":"<code>test_get_all_user_hours_df(mock_clockify)</code>","text":"<p>Testaa k\u00e4ytt\u00e4jien tuntien hakemista DataFrame-muodossa.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_all_user_hours_df(mock_clockify):\n    \"\"\"\n    Testaa k\u00e4ytt\u00e4jien tuntien hakemista DataFrame-muodossa.\n    \"\"\"\n    user_hours_df = mock_clockify.get_all_user_hours_df()\n    logger.debug(f\"Haetut k\u00e4ytt\u00e4j\u00e4tunnit: {user_hours_df}\")\n    assert len(user_hours_df) == 2\n    assert user_hours_df.loc[0, \"user\"] == \"User1\"\n    assert user_hours_df.loc[1, \"hours\"] == 20\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_assignees","title":"<code>test_get_assignees(project)</code>","text":"<p>Testaa assignee-hakua ja varmistaa, ett\u00e4 duplikaatit poistetaan.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_assignees(project):\n    \"\"\"\n    Testaa assignee-hakua ja varmistaa, ett\u00e4 duplikaatit poistetaan.\n    \"\"\"\n    print(\"Testataan assignee-hakua ja duplikaattien poistoa\")\n    assignees = project.get_assignees()\n    assert isinstance(assignees, list)\n    assert len(assignees) == 4\n    assert \"User1\" in assignees and \"User2\" in assignees and \"Dev1\" in assignees and \"Dev2\" in assignees\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_commits","title":"<code>test_get_commits(project)</code>","text":"<p>Testaa commit-tietojen hakua ja tarkistaa author_name-kent\u00e4n oikeellisuuden.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_commits(project):\n    \"\"\"\n    Testaa commit-tietojen hakua ja tarkistaa author_name-kent\u00e4n oikeellisuuden.\n    \"\"\"\n    print(\"Testataan commit-tietojen hakemista\")\n    commits_df = project.get_commits()\n    assert isinstance(commits_df, pd.DataFrame)\n    assert len(commits_df) == 2\n    assert \"author_name\" in commits_df.columns\n    assert commits_df[\"author_name\"].iloc[0] == \"Dev1\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_creation_date","title":"<code>test_get_creation_date(project)</code>","text":"<p>Testaa projektin luontip\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_creation_date(project):\n    \"\"\"\n    Testaa projektin luontip\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.\n    \"\"\"\n    print(\"Testataan projektin luontip\u00e4iv\u00e4n hakemista\")\n    assert project.get_creation_date() == \"01.11.2024\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_description","title":"<code>test_get_description(project)</code>","text":"<p>Testaa projektin kuvauksen hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_description(project):\n    \"\"\"\n    Testaa projektin kuvauksen hakua.\n    \"\"\"\n    print(\"Testataan projektin kuvauksen hakemista\")\n    assert project.get_description() == \"T\u00e4m\u00e4 on testiprojekti.\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_id","title":"<code>test_get_id(project)</code>","text":"<p>Testaa projektin ID:n hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_id(project):\n    \"\"\"\n    Testaa projektin ID:n hakua.\n    \"\"\"\n    print(\"Testataan projektin ID:n hakemista\")\n    assert project.get_id() == 1234\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_issues","title":"<code>test_get_issues(project)</code>","text":"<p>Testaa issue-tietojen hakua ja tarkistaa issueiden tilan sek\u00e4 assignee-nimien oikeellisuuden.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_issues(project):\n    \"\"\"\n    Testaa issue-tietojen hakua ja tarkistaa issueiden tilan sek\u00e4 assignee-nimien oikeellisuuden.\n    \"\"\"\n    print(\"Testataan issue-tietojen hakemista\")\n    issues_df = project.get_issues()\n    assert isinstance(issues_df, pd.DataFrame)\n    assert len(issues_df) == 2\n    assert \"assignees\" in issues_df.columns\n    assert issues_df[\"state\"].iloc[0] == \"opened\"\n    assert issues_df[\"state\"].iloc[1] == \"closed\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_milestones","title":"<code>test_get_milestones(project)</code>","text":"<p>Testaa milestone-tietojen hakua ja status-kent\u00e4n oikeellisuutta jokaiselle tilalle: P\u00e4\u00e4ttynyt, Aktiivinen, Tuleva.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_milestones(project):\n    \"\"\"\n    Testaa milestone-tietojen hakua ja status-kent\u00e4n oikeellisuutta jokaiselle tilalle: P\u00e4\u00e4ttynyt, Aktiivinen, Tuleva.\n    \"\"\"\n    print(\"Testataan milestone-tietojen hakemista\")\n    milestones_df = project.get_milestones()\n    assert isinstance(milestones_df, pd.DataFrame)\n    assert len(milestones_df) == 3\n    assert \"status\" in milestones_df.columns\n\n    assert milestones_df[\"status\"].iloc[0] == \"P\u00e4\u00e4ttynyt\"\n    assert milestones_df[\"status\"].iloc[1] == \"Aktiivinen\"\n    assert milestones_df[\"status\"].iloc[2] == \"Tuleva\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_name","title":"<code>test_get_name(project)</code>","text":"<p>Testaa projektin nimen hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_name(project):\n    \"\"\"\n    Testaa projektin nimen hakua.\n    \"\"\"\n    print(\"Testataan projektin nimen hakemista\")\n    assert project.get_name() == \"PalikkaTestiProjekti\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_namespace_name","title":"<code>test_get_namespace_name(project)</code>","text":"<p>Testaa projektin namespace-nimen hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_namespace_name(project):\n    \"\"\"\n    Testaa projektin namespace-nimen hakua.\n    \"\"\"\n    print(\"Testataan projektin namespace-nimen hakemista\")\n    assert project.get_namespace_name() == \"PalikkaNamespace\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_projects","title":"<code>test_get_projects(mock_clockify)</code>","text":"<p>Testaa projektien hakemista.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_projects(mock_clockify):\n    \"\"\"\n    Testaa projektien hakemista.\n    \"\"\"\n    projects = mock_clockify.get_projects()\n    logger.debug(f\"Haetut projektit: {projects}\")\n    assert len(projects) == 2\n    assert projects[0][\"name\"] == \"Test Project 1\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_update_date","title":"<code>test_get_update_date(project)</code>","text":"<p>Testaa projektin viimeisimm\u00e4n p\u00e4ivitysp\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_update_date(project):\n    \"\"\"\n    Testaa projektin viimeisimm\u00e4n p\u00e4ivitysp\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.\n    \"\"\"\n    print(\"Testataan projektin p\u00e4ivitysp\u00e4iv\u00e4n hakemista\")\n    assert project.get_update_date() == \"05.11.2024\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_visibility","title":"<code>test_get_visibility(project)</code>","text":"<p>Testaa projektin n\u00e4kyvyyden hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_visibility(project):\n    \"\"\"\n    Testaa projektin n\u00e4kyvyyden hakua.\n    \"\"\"\n    print(\"Testataan projektin n\u00e4kyvyyden hakemista\")\n    assert project.get_visibility() == \"private\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_workspaces","title":"<code>test_get_workspaces(mock_clockify)</code>","text":"<p>Testaa ty\u00f6tilojen hakemista.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_workspaces(mock_clockify):\n    \"\"\"\n    Testaa ty\u00f6tilojen hakemista.\n    \"\"\"\n    workspaces = mock_clockify.get_workspaces()\n    logger.debug(f\"Haetut ty\u00f6tilat: {workspaces}\")\n    assert len(workspaces) == 2\n    assert workspaces[0][\"name\"] == \"Test Workspace 1\"\n    assert workspaces[1][\"name\"] == \"Test Workspace 2\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_report_exists","title":"<code>test_report_exists()</code>","text":"<p>Testaa, ett\u00e4 testiraportti on luotu ja tulostaa linkin raportin avaamiseksi selaimessa.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_report_exists():\n    \"\"\"\n    Testaa, ett\u00e4 testiraportti on luotu ja tulostaa linkin raportin avaamiseksi selaimessa.\n    \"\"\"\n    report_path = \"tests/reports/unit_test_report.html\"\n    assert os.path.isfile(report_path), \"Testiraporttia ei l\u00f6ytynyt!\"\n    print(f\"Avaa testiraportti selaimessa osoitteessa: http://localhost:8010/unit_test_report.html\")\n</code></pre>"},{"location":"modules_api_reference/#integraatiotestaus","title":"Integraatiotestaus","text":"<p>Dokumentaatio <code>integration_tests.py</code> moduulista.</p> <p>Yksikk\u00f6testit (PalikkaPalvelut)</p> <p>T\u00e4m\u00e4 moduuli sis\u00e4lt\u00e4\u00e4 yksikk\u00f6testej\u00e4 ProjectData- ja ClockifyData-luokille. Testit kattavat keskeiset toiminnot, kuten projektien, milestonejen, issueiden, committien, ty\u00f6tilojen ja aikakirjausten hakemisen.</p> <p>Testit on toteutettu pytestin avulla, ja k\u00e4ytett\u00e4v\u00e4 data on mock-datalla simuloitu.</p> <p>Testin lopussa tarkistetaan, ett\u00e4 HTML-raportti on luotu ja tulostetaan linkki sen avaamiseksi selaimessa.</p>"},{"location":"modules_api_reference/#tests.unit_tests.mock_clockify","title":"<code>mock_clockify()</code>","text":"<p>Luo mockatun ClockifyData-olion, jonka metodit palauttavat ennalta m\u00e4\u00e4ritelty\u00e4 testidataa.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>@pytest.fixture\ndef mock_clockify():\n    \"\"\"\n    Luo mockatun ClockifyData-olion, jonka metodit palauttavat\n    ennalta m\u00e4\u00e4ritelty\u00e4 testidataa.\n    \"\"\"\n    with patch(\"clockify_api.ClockifyData.__init__\", return_value=None):  # Mockaa __init__\n        clockify = ClockifyData()\n        clockify.clockify_url = \"https://mock.clockify.api/v1\" \n        clockify.headers = {\"X-Api-Key\": \"mock_api_key\"}\n        clockify.get_workspaces = MagicMock(return_value=test_workspaces_data)\n        clockify.get_projects = MagicMock(return_value=test_projects_data)\n        clockify.get_all_user_hours_df = MagicMock(return_value=pd.DataFrame(test_user_hours_data))\n        return clockify\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.project","title":"<code>project()</code>","text":"<p>Alustaa ProjectData-olion mock-tiedolla ja palauttaa sen testien k\u00e4ytt\u00f6\u00f6n.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>@pytest.fixture\ndef project():\n    \"\"\"\n    Alustaa ProjectData-olion mock-tiedolla ja palauttaa sen testien k\u00e4ytt\u00f6\u00f6n.\n    \"\"\"\n    proj = ProjectData(\"https://gitlab.example.com/test_project\", \"test_token\")\n    proj.project_meta_data = test_meta_data\n    proj.project_data = {\n        \"milestones\": test_milestones_data,\n        \"issues\": test_issues_data,\n        \"commits\": test_commits_data,\n        \"branches\": test_branches_data,\n        \"merge_requests\": test_merge_requests_data\n    }\n    return proj\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_count_branches","title":"<code>test_count_branches(project)</code>","text":"<p>Testaa branchien lukum\u00e4\u00e4r\u00e4n hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_count_branches(project):\n    \"\"\"\n    Testaa branchien lukum\u00e4\u00e4r\u00e4n hakua.\n    \"\"\"\n    print(\"Testataan branchien lukum\u00e4\u00e4r\u00e4n hakemista\")\n    assert project.count_branches() == 3  # Tarkistetaan, ett\u00e4 haettu m\u00e4\u00e4r\u00e4 vastaa odotettua\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_count_open_merge_requests","title":"<code>test_count_open_merge_requests(project)</code>","text":"<p>Testaa avoimien merge requestien lukum\u00e4\u00e4r\u00e4n hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_count_open_merge_requests(project):\n    \"\"\"\n    Testaa avoimien merge requestien lukum\u00e4\u00e4r\u00e4n hakua.\n    \"\"\"\n    print(\"Testataan avoimien merge requestien lukum\u00e4\u00e4r\u00e4n hakemista\")\n    assert project.count_open_merge_requests() == 2  # Testataan avoimien MR:ien m\u00e4\u00e4r\u00e4\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_all_user_hours_df","title":"<code>test_get_all_user_hours_df(mock_clockify)</code>","text":"<p>Testaa k\u00e4ytt\u00e4jien tuntien hakemista DataFrame-muodossa.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_all_user_hours_df(mock_clockify):\n    \"\"\"\n    Testaa k\u00e4ytt\u00e4jien tuntien hakemista DataFrame-muodossa.\n    \"\"\"\n    user_hours_df = mock_clockify.get_all_user_hours_df()\n    logger.debug(f\"Haetut k\u00e4ytt\u00e4j\u00e4tunnit: {user_hours_df}\")\n    assert len(user_hours_df) == 2\n    assert user_hours_df.loc[0, \"user\"] == \"User1\"\n    assert user_hours_df.loc[1, \"hours\"] == 20\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_assignees","title":"<code>test_get_assignees(project)</code>","text":"<p>Testaa assignee-hakua ja varmistaa, ett\u00e4 duplikaatit poistetaan.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_assignees(project):\n    \"\"\"\n    Testaa assignee-hakua ja varmistaa, ett\u00e4 duplikaatit poistetaan.\n    \"\"\"\n    print(\"Testataan assignee-hakua ja duplikaattien poistoa\")\n    assignees = project.get_assignees()\n    assert isinstance(assignees, list)\n    assert len(assignees) == 4\n    assert \"User1\" in assignees and \"User2\" in assignees and \"Dev1\" in assignees and \"Dev2\" in assignees\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_commits","title":"<code>test_get_commits(project)</code>","text":"<p>Testaa commit-tietojen hakua ja tarkistaa author_name-kent\u00e4n oikeellisuuden.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_commits(project):\n    \"\"\"\n    Testaa commit-tietojen hakua ja tarkistaa author_name-kent\u00e4n oikeellisuuden.\n    \"\"\"\n    print(\"Testataan commit-tietojen hakemista\")\n    commits_df = project.get_commits()\n    assert isinstance(commits_df, pd.DataFrame)\n    assert len(commits_df) == 2\n    assert \"author_name\" in commits_df.columns\n    assert commits_df[\"author_name\"].iloc[0] == \"Dev1\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_creation_date","title":"<code>test_get_creation_date(project)</code>","text":"<p>Testaa projektin luontip\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_creation_date(project):\n    \"\"\"\n    Testaa projektin luontip\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.\n    \"\"\"\n    print(\"Testataan projektin luontip\u00e4iv\u00e4n hakemista\")\n    assert project.get_creation_date() == \"01.11.2024\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_description","title":"<code>test_get_description(project)</code>","text":"<p>Testaa projektin kuvauksen hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_description(project):\n    \"\"\"\n    Testaa projektin kuvauksen hakua.\n    \"\"\"\n    print(\"Testataan projektin kuvauksen hakemista\")\n    assert project.get_description() == \"T\u00e4m\u00e4 on testiprojekti.\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_id","title":"<code>test_get_id(project)</code>","text":"<p>Testaa projektin ID:n hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_id(project):\n    \"\"\"\n    Testaa projektin ID:n hakua.\n    \"\"\"\n    print(\"Testataan projektin ID:n hakemista\")\n    assert project.get_id() == 1234\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_issues","title":"<code>test_get_issues(project)</code>","text":"<p>Testaa issue-tietojen hakua ja tarkistaa issueiden tilan sek\u00e4 assignee-nimien oikeellisuuden.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_issues(project):\n    \"\"\"\n    Testaa issue-tietojen hakua ja tarkistaa issueiden tilan sek\u00e4 assignee-nimien oikeellisuuden.\n    \"\"\"\n    print(\"Testataan issue-tietojen hakemista\")\n    issues_df = project.get_issues()\n    assert isinstance(issues_df, pd.DataFrame)\n    assert len(issues_df) == 2\n    assert \"assignees\" in issues_df.columns\n    assert issues_df[\"state\"].iloc[0] == \"opened\"\n    assert issues_df[\"state\"].iloc[1] == \"closed\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_milestones","title":"<code>test_get_milestones(project)</code>","text":"<p>Testaa milestone-tietojen hakua ja status-kent\u00e4n oikeellisuutta jokaiselle tilalle: P\u00e4\u00e4ttynyt, Aktiivinen, Tuleva.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_milestones(project):\n    \"\"\"\n    Testaa milestone-tietojen hakua ja status-kent\u00e4n oikeellisuutta jokaiselle tilalle: P\u00e4\u00e4ttynyt, Aktiivinen, Tuleva.\n    \"\"\"\n    print(\"Testataan milestone-tietojen hakemista\")\n    milestones_df = project.get_milestones()\n    assert isinstance(milestones_df, pd.DataFrame)\n    assert len(milestones_df) == 3\n    assert \"status\" in milestones_df.columns\n\n    assert milestones_df[\"status\"].iloc[0] == \"P\u00e4\u00e4ttynyt\"\n    assert milestones_df[\"status\"].iloc[1] == \"Aktiivinen\"\n    assert milestones_df[\"status\"].iloc[2] == \"Tuleva\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_name","title":"<code>test_get_name(project)</code>","text":"<p>Testaa projektin nimen hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_name(project):\n    \"\"\"\n    Testaa projektin nimen hakua.\n    \"\"\"\n    print(\"Testataan projektin nimen hakemista\")\n    assert project.get_name() == \"PalikkaTestiProjekti\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_namespace_name","title":"<code>test_get_namespace_name(project)</code>","text":"<p>Testaa projektin namespace-nimen hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_namespace_name(project):\n    \"\"\"\n    Testaa projektin namespace-nimen hakua.\n    \"\"\"\n    print(\"Testataan projektin namespace-nimen hakemista\")\n    assert project.get_namespace_name() == \"PalikkaNamespace\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_projects","title":"<code>test_get_projects(mock_clockify)</code>","text":"<p>Testaa projektien hakemista.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_projects(mock_clockify):\n    \"\"\"\n    Testaa projektien hakemista.\n    \"\"\"\n    projects = mock_clockify.get_projects()\n    logger.debug(f\"Haetut projektit: {projects}\")\n    assert len(projects) == 2\n    assert projects[0][\"name\"] == \"Test Project 1\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_update_date","title":"<code>test_get_update_date(project)</code>","text":"<p>Testaa projektin viimeisimm\u00e4n p\u00e4ivitysp\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_update_date(project):\n    \"\"\"\n    Testaa projektin viimeisimm\u00e4n p\u00e4ivitysp\u00e4iv\u00e4n hakua ja muodon oikeellisuutta.\n    \"\"\"\n    print(\"Testataan projektin p\u00e4ivitysp\u00e4iv\u00e4n hakemista\")\n    assert project.get_update_date() == \"05.11.2024\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_visibility","title":"<code>test_get_visibility(project)</code>","text":"<p>Testaa projektin n\u00e4kyvyyden hakua.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_visibility(project):\n    \"\"\"\n    Testaa projektin n\u00e4kyvyyden hakua.\n    \"\"\"\n    print(\"Testataan projektin n\u00e4kyvyyden hakemista\")\n    assert project.get_visibility() == \"private\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_get_workspaces","title":"<code>test_get_workspaces(mock_clockify)</code>","text":"<p>Testaa ty\u00f6tilojen hakemista.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_get_workspaces(mock_clockify):\n    \"\"\"\n    Testaa ty\u00f6tilojen hakemista.\n    \"\"\"\n    workspaces = mock_clockify.get_workspaces()\n    logger.debug(f\"Haetut ty\u00f6tilat: {workspaces}\")\n    assert len(workspaces) == 2\n    assert workspaces[0][\"name\"] == \"Test Workspace 1\"\n    assert workspaces[1][\"name\"] == \"Test Workspace 2\"\n</code></pre>"},{"location":"modules_api_reference/#tests.unit_tests.test_report_exists","title":"<code>test_report_exists()</code>","text":"<p>Testaa, ett\u00e4 testiraportti on luotu ja tulostaa linkin raportin avaamiseksi selaimessa.</p> Source code in <code>tests\\unit_tests.py</code> <pre><code>def test_report_exists():\n    \"\"\"\n    Testaa, ett\u00e4 testiraportti on luotu ja tulostaa linkin raportin avaamiseksi selaimessa.\n    \"\"\"\n    report_path = \"tests/reports/unit_test_report.html\"\n    assert os.path.isfile(report_path), \"Testiraporttia ei l\u00f6ytynyt!\"\n    print(f\"Avaa testiraportti selaimessa osoitteessa: http://localhost:8010/unit_test_report.html\")\n</code></pre>"},{"location":"modules_api_reference/#outbound-apin-testaus","title":"Outbound APIn testaus","text":"<p>Dokumentaatio <code>api_tests.py</code> moduulista, joka testaa tietojen hakua GitLabista ja Clockifyst\u00e4.</p> <p>API-testit (PalikkaPalvelut)</p> <p>T\u00e4m\u00e4 moduuli sis\u00e4lt\u00e4\u00e4 API-testit GitLab- ja Clockify-projekteille. N\u00e4iss\u00e4 testeiss\u00e4 tarkastellaan erityisesti projektitietojen hakua eri token-tilanteissa: toimivalla, virheellisell\u00e4 ja vanhentuneella tokenilla. GitLabin osalta testataan my\u00f6s j\u00e4senyys- ja n\u00e4kyvyystilanteita.</p> <p>Huom: T\u00e4ss\u00e4 tiedostossa ei testata tapausta, jossa token puuttuu kokonaan. T\u00e4m\u00e4 johtuu siit\u00e4, ett\u00e4 sovelluksen  k\u00e4ytt\u00f6liittym\u00e4 (<code>start.py</code>) tarkistaa tokenin olemassaolon ennen API-kutsuja. Jos token puuttuu, sovellus  n\u00e4ytt\u00e4\u00e4 virheilmoituksen k\u00e4ytt\u00f6liittym\u00e4ss\u00e4 eik\u00e4 aloita projektitietojen hakua.</p>"},{"location":"modules_api_reference/#tests.api_tests.expired_project","title":"<code>expired_project()</code>","text":"<p>Testiprojekti vanhentuneella tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef expired_project():\n    \"\"\"Testiprojekti vanhentuneella tokenilla.\"\"\"\n    return ProjectData(own_project_url, expired_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.invalid_clockify","title":"<code>invalid_clockify()</code>","text":"<p>Palauttaa ClockifyData-olion v\u00e4\u00e4r\u00e4ll\u00e4 tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef invalid_clockify():\n    \"\"\"Palauttaa ClockifyData-olion v\u00e4\u00e4r\u00e4ll\u00e4 tokenilla.\"\"\"\n    return ClockifyData(clockify_url=clockify_url, api_key=invalid_clockify_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.invalid_project","title":"<code>invalid_project()</code>","text":"<p>Testiprojekti virheellisell\u00e4 tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef invalid_project():\n    \"\"\"Testiprojekti virheellisell\u00e4 tokenilla.\"\"\"\n    return ProjectData(own_project_url, invalid_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.private_project_no_access","title":"<code>private_project_no_access()</code>","text":"<p>Testiprojekti yksityisell\u00e4 URL:lla ilman j\u00e4senyytt\u00e4.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef private_project_no_access():\n    \"\"\"Testiprojekti yksityisell\u00e4 URL:lla ilman j\u00e4senyytt\u00e4.\"\"\"\n    return ProjectData(private_project_url, valid_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.public_project","title":"<code>public_project()</code>","text":"<p>Testiprojekti julkisella URL:lla ilman j\u00e4senyytt\u00e4.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef public_project():\n    \"\"\"Testiprojekti julkisella URL:lla ilman j\u00e4senyytt\u00e4.\"\"\"\n    return ProjectData(public_project_url, valid_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_get_projects_with_invalid_token","title":"<code>test_get_projects_with_invalid_token(invalid_clockify)</code>","text":"<p>Testaa projektien hakua virheellisell\u00e4 tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_get_projects_with_invalid_token(invalid_clockify):\n    \"\"\"Testaa projektien hakua virheellisell\u00e4 tokenilla.\"\"\"\n    invalid_clockify.workspace_id = valid_workspace_id\n    projects = invalid_clockify.get_projects()\n    assert projects == [], \"Virheellisen tokenin pit\u00e4isi palauttaa tyhj\u00e4 lista projekteille\"\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_invalid_token_get_workspaces","title":"<code>test_invalid_token_get_workspaces(invalid_clockify)</code>","text":"<p>Testaa ty\u00f6tilojen hakua virheellisell\u00e4 tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_invalid_token_get_workspaces(invalid_clockify):\n    \"\"\"Testaa ty\u00f6tilojen hakua virheellisell\u00e4 tokenilla.\"\"\"\n    workspaces = invalid_clockify.get_workspaces()\n    assert workspaces == [], \"Virheellisen tokenin pit\u00e4isi palauttaa tyhj\u00e4 lista\"\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_private_project_no_access","title":"<code>test_private_project_no_access(private_project_no_access)</code>","text":"<p>Testataan yksityisen projektin hakua ilman j\u00e4senyytt\u00e4.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_private_project_no_access(private_project_no_access):\n    \"\"\"Testataan yksityisen projektin hakua ilman j\u00e4senyytt\u00e4.\"\"\"\n    print(\"Testataan yksityisen projektin hakua ilman j\u00e4senyytt\u00e4\")\n    meta_data = private_project_no_access.get_project_meta_data()\n    assert meta_data is None, \"Yksityisen projektin tietojen haku pit\u00e4isi ep\u00e4onnistua ilman j\u00e4senyytt\u00e4\"\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_project_meta_data_with_expired_token","title":"<code>test_project_meta_data_with_expired_token(expired_project)</code>","text":"<p>Testataan projektitietojen hakua vanhentuneella tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_project_meta_data_with_expired_token(expired_project):\n    \"\"\"Testataan projektitietojen hakua vanhentuneella tokenilla.\"\"\"\n    print(\"Testataan projektitietojen hakua vanhentuneella tokenilla\")\n    meta_data = expired_project.get_project_meta_data()\n    assert meta_data is None\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_project_meta_data_with_invalid_token","title":"<code>test_project_meta_data_with_invalid_token(invalid_project)</code>","text":"<p>Testataan projektitietojen hakua virheellisell\u00e4 tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_project_meta_data_with_invalid_token(invalid_project):\n    \"\"\"Testataan projektitietojen hakua virheellisell\u00e4 tokenilla.\"\"\"\n    print(\"Testataan projektitietojen hakua virheellisell\u00e4 tokenilla\")\n    meta_data = invalid_project.get_project_meta_data()\n    assert meta_data is None\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_project_meta_data_with_valid_token","title":"<code>test_project_meta_data_with_valid_token(valid_project)</code>","text":"<p>Testataan projektitietojen hakua oikealla tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_project_meta_data_with_valid_token(valid_project):\n    \"\"\"Testataan projektitietojen hakua oikealla tokenilla.\"\"\"\n    print(\"Testataan projektitietojen hakua oikealla tokenilla\")\n    meta_data = valid_project.get_project_meta_data()\n    assert meta_data is not None\n    assert isinstance(meta_data, dict)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_public_project_no_access","title":"<code>test_public_project_no_access(public_project)</code>","text":"<p>Testataan julkisen projektin hakua ilman j\u00e4senyytt\u00e4.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_public_project_no_access(public_project):\n    \"\"\"Testataan julkisen projektin hakua ilman j\u00e4senyytt\u00e4.\"\"\"\n    print(\"Testataan julkisen projektin hakua ilman j\u00e4senyytt\u00e4\")\n    meta_data = public_project.get_project_meta_data()\n    assert meta_data is not None, \"Julkisen projektin tietojen haku pit\u00e4isi onnistua ilman j\u00e4senyytt\u00e4\"\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_report_exists","title":"<code>test_report_exists()</code>","text":"<p>Testaa, ett\u00e4 testiraportti on luotu ja tulostaa linkin raportin avaamiseksi selaimessa.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_report_exists():\n    \"\"\"\n    Testaa, ett\u00e4 testiraportti on luotu ja tulostaa linkin raportin avaamiseksi selaimessa.\n    \"\"\"\n    report_path = \"tests/reports/api_test_report.html\"\n    assert os.path.isfile(report_path), \"Testiraporttia ei l\u00f6ytynyt!\"\n    print(f\"Avaa testiraportti selaimessa osoitteessa: http://localhost:8010/api_test_report.html\")\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_valid_get_projects","title":"<code>test_valid_get_projects(valid_clockify)</code>","text":"<p>Testaa projektien hakua oikealla tokenilla Clockifysta.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_valid_get_projects(valid_clockify):\n    \"\"\"Testaa projektien hakua oikealla tokenilla Clockifysta.\"\"\"\n    valid_clockify.workspace_id = \"workspace_123\"\n    with patch.object(valid_clockify, \"get_projects\", return_value=[{\"name\": \"Test Project\", \"id\": \"project_456\"}]):\n        projects = valid_clockify.get_projects()\n        assert isinstance(projects, list), \"Palautuksen pit\u00e4isi olla lista\"\n        assert len(projects) &gt; 0, \"Projektien pit\u00e4isi olla saatavilla valitusta ty\u00f6tilasta\"\n        assert projects[0][\"name\"] == \"Test Project\", \"Projektin nimi ei vastannut odotettua\"\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.test_valid_get_workspaces","title":"<code>test_valid_get_workspaces(valid_clockify)</code>","text":"<p>Testaa ty\u00f6tilojen hakua oikealla tokenilla Clockifysta.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>def test_valid_get_workspaces(valid_clockify):\n    \"\"\"Testaa ty\u00f6tilojen hakua oikealla tokenilla Clockifysta.\"\"\"\n    with patch.object(valid_clockify, \"get_workspaces\", return_value=[{\"name\": \"Test Workspace\", \"id\": \"workspace_123\"}]):\n        workspaces = valid_clockify.get_workspaces()\n        assert isinstance(workspaces, list), \"Palautuksen pit\u00e4isi olla lista\"\n        assert len(workspaces) &gt; 0, \"Ty\u00f6tiloja pit\u00e4isi olla saatavilla\"\n        assert workspaces[0][\"name\"] == \"Test Workspace\", \"Ty\u00f6tilojen nimi ei vastannut odotettua\"\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.valid_clockify","title":"<code>valid_clockify()</code>","text":"<p>Palauttaa ClockifyData-olion oikealla tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef valid_clockify():\n    \"\"\"Palauttaa ClockifyData-olion oikealla tokenilla.\"\"\"\n    return ClockifyData(clockify_url=clockify_url, api_key=valid_clockify_token)\n</code></pre>"},{"location":"modules_api_reference/#tests.api_tests.valid_project","title":"<code>valid_project()</code>","text":"<p>Testiprojekti oikealla tokenilla.</p> Source code in <code>tests\\api_tests.py</code> <pre><code>@pytest.fixture\ndef valid_project():\n    \"\"\"Testiprojekti oikealla tokenilla.\"\"\"\n    return ProjectData(own_project_url, valid_token)\n</code></pre>"},{"location":"modules_api_reference/#inbound-apin-testaus","title":"Inbound APIn testaus","text":"<p>Yleiskuvaus .rest-testitiedostoista l\u00f6ytyy t\u00e4\u00e4lt\u00e4 ja yksityiskohtaisempi Swagger-dokumentaatio l\u00f6ytyy t\u00e4\u00e4lt\u00e4.</p>"},{"location":"rest_tests/","title":"REST API Dokumentaatio","text":"<p>T\u00e4m\u00e4 dokumentaatio sis\u00e4lt\u00e4\u00e4 yleiskuvauksen .rest-testitiedostoista. Tarkempi Swagger-dokumentaatio l\u00f6ytyy t\u00e4\u00e4lt\u00e4.</p>"},{"location":"rest_tests/#clockify_requestsrest","title":"clockify_requests.rest","text":"<p>T\u00e4m\u00e4 tiedosto sis\u00e4lt\u00e4\u00e4 REST-pyynn\u00f6t Clockify-integraation testaamiseksi RepoRouskun API:ssa.</p> Pyynt\u00f6 Kuvaus GET <code>/api/v1/clockify/workspaces</code> Hae kaikki ty\u00f6tilat GET <code>/api/v1/clockify/workspaces/{workspaceId}/projects</code> Hae ty\u00f6tilan projektit GET <code>/api/v1/clockify/workspaces/{workspaceId}/projects/{projectId}/users</code> Hae kaikkien k\u00e4ytt\u00e4jien ty\u00f6tunnit projektista GET <code>/api/v1/clockify/workspaces/{workspaceId}/projects/{projectId}/users/{userId}/time-entries</code> Hae yksitt\u00e4isen k\u00e4ytt\u00e4j\u00e4n aikakirjaukset projektista GET <code>/api/v1/clockify/workspaces/{workspaceId}/projects/{projectId}/total-hours</code> Hae projektin kokonaistunnit GET <code>/api/v1/clockify/workspaces/{workspaceId}/projects/{projectId}/users/{userId}/total-hours</code> Hae k\u00e4ytt\u00e4j\u00e4n kokonaistunnit projektissa"},{"location":"rest_tests/#functionality_checkrest","title":"functionality_check.rest","text":"<p>T\u00e4m\u00e4 tiedosto sis\u00e4lt\u00e4\u00e4 REST-pyynn\u00f6t API-rajapinnan yleisen toimivuuden testaamiseksi RepoRouskun API:ssa.</p> Pyynt\u00f6 Kuvaus GET <code>/health</code> Tarkista API:n toimivuus GET <code>/status</code> Tarkista API:n status"},{"location":"rest_tests/#gitlab_requestsrest","title":"gitlab_requests.rest","text":"<p>T\u00e4m\u00e4 tiedosto sis\u00e4lt\u00e4\u00e4 REST-pyynn\u00f6t GitLab-integraation testaamiseksi RepoRouskun API:ssa.</p> Pyynt\u00f6 Kuvaus GET <code>/api/v1/gitlab/project-summary?project_url={projectUrl}</code> Hae GitLab-projektin yleiset tiedot GET <code>/api/v1/gitlab/member-summary?project_url={projectUrl}&amp;member={memberName}</code> Hae GitLab-projektin j\u00e4senen tilastot"},{"location":"usage/","title":"RepoRouskun k\u00e4ytt\u00f6ohjeet","text":"<p>RepoRousku on kehitetty tukemaan projektitiimien toimintaa GitLabin ja Clockifyn avulla. Sen avulla k\u00e4ytt\u00e4j\u00e4t voivat tarkastella projektidataa, kuten issueita, committeja ja ty\u00f6aikakirjauksia, ja luoda visuaalisia raportteja suoraan selaimessa. T\u00e4m\u00e4 ohje auttaa sinua RepoRouskun k\u00e4yt\u00f6ss\u00e4. </p>"},{"location":"usage/#asennus-ja-kayttoonotto","title":"Asennus ja k\u00e4ytt\u00f6\u00f6notto","text":"<ol> <li> <p>Vaaditut ty\u00f6kalut:</p> <ul> <li>Docker: RepoRousku toimii Docker-kontissa, joten varmista, ett\u00e4 Docker on asennettuna tietokoneellesi. </li> <li>GitLab ja Clockify-tunnukset: Tarvitset p\u00e4\u00e4syn GitLab-projektiin ja mahdollisesti Clockify-tilin, jos haluat hy\u00f6dynt\u00e4\u00e4 tuntidataa. </li> </ul> </li> <li> <p>Asennusohjeet:</p> <ul> <li> <p>Kloonaa RepoRouskun GitLab-repositorio:  <pre><code>git clone git@gitlab.dclabra.fi:projektiopinnot-4-digitaaliset-palvelut/palikkapalvelut.git\n</code></pre></p> </li> <li> <p>Rakenna ja k\u00e4ynnist\u00e4 Docker-kontti: <pre><code>docker-compose up --build\n</code></pre></p> </li> <li>Avaa selain ja siirry osoitteeseen: http://localhost:8501</li> </ul> </li> </ol>"},{"location":"usage/#kayttoliittyman-ohjeet","title":"K\u00e4ytt\u00f6liittym\u00e4n ohjeet","text":"<p>Kun k\u00e4ynnist\u00e4t RepoRouskun ensimm\u00e4ist\u00e4 kertaa, sivu pyyt\u00e4\u00e4 sinua sy\u00f6tt\u00e4m\u00e4\u00e4n GitLab sek\u00e4 Clockify Access tokenit. </p> <p>Tip</p> <p>Miten l\u00f6yd\u00e4n GitLab tai Clockify Access tokenin? Kurkkaa t\u00e4\u00e4lt\u00e4</p> <p></p> <p>Tokenit kannattaa tallentaa Tallenna tokenit -napukalla, jos tarkoituksenasi on tarkastella my\u00f6hemmin esim. toisen projektin tietoja.</p> <p>Jotta p\u00e4\u00e4set etusivusta pidemm\u00e4lle, on sinun annettava Rouskuttimelle GitLab-repositorion osoite sek\u00e4 GitLab Access Token. Clockifyt\u00e4 koskevat valinnat ovat vaihtoehtoisia. </p> <p>Kun tarvittavat tiedot on lis\u00e4tty, paina Rouskuta -painiketta. </p>"},{"location":"usage/#projekti-sivusto","title":"Projekti -sivusto","text":"<p>Projekti-sivu koostaa projektin metriikat yhteen interaktiiviseen n\u00e4kym\u00e4\u00e4n.</p> <p></p>"},{"location":"usage/#jasenet-sivusto","title":"J\u00e4senet -sivusto","text":"<p>Sivuston vasemmasta laidasta p\u00e4\u00e4set navigoitumaan sivujen v\u00e4lill\u00e4. J\u00e4senet -sivu koostaa j\u00e4senkohtaiset tiedot projekteista ja siihen k\u00e4ytetyist\u00e4 tunneista sek\u00e4 Avaa GitLab-painikkeella p\u00e4\u00e4\u00e4set k\u00e4tev\u00e4sti suoraan projektin GitLab-repositorioon.  </p> <p>J\u00e4senet-sivusto voi olla hy\u00f6dyllinen etenkin, jos sinun on tarpeen raportoida projektikurssin aikana suorittamasi issuet ja projektiin k\u00e4ytetty ty\u00f6aika. </p> <p></p>"},{"location":"usage/#ohje-gitlab-ja-clockify-access-tokeneiden-luontiin","title":"Ohje GitLab- ja Clockify Access Tokeneiden luontiin","text":""},{"location":"usage/#gitlab-access-tokenin-generoiminen","title":"GitLab Access Tokenin Generoiminen","text":"<ol> <li> <p>Kirjaudu GitLab-tilillesi ja siirry Personal Access Token -asetuksiin.</p> </li> <li> <p>Valitse oikeudet: Valitse read_api-oikeudet, jotta voit lukea projektidataa.</p> </li> </ol> <p></p> <ol> <li>Luo token ja kopioi se heti turvalliseen paikkaan. Huomioi, ett\u00e4 et voi n\u00e4hd\u00e4 t\u00e4t\u00e4 tokenia en\u00e4\u00e4 my\u00f6hemmin.</li> </ol> <p></p>"},{"location":"usage/#clockify-access-tokenin-generoiminen-valinnainen","title":"Clockify Access Tokenin Generoiminen (valinnainen)","text":"<p>Jos haluat n\u00e4hd\u00e4 Clockify-dataa RepoRousku-mikropalvelussa, sinun tulee luoda my\u00f6s Clockify Access Token.</p> <ol> <li> <p>Kirjaudu sis\u00e4\u00e4n Clockify-tilillesi Avaa Clockify ja kirjaudu sis\u00e4\u00e4n k\u00e4ytt\u00e4j\u00e4tunnuksellasi ja salasanallasi.</p> </li> <li> <p>Siirry Asetuksiin Kun olet kirjautunut sis\u00e4\u00e4n, vie hiiri oikeaan yl\u00e4kulmaan ja klikkaa k\u00e4ytt\u00e4j\u00e4kuvaketta avataksesi valikon. Valitse \"Preferences\" (Asetukset).</p> </li> </ol> <p></p> <ol> <li> <p>Siirry \"Advanced\" -v\u00e4lilehteen Asetuksissa siirry vasemmalla olevaan \"Advanced\"-v\u00e4lilehteen.</p> </li> <li> <p>Generoi API-avain Etsi \"API Key\" -osio ja klikkaa \"Generate\"-painiketta. Clockify luo sinulle API-avaimen, joka on ainutlaatuinen tilillesi.</p> </li> </ol> <p>T\u00e4rke\u00e4\u00e4: Kopioi API-avain heti ja tallenna se turvalliseen paikkaan, sill\u00e4 et voi n\u00e4hd\u00e4 sit\u00e4 en\u00e4\u00e4 my\u00f6hemmin.</p> <p></p> <ol> <li>API-avaimen k\u00e4ytt\u00f6 Nyt sinulla on k\u00e4ytett\u00e4viss\u00e4si Access Tokenit sek\u00e4 GitLabilta ett\u00e4 Clockifylta, joita voit k\u00e4ytt\u00e4\u00e4 RepoRousku-mikropalvelussa datan hakemiseen ja projektien hallintaan.</li> </ol>"},{"location":"usage/#tuki-ja-ongelmanratkaisu","title":"Tuki ja ongelmanratkaisu","text":"<ol> <li>Sovellus ei k\u00e4ynnisty? <ul> <li>Varmista, ett\u00e4 Docker toimii oikein</li> <li>K\u00e4yt\u00e4 komentoa docker-compose logs (tai ChatGPT:t\u00e4) ongelmien ratkaisemiseksi</li> </ul> </li> <li>GitLab -yhteys ei toimi? <ul> <li>Varmista, ett\u00e4 GitLab Access Token on oikein m\u00e4\u00e4ritetlty</li> <li>Varmista, ett\u00e4 repon linkki on projektin \"juuresta\"</li> </ul> </li> <li>Clockify-tiedot eiv\u00e4t n\u00e4y?<ul> <li>Varmista, ett\u00e4 Clockify Access Token on oikein m\u00e4\u00e4ritetty</li> <li>Tarkista, ett\u00e4 sinulla on tarvittavat oikeudet</li> </ul> </li> </ol>"}]}